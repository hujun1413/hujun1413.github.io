<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡君的个人博客</title>
  <subtitle>你必须非常努力才能看起来毫不费力</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hujun1413.github.io/"/>
  <updated>2019-03-24T16:33:45.291Z</updated>
  <id>http://hujun1413.github.io/</id>
  
  <author>
    <name>hujun1413</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>作品展示</title>
    <link href="http://hujun1413.github.io/2019/03/19/%E4%BD%9C%E5%93%81%E5%B1%95%E7%A4%BA/"/>
    <id>http://hujun1413.github.io/2019/03/19/作品展示/</id>
    <published>2019-03-19T10:35:26.000Z</published>
    <updated>2019-03-24T16:33:45.291Z</updated>
    
    <content type="html">&lt;p&gt;心血来潮，上传一些曾经做过的小作品，防止数据丢失而失去珍贵的回忆。&lt;/p&gt;
&lt;h3 id=&quot;TurtleBot2&quot;&gt;&lt;a href=&quot;#TurtleBot2&quot; class=&quot;headerlink&quot; title=&quot;TurtleBot2&quot;&gt;&lt;/a&gt;TurtleBot2&lt;/h3&gt;&lt;p&gt;投稿ROBIO2018的视频材料，用语音指导的方式提高指向导航的效率和准确率&lt;/p&gt;
&lt;p&gt;Jun Hu, Zhongyu Jiang, Xionghao Ding, Peter Hall and Taijiang Mu. VGPN: Voice-Guided Pointing Robot Navigation for Humans. ROBIO, 2018.&lt;/p&gt;
&lt;p&gt;This video shows the demonstration of our proposed VGPN approach for robot navigation.&lt;br&gt;It contains Scene 1 (when pointing gesture is unnecessary) and Scene 2 (when pointing direction is inaccurate) mentioned in the paper, showing the advantages of using voice gudance in pointing robot navigation.&lt;/p&gt;
&lt;p&gt;右键图片，在新标签页中打开，播放视频：&lt;br&gt;&lt;a href=&quot;https://v.youku.com/v_show/id_XNDEwOTc4MzU3Ng==.html?spm=a2hzp.8253869.0.0&quot; title=&quot;VGPN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/58948773DE7E4BBFA0AA957CECD5C865?method=download&amp;amp;shareKey=caf626da0df8cc576578fa61d6e4499b&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;智能车摄像头组&quot;&gt;&lt;a href=&quot;#智能车摄像头组&quot; class=&quot;headerlink&quot; title=&quot;智能车摄像头组&quot;&gt;&lt;/a&gt;智能车摄像头组&lt;/h3&gt;&lt;p&gt;设计智能车的图像处理算法，提高了中线提取算法的准确度和稳定性。&lt;br&gt;运用PID算法进行舵机打角和电机速度控制，使智能车的竞速又快又稳。&lt;/p&gt;
&lt;h4 id=&quot;第一次跑起来&quot;&gt;&lt;a href=&quot;#第一次跑起来&quot; class=&quot;headerlink&quot; title=&quot;第一次跑起来&quot;&gt;&lt;/a&gt;第一次跑起来&lt;/h4&gt;&lt;p&gt;2015年12月的圣诞节，第一次在赛道上跑起来&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://v.youku.com/v_show/id_XNDEwOTgwMjQ5Ng==.html?spm=a2h0j.11185381.listitem_page1.5!2~A&quot; title=&quot;智能车第一次跑&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/0D464AE263604D69ADA08DCDE6135765?method=download&amp;amp;shareKey=609bdd234e5604750a91173d1eff1e7b&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;校内赛晋级&quot;&gt;&lt;a href=&quot;#校内赛晋级&quot; class=&quot;headerlink&quot; title=&quot;校内赛晋级&quot;&gt;&lt;/a&gt;校内赛晋级&lt;/h4&gt;&lt;p&gt;2016年3月，在校内赛打败校内其他队伍，顺利晋级校队，获得代表学校参加华北赛的资格。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://note.youdao.com/yws/api/personal/file/E7F8F0B9Ehttps://v.youku.com/v_show/id_XNDEwOTc5ODMyOA==.html?spm=a2hzp.8244740.0.0&quot; title=&quot;智能车校内赛&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/E7F8F0B9E5074904AFC2BF5F9832FFFB?method=download&amp;amp;shareKey=b0c6a18ffd8f017a87971516e947efbc&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;华北赛决赛&quot;&gt;&lt;a href=&quot;#华北赛决赛&quot; class=&quot;headerlink&quot; title=&quot;华北赛决赛&quot;&gt;&lt;/a&gt;华北赛决赛&lt;/h4&gt;&lt;p&gt;2016年8月，在华北赛决赛获得赛区一等奖（15/92）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://v.youku.com/v_show/id_XNDEwOTgwMzMwNA==.html?spm=a2h0j.11185381.listitem_page1.5~A&quot; title=&quot;擂台赛&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/DD58233E80444B4E919778E8F800539C?method=download&amp;amp;shareKey=72ca47d8ad8e07f6640aff5cf72e21a2&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;擂台赛机器人&quot;&gt;&lt;a href=&quot;#擂台赛机器人&quot; class=&quot;headerlink&quot; title=&quot;擂台赛机器人&quot;&gt;&lt;/a&gt;擂台赛机器人&lt;/h3&gt;&lt;p&gt;参加RoboCup擂台赛的机器人，获得全国一等奖(8/50+)&lt;/p&gt;
&lt;p&gt;利用红外传感器，灰度传感器和电机驱动，设计攻守策略实现了一个不仅能自主推棋子和重物，还能与对方机器人进行擂台竞技的轮式机器人。&lt;/p&gt;
&lt;p&gt;下面是前期的视频，可惜没录制后期的，暂且一观吧。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://v.youku.com/v_show/id_XNDEwOTc5MTE4NA==.html?spm=a2h0j.11185381.listitem_page1.5!4~A&quot; title=&quot;擂台赛&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/85A4B1FEDB3A4A5D9F90D6453B05AAFC?method=download&amp;amp;shareKey=e65df9072431cf295b8cc9b6318c6b1f&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;心血来潮，上传一些曾经做过的小作品，防止数据丢失而失去珍贵的回忆。&lt;/p&gt;
&lt;h3 id=&quot;TurtleBot2&quot;&gt;&lt;a href=&quot;#TurtleBot2&quot; class=&quot;headerlink&quot; title=&quot;TurtleBot2&quot;&gt;&lt;/a&gt;TurtleBot2&lt;/h3&gt;&lt;p&gt;投稿ROBIO2018的视频材料，用语音指导的方式提高指向导航的效率和准确率&lt;/p&gt;
&lt;p&gt;Jun Hu, Zhongyu Jiang, Xionghao Ding, Peter Hall and Taijiang Mu. VGPN: Voice-Guided Pointing Robot Navigation for Humans. ROBIO, 2018.&lt;/p&gt;
&lt;p&gt;This video shows the demonstration of our proposed VGPN approach for robot navigation.&lt;br&gt;It contains Scene 1 (when pointing gesture is unnecessary) and Scene 2 (when pointing direction is inaccurate) mentioned in the paper, showing the advantages of using voice gudance in pointing robot navigation.&lt;/p&gt;
&lt;p&gt;右键图片，在新标签页中打开，播放视频：&lt;br&gt;&lt;a href=&quot;https://v.youku.com/v_show/id_XNDEwOTc4MzU3Ng==.html?spm=a2hzp.8253869.0.0&quot; title=&quot;VGPN&quot;&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/58948773DE7E4BBFA0AA957CECD5C865?method=download&amp;amp;shareKey=caf626da0df8cc576578fa61d6e4499b&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Video" scheme="http://hujun1413.github.io/categories/Video/"/>
    
    
  </entry>
  
  <entry>
    <title>VINS-Mono</title>
    <link href="http://hujun1413.github.io/2019/03/09/VSLAM/VINS-Mono/"/>
    <id>http://hujun1413.github.io/2019/03/09/VSLAM/VINS-Mono/</id>
    <published>2019-03-09T10:35:26.000Z</published>
    <updated>2019-03-24T16:30:15.611Z</updated>
    
    <content type="html">&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;由摄像机和低成本惯性测量单元(IMU)组成的单目视觉惯性系统(VINS)构成了用于度量六自由度状态估计的最小传感器套件。然而，由于缺乏直接距离测量，在IMU处理、估计器初始化、外部标定和非线性优化等方面提出了重大挑战。在本文中，我们提出了一种鲁棒的、通用的单目视觉惯性状态估计器VINS-Mono。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;我们的方法从一个鲁棒的初始化开始，用于估计器初始化和故障恢复。采用一种基于紧耦合、非线性优化的方法，通过融合预计分的IMU测量数据和特征观测数据，获得高精度的视觉惯性里程计。结合我们紧耦合的公式，一个循环检测模块能够以最小的计算开销重新定位.此外，我们还执行四自由度姿态图优化，以加强全局一致性.我们验证了我们的系统在公共数据集和真实世界实验上的性能，并与其他最先进的算法进行了比较。我们还在MAV平台上执行星载闭环自主飞行，并将算法移植到基于IOS的演示中。我们强调，所提议的工作是一个可靠、完整和多功能的系统，适用于需要高精度定位的不同应用程序。我们为个人电脑和iOS移动设备开放了我们的实现方法。&lt;/p&gt;
&lt;h3 id=&quot;预积分&quot;&gt;&lt;a href=&quot;#预积分&quot; class=&quot;headerlink&quot; title=&quot;预积分&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=a891eb8387ce5db6be6af50033528173&amp;amp;sub=CC23C8D2CCBF4520BC20737C10ECA8B7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;预积分&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;视觉处理前端&quot;&gt;&lt;a href=&quot;#视觉处理前端&quot; class=&quot;headerlink&quot; title=&quot;视觉处理前端&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=5b899d35efb2299f1e609c41c4ec8c8a&amp;amp;sub=92C5483D2F6A4712AA754B58CF9B9274&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;视觉处理前端&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=5f866711f04fdf698f9256241db45a92&amp;amp;sub=7feb2fd79f83fd8afc5ede955f95b932&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;初始化&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;边缘化&quot;&gt;&lt;a href=&quot;#边缘化&quot; class=&quot;headerlink&quot; title=&quot;边缘化&quot;&gt;&lt;/a&gt;边缘化&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://https//blog.csdn.net/heyijia0327/article/details/52822104&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SLAM中的marginalization 和 Schur complement&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;边缘化也被描述为将联合概率分布分解为边缘概率分布和条件概率分布的过程(说白了，就是利用shur补减少优化参数的过程)。&lt;/p&gt;
&lt;p&gt;舒尔补:我们没有人为的丢弃约束，所以不会丢失信息，但是计算结果的时候，我们只去更新了我们希望保留的那些变量的值。在slam的过程中，BA不断地加入新的待优化的变量，并marg旧的变量，从而使得计算量维持在一定水平。这就是sliding window filter, okvis, dso这些论文中marg的应用。&lt;/p&gt;
&lt;p&gt;要把一部分变量从多元高斯分布从分离出来，其实协方差矩阵很好分离，难分的是信息矩阵（协方差的逆），因为我们通常在SLAM里知道的是H矩阵，而不是协方差矩阵。对于H矩阵的分离，需要用到schur complement来分割。&lt;/p&gt;
&lt;p&gt;在marg的过程中，要去掉变量还要保留他的信息，把以前一个大的H矩阵丢掉一些维度压缩到一个小的H矩阵里，不可避免的就会使得原本稀疏的H矩阵变得稠密，这就是所谓的fill-in。DSO,OKVIS的作者在使用的时候都使用了一些策略来尽量维持稀疏性&lt;/p&gt;
&lt;p&gt;marg特征点的时候，我们要marg那些不被其他帧观测到的特征点。因为他们不会显著的使得H变得稠密。对于那些被其他帧观测到的特征点，要么就别设置为marg，要么就宁愿丢弃，这就是okvis和dso中用到的一些策略。&lt;/p&gt;
&lt;p&gt;first estimate jacobian:在开始新一次迭代时，计算H和J的时候，被marg掉的变量以及与marg掉的变量存在边的非marg变量的值仍然使用最开始，也就是使用于跟第一次迭代时这两种变量的初始值相同的值。不是所有的状态变量的雅克比都要fix ，只是和marg相连的那部分。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;由摄像机和低成本惯性测量单元(IMU)组成的单目视觉惯性系统(VINS)构成了用于度量六自由度状态估计的最小传感器套件。然而，由于缺乏直接距离测量，在IMU处理、估计器初始化、外部标定和非线性优化等方面提出了重大挑战。在本文中，我们提出了一种鲁棒的、通用的单目视觉惯性状态估计器VINS-Mono。
    
    </summary>
    
      <category term="VSLAM" scheme="http://hujun1413.github.io/categories/VSLAM/"/>
    
    
  </entry>
  
  <entry>
    <title>Lidar Visual SLAM</title>
    <link href="http://hujun1413.github.io/2019/03/09/VSLAM/Lidar%20Visula%20SLAM/"/>
    <id>http://hujun1413.github.io/2019/03/09/VSLAM/Lidar Visula SLAM/</id>
    <published>2019-03-09T10:35:26.000Z</published>
    <updated>2019-03-24T15:02:12.680Z</updated>
    
    <content type="html">&lt;h3 id=&quot;V-LOAM&quot;&gt;&lt;a href=&quot;#V-LOAM&quot; class=&quot;headerlink&quot; title=&quot;V-LOAM&quot;&gt;&lt;/a&gt;V-LOAM&lt;/h3&gt;&lt;p&gt;VLOAM ：Visual-lidar Odometry and Mapping: Low-drift, Robust, and Fast&lt;/p&gt;
&lt;p&gt;别人已开源，&lt;a href=&quot;https://github.com/daobilige-su/loam_velodyne&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/daobilige-su/loam_velodyne&lt;/a&gt;&lt;br&gt;视觉里程计用DEMO，论文见&lt;a href=&quot;https://ri.cmu.edu/pub_files/2014/9/IROS_2014.pdf，核心思想是用深度信息来辅助视觉里程计，有深度时可以不需要三角化。用iSAM做因子图优化&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ri.cmu.edu/pub_files/2014/9/IROS_2014.pdf，核心思想是用深度信息来辅助视觉里程计，有深度时可以不需要三角化。用iSAM做因子图优化&lt;/a&gt;&lt;br&gt;雷达里程计用LOAM，高频运动估计，低频L-M非线性优化和建图。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;The result is that the visual odometry handles rapid motion, and the lidar odometry warrants low-drift and robustness in undesirable lighting conditions.&lt;/p&gt;
&lt;p&gt;V-LOAM uses images to compute motion prior for scan matching, while LOAM only processes laser data.&lt;br&gt;视觉可以为雷达获得更好的点云深度，视觉也可以为雷达提供扫描匹配的运动先验&lt;/p&gt;
&lt;p&gt;深度图指的是利用雷达的点云和vo得到的运动估计不断注册，得到一个合并后在相机坐标系下的大点云，可以用这个点云来帮助获取特征点的深度。&lt;br&gt;特征点的距离是取深度图中离该点最近的3个点构成的平面，求光心到平面的距离作为该特征点的距离。如果在深度图中没有该特征点的深度，则可以根据特征匹配的结果三角化出来3D点&lt;/p&gt;
&lt;p&gt;V-LOAM 源码解析（一）&lt;br&gt;节点名称：featureTracking&lt;br&gt;订阅topic：&lt;sensor_msgs::image&gt;（”/camera/image_raw”）&lt;br&gt;发布topic：1、&lt;sensor_msgs::pointcloud2&gt; (“/image_points_last”）&lt;br&gt;          2、&lt;sensor_msgs::image&gt;(“/image/show”)&lt;/sensor_msgs::image&gt;&lt;/sensor_msgs::pointcloud2&gt;&lt;/sensor_msgs::image&gt;&lt;/p&gt;
&lt;p&gt;节点：visualOdometry&lt;br&gt;功能：订阅”/image_points_last”和”/depth_cloud”消息，将图像特征与三维点云匹配，获得图像特征点深度值，然后采用非线性优化的方法迭代收敛得到两帧图像之间的变换矩阵，即融合了三维点云信息的视觉里程计。&lt;/p&gt;
&lt;p&gt;节点：processDepthmap&lt;br&gt;功能：根据视觉里程计topic(“/cam_to_init”)，和点云数据（”/sync_scan_cloud_filtered”），将新点云和已有点云变换到当前相机坐标系下，实现图像与点云数据的对齐&lt;/p&gt;
&lt;p&gt;节点：stackDepthPoint&lt;br&gt;功能：将视觉里程计中用于定位的特征点三维坐标分批存储，用于后面的局部BA优化&lt;/p&gt;
&lt;p&gt;节点：bundleAdjust&lt;br&gt;功能：对视觉里程计获得的odom信息进行局部BA优化，获得精度更高的odom信息&lt;/p&gt;
&lt;p&gt;节点：transformMaintenance&lt;br&gt;功能：视觉里程计信息帧率较高，BA优化帧率较低，将二者结合，利用BA优化的结果修正视觉里程计，可以得到帧率和精度都较高的里程计信息&lt;/p&gt;
&lt;p&gt;节点：registerPointCloud&lt;br&gt;功能：根据最终的里程计信息将三维激光的点云加入到odom坐标系中，获得点云地图&lt;/p&gt;
&lt;h3 id=&quot;VI-LOAM&quot;&gt;&lt;a href=&quot;#VI-LOAM&quot; class=&quot;headerlink&quot; title=&quot;VI-LOAM&quot;&gt;&lt;/a&gt;VI-LOAM&lt;/h3&gt;&lt;p&gt;imu和视觉可以进行pose约束（预积分的两帧间位姿可以和视觉得到的r,t做约束），视觉可以进行camera的重投影约束（雷达可以给特征点提供已有的深度，如果雷达没深度可以三角化出深度，没有深度的特征也有一种约束方式）&lt;/p&gt;
&lt;p&gt;The motion estimation is to solve an optimization problem combining three sets of constraints: (a) From features with known depth as (6) and (7); (b) from features with unknown depth as (8); and (c) from the IMU prediction.&lt;/p&gt;
&lt;h3 id=&quot;LIMO&quot;&gt;&lt;a href=&quot;#LIMO&quot; class=&quot;headerlink&quot; title=&quot;LIMO&quot;&gt;&lt;/a&gt;LIMO&lt;/h3&gt;&lt;p&gt;已开源，github见&lt;a href=&quot;https://github.com/johannes-graeter/limo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/johannes-graeter/limo&lt;/a&gt;&lt;br&gt;论文见&lt;a href=&quot;https://arxiv.org/pdf/1807.07524.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://arxiv.org/pdf/1807.07524.pdf&lt;/a&gt;&lt;br&gt;在本研究中，我们提出了一种针对摄像机特征轨迹的激光雷达深度提取算法，并利用基于鲁棒关键帧的BA算法来估计运动。语义标记用于植被地标的离群剔除和加权，该传感器组合的能力在具有竞争力的KITTI数据集上得到了验证，排名在前15位。&lt;/p&gt;
&lt;p&gt;核心思想：用语义去剔除在动态物体上的特征点。在特征点在一个平面上时，比如在道路上时，可以根据平面检测的结果，得到特征点更好的深度信息。然后优化方程为：3d-3d和3d-2d的重投影误差&lt;/p&gt;
&lt;p&gt;没有和vloam一样使用icp，是为了体现视觉里程计和深度信息的融合。&lt;br&gt;LIMO is thereforethe second best LIDAR-Camera method published and the best performing method that does not use ICP based LIDAR- SLAM as refinement.&lt;br&gt;相对于纯vslam，结合雷达信息就是可以把雷达的点云准换到相机坐标系下，因此可以为vslam提供点云。视觉也可以为雷达获得更好的点云深度。&lt;/p&gt;
&lt;p&gt;特征提取和预处理：&lt;br&gt;feature tracking methodology, implemented in the viso2 library [7]&lt;br&gt;reject landmarks lying on moving objects，在语义图像中把属于动态物体的feature剔除&lt;/p&gt;
&lt;p&gt;尺度估计：&lt;br&gt;In order to estimate scale (Block S), depth corresponding to detected feature points is extracted from the LIDAR，从雷达的电云中提取出特征点的深度&lt;br&gt;直接从一张图中进行深度的估计&lt;/p&gt;
&lt;p&gt;先选择一个ROI记作f，然后把投影在图像的区域f上的雷达点云作为F点云。&lt;br&gt;把F点云进行分割前景，得到Fseg点云：只选择一部分点云来降低优化问题的规模&lt;br&gt;在Fseg中得到平面p，如果f在地面上，就应用一个特殊的匹配算法&lt;br&gt;根据f的投影线和平面p的交点求出f的深度：To accurately estimate the depth of f on the road, we rather segment points corresponding to the ground plane than to the foreground.因为特征点的深度可能不平，所以在特征点附近求出一个地面的方程，然后只取高度离平面一定范围内的点的深度。&lt;br&gt;f投影线和平面p的法线的角度要小于某个阈值&lt;/p&gt;
&lt;h3 id=&quot;Elastic-Lidar-Fusion论文&quot;&gt;&lt;a href=&quot;#Elastic-Lidar-Fusion论文&quot; class=&quot;headerlink&quot; title=&quot;Elastic Lidar Fusion论文&quot;&gt;&lt;/a&gt;Elastic Lidar Fusion论文&lt;/h3&gt;&lt;p&gt;泡泡机器人翻译&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;V-LOAM&quot;&gt;&lt;a href=&quot;#V-LOAM&quot; class=&quot;headerlink&quot; title=&quot;V-LOAM&quot;&gt;&lt;/a&gt;V-LOAM&lt;/h3&gt;&lt;p&gt;VLOAM ：Visual-lidar Odometry and Mapping: Low-drift, Robust, and Fast&lt;/p&gt;
&lt;p&gt;别人已开源，&lt;a href=&quot;https://github.com/daobilige-su/loam_velodyne&quot;&gt;https://github.com/daobilige-su/loam_velodyne&lt;/a&gt;&lt;br&gt;视觉里程计用DEMO，论文见&lt;a href=&quot;https://ri.cmu.edu/pub_files/2014/9/IROS_2014.pdf，核心思想是用深度信息来辅助视觉里程计，有深度时可以不需要三角化。用iSAM做因子图优化&quot;&gt;https://ri.cmu.edu/pub_files/2014/9/IROS_2014.pdf，核心思想是用深度信息来辅助视觉里程计，有深度时可以不需要三角化。用iSAM做因子图优化&lt;/a&gt;&lt;br&gt;雷达里程计用LOAM，高频运动估计，低频L-M非线性优化和建图。&lt;/p&gt;
    
    </summary>
    
      <category term="VSLAM" scheme="http://hujun1413.github.io/categories/VSLAM/"/>
    
    
  </entry>
  
  <entry>
    <title>Lidar SLAM</title>
    <link href="http://hujun1413.github.io/2019/03/09/VSLAM/Lidar%20SLAM/"/>
    <id>http://hujun1413.github.io/2019/03/09/VSLAM/Lidar SLAM/</id>
    <published>2019-03-09T10:35:26.000Z</published>
    <updated>2019-03-24T13:31:56.665Z</updated>
    
    <content type="html">&lt;h3 id=&quot;LOAM-velodyne系列学习&quot;&gt;&lt;a href=&quot;#LOAM-velodyne系列学习&quot; class=&quot;headerlink&quot; title=&quot;LOAM_velodyne系列学习&quot;&gt;&lt;/a&gt;LOAM_velodyne系列学习&lt;/h3&gt;&lt;p&gt;loam中文代码注解&lt;/p&gt;
&lt;p&gt;主要思路分为：1. 高频的运动估计； 2. 低频的环境建图。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Lidar接收数据，首先进行Point Cloud Registration，Lidar Odometry以10Hz的频率进行运动估计和坐标转换，Lidar Mapping以1Hz的频率构建三维地图，Transform Integration完成位姿的优化。这样并行的结构保证了系统的实时性。&lt;/p&gt;
&lt;p&gt;整个算法分为四个模块，相对于其它直接匹配两个点云的算法，LOAM是通过提取特征点进行匹配之后计算坐标变换。具体流程为：ScanRegistration 提取特征点并排除瑕点；LaserOdometry从特征点中估计运动，然后整合数据发送给LaserMapping；LaserMapping输出的laser_cloud_surround为地图；TransformMaintenance订阅LaserOdometry与LaserMapping发布的Odometry消息，对位姿进行融合优化。后面将详细进行说明。&lt;/p&gt;
&lt;p&gt;ScanRegistration：特征点提取&lt;br&gt;一次扫描的点通过曲率值来分类，特征点曲率大于阈值的为边缘点；特征点曲率小于阈值的为平面点。为了使特征点均匀的分布在环境中，将一次扫描划分为4个独立的子区域。每个子区域最多提供2个边缘点和4个平面点。此外，将不稳定的特征点（瑕点）排除。&lt;/p&gt;
&lt;p&gt;LaserOdometry：进行点云数据配准，完成运动估计&lt;br&gt;知乎讲解得很详细&lt;br&gt;利用ScanRegistration中提取到的特征点，建立相邻时间点云数据之间的关联，由此推断lidar的运动。&lt;br&gt;找到特征线和特征面，然后用L-M方法做优化。整个L-M运动估计的迭代次数为25次，以保证运算效率。迭代部分又可分为：对特征边/面上的点进行处理，构建Jaccobian矩阵，L-M运动估计求解。&lt;/p&gt;
&lt;p&gt;LaserMapping：优化Lidar的位姿，在此基础上完成低频的环境建图&lt;br&gt;拿当前扫描的点云和地图中所有点云去配准，利用已构建地图对位姿估计结果进行修正，优化Lidar里程计的位姿估计结果。&lt;/p&gt;
&lt;p&gt;TransformMaintenance：对位姿进行融合优化&lt;br&gt;每次接收到laser_odom_to_init消息并调用回调函数laserOdometryHandler时，就发布一次integrated_to_init消息。&lt;br&gt;有优化结果了就拿这一时刻的优化结果作为轨迹，没有优化结果只有里程计结果了，就直接拿里程计结果作为这一时刻的轨迹。&lt;/p&gt;
&lt;h3 id=&quot;LeGO-LOAM&quot;&gt;&lt;a href=&quot;#LeGO-LOAM&quot; class=&quot;headerlink&quot; title=&quot;LeGO-LOAM&quot;&gt;&lt;/a&gt;LeGO-LOAM&lt;/h3&gt;&lt;p&gt;它是一种轻量级和地面优化的激光雷达里程计和建图方法。LeGO-LOAM经过地面优化，因为它在分割和优化步骤中利用了地面的约束。我们首先应用点云分割来滤除噪声，并进行特征提取，以获得独特的平面和边缘特征。然后，采用两步Levenberg-Marquardt优化方法，使用平面和边缘特征来解决连续扫描中六个自由度变换的不同分量。&lt;/p&gt;
&lt;p&gt;将位姿图SLAM集成到LeGO-LOAM中。 每个特征点集的传感器位姿可以被建模为位姿图中的节点。&lt;br&gt;LeGO-LOAM初探：原理，安装和测试&lt;br&gt;LeGO-LOAM学习&lt;/p&gt;
&lt;h3 id=&quot;Cartographer学习&quot;&gt;&lt;a href=&quot;#Cartographer学习&quot; class=&quot;headerlink&quot; title=&quot;Cartographer学习&quot;&gt;&lt;/a&gt;Cartographer学习&lt;/h3&gt;&lt;p&gt;Cartograhper的设计目的是为了解决在有限的计算资源下，能够实时地获取相对较高精度的2D地图，考虑到基于模拟策略的粒子滤波方法在较大环境时对内存和计算资源的高需求，Cartographer采用基于图网络的优化方法。精度5厘米左右&lt;/p&gt;
&lt;p&gt;首先使用本地slam算法估计初始位姿，然后使用扫描匹配检测闭环，终于通过稀疏姿态图优化（sparse pose graph optimization，原理参见论文）算法优化整个位姿序列。&lt;/p&gt;
&lt;p&gt;用Grid（2D/3D）的形式建地图；本地优化的局部匹配直接建模成一个非线性优化问题，利用IMU提供一个比较靠谱的初值；全局优化的后端用Graph来优化，用分支定界算法来加速；2D和3D的问题统一在一个框架下解决。&lt;/p&gt;
&lt;h3 id=&quot;gmapping&quot;&gt;&lt;a href=&quot;#gmapping&quot; class=&quot;headerlink&quot; title=&quot;gmapping&quot;&gt;&lt;/a&gt;gmapping&lt;/h3&gt;&lt;p&gt;粒子+扫描匹配。在里程计的基础上，在机器人周围位置尝试算匹配度。&lt;br&gt;&lt;a href=&quot;https://people.eecs.berkeley.edu/~pabbeel/cs287-fa12/optreadings/GrisettiStachnissBurgard_gMapping_T-RO2006.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rao-Blackwellized Particle Filters 论文参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/roadseek_zw/article/details/53316177&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wenku.baidu.com/view/3a67461550e2524de4187e4d.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度文库代码解析&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ROS 提供的 gmaping 包是用来生成地图的，它是对著名的开源 OpenSlam 包在 ROS 框架下的一个实现。
这个包提供了对激光设备的 Slam,根据激光设备的输入和姿态数据从而建立一个基于网格的的2D地图。
它需要从 ROS 系统监听许多 Topic，并输出一个 Topic——map(nav_msgs/OccupancyGrid)，
这也是 RViz 的输入 Topic。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;已知精确位姿（坐标和朝向）的地图创建&quot;&gt;&lt;a href=&quot;#已知精确位姿（坐标和朝向）的地图创建&quot; class=&quot;headerlink&quot; title=&quot;已知精确位姿（坐标和朝向）的地图创建:&quot;&gt;&lt;/a&gt;已知精确位姿（坐标和朝向）的地图创建:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;机器人位置已知，通过激光雷达扫描到环境特征，即障碍物距离。
可通过机器人坐标和朝向以及障碍物距离计算出障碍物的坐标，采用bresenham直线段扫面算法，
障碍物所处的栅格标注为occupy，机器人所处的栅格与障碍物所处的栅格之间画直线，
直线所到之处都为free。当然每个栅格并不是简单的非0即1，栅格的占据可用概率表示，
若某一个栅格在激光束a扫描下标识为occupy，在激光束b扫描下也标识为occupy，
那该栅格的占据概率就变大，反之，则变小。
这样，机器人所处的环境就可以通过二维栅格地图来表征。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;如何在已知地图的情况下采用粒子滤波算法进行精确定位，&quot;&gt;&lt;a href=&quot;#如何在已知地图的情况下采用粒子滤波算法进行精确定位，&quot; class=&quot;headerlink&quot; title=&quot;如何在已知地图的情况下采用粒子滤波算法进行精确定位，&quot;&gt;&lt;/a&gt;如何在已知地图的情况下采用粒子滤波算法进行精确定位，&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;一般包括以下几个步骤：
（1）给定初始位姿，初始化粒子群，采用高斯分布进行随机采样；
（2）根据运动模型模拟粒子运动；
（3）计算粒子评分
        每个粒子的位姿即为假设的机器人位姿，采用bresenham直线段扫面算法，
        可计算出粒子当前位置与障碍物之间的栅格占据集合，
        计算出的栅格占据集合与给定的地图进行匹配计算，
        从而对每个粒子进行评分，选择得分高的粒子作为该时间点的机器人位姿。
（4）粒子群重采样
        将评分低的粒子舍弃，将评分高且很接近的粒子都保留下来，并对评分高的粒子进行复制，保持粒子数量不变。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;fast-slam&quot;&gt;&lt;a href=&quot;#fast-slam&quot; class=&quot;headerlink&quot; title=&quot;fast slam&quot;&gt;&lt;/a&gt;fast slam&lt;/h3&gt;&lt;p&gt;粒子+卡尔曼&lt;/p&gt;
&lt;h3 id=&quot;hector-slam&quot;&gt;&lt;a href=&quot;#hector-slam&quot; class=&quot;headerlink&quot; title=&quot;hector slam&quot;&gt;&lt;/a&gt;hector slam&lt;/h3&gt;&lt;p&gt;扫描匹配。完全不用里程计，算匹配概率&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;LOAM-velodyne系列学习&quot;&gt;&lt;a href=&quot;#LOAM-velodyne系列学习&quot; class=&quot;headerlink&quot; title=&quot;LOAM_velodyne系列学习&quot;&gt;&lt;/a&gt;LOAM_velodyne系列学习&lt;/h3&gt;&lt;p&gt;loam中文代码注解&lt;/p&gt;
&lt;p&gt;主要思路分为：1. 高频的运动估计； 2. 低频的环境建图。&lt;/p&gt;
    
    </summary>
    
      <category term="VSLAM" scheme="http://hujun1413.github.io/categories/VSLAM/"/>
    
    
  </entry>
  
  <entry>
    <title>SFM Revisited--Colmap</title>
    <link href="http://hujun1413.github.io/2019/03/09/VSLAM/Colmap/"/>
    <id>http://hujun1413.github.io/2019/03/09/VSLAM/Colmap/</id>
    <published>2019-03-09T10:35:26.000Z</published>
    <updated>2019-03-24T15:01:20.786Z</updated>
    
    <content type="html">&lt;h3 id=&quot;泡泡机器人-重新认识SfM-CVPR-16&quot;&gt;&lt;a href=&quot;#泡泡机器人-重新认识SfM-CVPR-16&quot; class=&quot;headerlink&quot; title=&quot;泡泡机器人-重新认识SfM (CVPR-16)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.sohu.com/a/199305001_715754&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;泡泡机器人-重新认识SfM (CVPR-16)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;是著名SFM开源系统COLMAP的稀疏三维重构部分的论文。&lt;/p&gt;
&lt;p&gt;增量式SfM是从无序图像集合中进行三维重建的常用方法。 虽然增量式SfM在所有方面都取得极大的进展，但在鲁棒性，准确性，完整性和可扩展性方面离真正的实用还有一定的差距。 &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;correspondence-search&quot;&gt;&lt;a href=&quot;#correspondence-search&quot; class=&quot;headerlink&quot; title=&quot;correspondence search&quot;&gt;&lt;/a&gt;correspondence search&lt;/h4&gt;&lt;p&gt;包含特征提取-&amp;gt;特征匹配-&amp;gt;几何验证，得到的是verified pairs C and a graph of image projections for each point&lt;/p&gt;
&lt;h4 id=&quot;Incremental-reconstruction&quot;&gt;&lt;a href=&quot;#Incremental-reconstruction&quot; class=&quot;headerlink&quot; title=&quot;Incremental reconstruction&quot;&gt;&lt;/a&gt;Incremental reconstruction&lt;/h4&gt;&lt;p&gt;输入是scene graph，输出是位姿P和重建场景X&lt;/p&gt;
&lt;p&gt;包含初始化-&amp;gt;图像注册-&amp;gt;三角化-&amp;gt;BA&lt;/p&gt;
&lt;p&gt;主要挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scene graph不完整&lt;/li&gt;
&lt;li&gt;image registration失败&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;主要贡献&quot;&gt;&lt;a href=&quot;#主要贡献&quot; class=&quot;headerlink&quot; title=&quot;主要贡献&quot;&gt;&lt;/a&gt;主要贡献&lt;/h3&gt;&lt;p&gt;主要有五点贡献：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;引入几何验证策略来标记场景图中的边的类型，以此提高初始化和三角化的鲁棒性，从而增强了scene graph&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next best view selection：评价标准为三角化出来的点多并且均匀分布&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一种计算成本更低，且鲁棒性更优的三角化方法：sampling-based triangulation，采用RANSAC且满足重投影小于阈值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;迭代BA，再三角化和异常值滤波策略能够减小累计误差，从而显着提高重建完整性和准确性。每次进行局部BA,当模型变大时才进行全局BA，全局BA之后再进行重三角化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从无序图像集合挖掘相似视图，使之成组，从而减小BA计算量，提高BA准确性&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;1-增强场景图&quot;&gt;&lt;a href=&quot;#1-增强场景图&quot; class=&quot;headerlink&quot; title=&quot;1.增强场景图&quot;&gt;&lt;/a&gt;1.增强场景图&lt;/h4&gt;&lt;p&gt;一般的方法不对图像类型进行区分，初始化和三角化的鲁棒性不高&lt;/p&gt;
&lt;p&gt;选择合适的矩阵，用GRIC这样的方法。&lt;/p&gt;
&lt;p&gt;根据NE,NH,NF的内点数，判断是一般的精确标定图，还是适合单应矩阵的图。&lt;/p&gt;
&lt;p&gt;根据三角化的角度判断是全景图还是平面图。&lt;/p&gt;
&lt;p&gt;根据在边缘处的内点数判断是WTF图（水印，时间戳，frames图）&lt;/p&gt;
&lt;p&gt;初始化只选非全景图和精确标定的图。&lt;br&gt;三角化时不选全景图？为什么？不能用H矩阵吗&lt;/p&gt;
&lt;h4 id=&quot;2-选取下一帧最好的图像&quot;&gt;&lt;a href=&quot;#2-选取下一帧最好的图像&quot; class=&quot;headerlink&quot; title=&quot;2. 选取下一帧最好的图像&quot;&gt;&lt;/a&gt;2. 选取下一帧最好的图像&lt;/h4&gt;&lt;p&gt;一般的方法只取三角化出来的可视点的个数，这样选出来的图还是很多，因为很多图都能看到相同的结构。所以还要考虑可视点的分布。&lt;/p&gt;
&lt;p&gt;uncertainty-driven的方法&lt;/p&gt;
&lt;p&gt;三角化出来的点多且分布均匀&lt;/p&gt;
&lt;p&gt;用了一个栅格的数据结构，统计图片的得分&lt;/p&gt;
&lt;h4 id=&quot;sampling-based-三角化&quot;&gt;&lt;a href=&quot;#sampling-based-三角化&quot; class=&quot;headerlink&quot; title=&quot;sampling-based 三角化&quot;&gt;&lt;/a&gt;sampling-based 三角化&lt;/h4&gt;&lt;p&gt;bundler采样所有的track elements的组合，再执行双视三角化，当三角化角度够大，再执行多视三角化，当所有的观测点都通过cheirality检查时接受三角化点。&lt;/p&gt;
&lt;p&gt;分解R和t有4种情况，其中通过cheirality检查的作为内点，。&lt;/p&gt;
&lt;p&gt;因此bundle无法将孤立的点恢复到一个track中，而且穷举的计算量太大&lt;/p&gt;
&lt;p&gt;基于RANSAC的采样方法，满足三角化的角度足够大，三角化点在a,b两个相机的深度为正，且重投影误差小于阈值t。&lt;/p&gt;
&lt;p&gt;RANSAC的优化：LO-RANSAC&lt;/p&gt;
&lt;h4 id=&quot;迭代BA&quot;&gt;&lt;a href=&quot;#迭代BA&quot; class=&quot;headerlink&quot; title=&quot;迭代BA&quot;&gt;&lt;/a&gt;迭代BA&lt;/h4&gt;&lt;p&gt;在图像注册和三角化之后执行局部BA，当模型增长到一定比例时进行一次全局BA。&lt;/p&gt;
&lt;p&gt;参数：局部BA用Cauthy函数作为鲁棒的loss函数。当几百个相机时用稀疏直接求解器（sparse direct solver），当相机规模更大时，用PCG。对于网络图像，还给定一个径向畸变参数作为自标定的估计。&lt;/p&gt;
&lt;p&gt;迭代BA，再三角化和异常值滤波策略能够减小累计误差，从而显着提高重建完整性和准确性。&lt;/p&gt;
&lt;p&gt;每次进行局部BA,当模型变大时才进行全局BA&lt;/p&gt;
&lt;p&gt;全局BA之前和之后都进行重三角化，为了提高重建的完整度。保留了低于观测误差阈值的点，而不是增大三角化的阈值。&lt;/p&gt;
&lt;p&gt;迭代局部BA。一般2次就够了，BA后过滤，再次迭代&lt;/p&gt;
&lt;h4 id=&quot;从无序图像集合挖掘相似视图&quot;&gt;&lt;a href=&quot;#从无序图像集合挖掘相似视图&quot; class=&quot;headerlink&quot; title=&quot;从无序图像集合挖掘相似视图&quot;&gt;&lt;/a&gt;从无序图像集合挖掘相似视图&lt;/h4&gt;&lt;p&gt;使之成组，从而减小BA计算量，提高BA准确性&lt;/p&gt;
&lt;h3 id=&quot;COLMAP-documentation&quot;&gt;&lt;a href=&quot;#COLMAP-documentation&quot; class=&quot;headerlink&quot; title=&quot;COLMAP documentation&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://colmap.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;COLMAP documentation&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;图像匹配的策略&quot;&gt;&lt;a href=&quot;#图像匹配的策略&quot; class=&quot;headerlink&quot; title=&quot;图像匹配的策略&quot;&gt;&lt;/a&gt;图像匹配的策略&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://colmap.github.io/tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;feature matching and geometric verification&lt;/a&gt;:Exhaustive Matching, Sequential Matching, Vocabulary Tree Matching等&lt;/p&gt;
&lt;p&gt;穷举匹配（Exhaustive Matching）：当你的数据集比较小的时候（小于100张），选择这种模式。这种模式匹配速度足够快并且是最好的效果。每张图片都与其他的所有图片进行匹配。最后生成的块大小取决于你载入内存中的图片的数量。&lt;/p&gt;
&lt;p&gt;顺序匹配（Sequential Matching）：当你拍照的时候是以连续的方式（比如视频）采集图像的话，这种方式是有用的。连续帧具有视觉重叠。每一帧的图像不必和其他所有图像都进行匹配。只有连续帧匹配就OK了。该模式也有内置的循环检测，第N个图像与其视觉上最为相似的图片匹配。但需要事先训练字典树。&lt;a href=&quot;https://demuc.de/colmap/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://demuc.de/colmap/&lt;/a&gt; 在这里可以下载。此种方法非常适合在视频序列中大量采用的情况，相比于全局匹配模式大大降低了matching时间。&lt;/p&gt;
&lt;p&gt;字典树匹配（Vocabulary Tree Matching）：在这种匹配模式下，每张图片都与与他视觉上最相近的经过按空间顺序重新排序的邻居匹配。也需要实现训练好字典树，网页地址同上。&lt;/p&gt;
&lt;p&gt;空间匹配（Spatial Matching）：这种模式下每个图像均与其空间最近邻居进行匹配。可以在数据库中手动设置空间位置。默认情况下colmap还会从EXIF中获取GPS的相关信息并用来寻找空间上最相近的邻居。如果有准确的先验空间位置信息的话，这种是推荐的匹配模式。&lt;/p&gt;
&lt;p&gt;传递匹配（Transitive Matching）：这种匹配模式使用已经存在的特征匹配的传递关系来完成更完整的匹配图。例如如果图像A匹配B而B也匹配C，那么colmap将尝试直接匹配A到C。&lt;/p&gt;
&lt;p&gt;自定义匹配（Custom Matching）：这种模式下允许指定的单个图片去匹配其他图片或者导入指定的已匹配的信息。要指定图像对的话，必须提供一个文本文件如下（每行一对一）：&lt;/p&gt;
&lt;h3 id=&quot;COLMAP-github&quot;&gt;&lt;a href=&quot;#COLMAP-github&quot; class=&quot;headerlink&quot; title=&quot;COLMAP github&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://colmap.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;COLMAP github&lt;/a&gt;&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;泡泡机器人-重新认识SfM-CVPR-16&quot;&gt;&lt;a href=&quot;#泡泡机器人-重新认识SfM-CVPR-16&quot; class=&quot;headerlink&quot; title=&quot;泡泡机器人-重新认识SfM (CVPR-16)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.sohu.com/a/199305001_715754&quot;&gt;泡泡机器人-重新认识SfM (CVPR-16)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;是著名SFM开源系统COLMAP的稀疏三维重构部分的论文。&lt;/p&gt;
&lt;p&gt;增量式SfM是从无序图像集合中进行三维重建的常用方法。 虽然增量式SfM在所有方面都取得极大的进展，但在鲁棒性，准确性，完整性和可扩展性方面离真正的实用还有一定的差距。 &lt;/p&gt;
    
    </summary>
    
      <category term="VSLAM" scheme="http://hujun1413.github.io/categories/VSLAM/"/>
    
    
  </entry>
  
  <entry>
    <title>SLAM与深度学习</title>
    <link href="http://hujun1413.github.io/2018/11/09/VSLAM/SLAM%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://hujun1413.github.io/2018/11/09/VSLAM/SLAM与深度学习/</id>
    <published>2018-11-09T10:35:26.000Z</published>
    <updated>2019-03-24T15:02:47.403Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Tombone’s-Computer-Vision-Blog&quot;&gt;&lt;a href=&quot;#Tombone’s-Computer-Vision-Blog&quot; class=&quot;headerlink&quot; title=&quot;Tombone’s Computer Vision Blog&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.computervisionblog.com/2016/01/why-slam-matters-future-of-real-time.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tombone’s Computer Vision Blog&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;翻译如下：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/qq_18661939/article/details/51919329&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ICCV研讨会：实时SLAM的未来以及深度学习与SLAM的比较&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/66006923&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;当前深度学习和slam结合有哪些比较好的论文，有没有一些开源的代码?&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;slam与深度学习结合&quot;&gt;&lt;a href=&quot;#slam与深度学习结合&quot; class=&quot;headerlink&quot; title=&quot;slam与深度学习结合&quot;&gt;&lt;/a&gt;slam与深度学习结合&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u010821666/article/details/78749356&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用深度学习方法替换SLAM中的模块&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用深度学习方法替换传统slam中的一个/几个模块：&lt;br&gt;目前还不能达到超越传统方法的效果，相较传统SLAM并没有很明显的优势（标注的数据集少且不全，使用视频做训练数据的非常少。SLAM中很多问题都是数学问题，深度学习并不擅长等等原因）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u010821666/article/details/78793225&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;语义SLAM &amp;amp; 端到端&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在传统SLAM之上加入语义信息&lt;br&gt;语义SLAM算是在扩展了传统SLAM问题的研究内容，现在出现了一些将语义信息集成到SLAM的研究，比如说用SLAM系统中得到的图像之间的几何一致性促进图像语义分割，也可以用语义分割/建图的结果促进SLAM的定位/闭环等，前者已经有了一些研究，不过还是集中于室内场景，后者貌似还没有什么相关研究。如果SLAM和语义分割能够相互促进相辅相成，应该能达到好的效果。&lt;/p&gt;
&lt;p&gt;另：使用SLAM帮助构建大规模的图像之间有对应关系的数据集，可以降低深度学习数据集的标注难度吧，应该也是一个SLAM助力深度学习的思路。&lt;/p&gt;
&lt;p&gt;1、利用学习的方法辅助几何方法。比如有学习的方法估计出深度信息，学习特征等等，特别是在几何法有时不行的时候。可以增强系统的鲁棒性。TUM实验室的CNN-Slam就是这个范畴，如果没记错的话。2、直接端到端学的，比如PoseNet，DeepVO，UnDeepVO3、语义Slam。不太了解，感觉机器学习做语义分割的很多，结合一下做语义Slam应该可以关联很多。&lt;/p&gt;
&lt;p&gt;提高特征点稳定性（减少outlier）和自动提取不同层级的特征点（点、线、面、物体），&lt;br&gt;快速生成密集的地图（而非稀疏的三维点云）&lt;br&gt;结合语义信息和图像分割&lt;br&gt;生成动态地图（可以实时更新、表达动态物体）&lt;br&gt;降低SLAM调参的难度&lt;/p&gt;
&lt;p&gt;将几何与深度学习结合。&lt;br&gt;&lt;a href=&quot;https://alexgkendall.com/computer_vision/have_we_forgotten_about_geometry_in_computer_vision/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Have We Forgotten about Geometry in Computer Vision?&lt;/a&gt;&lt;br&gt;求解深度，求解两帧间变换，特征点描述和提取，重定位&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/29864012&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单目深度估计-深度学习&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://campar.in.tum.de/Chair/ProjectCNNSLAM&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CNN-SLAM实时稠密单目SLAM&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;论文&quot;&gt;&lt;a href=&quot;#论文&quot; class=&quot;headerlink&quot; title=&quot;论文&quot;&gt;&lt;/a&gt;论文&lt;/h3&gt;&lt;h4 id=&quot;DeepVO-Towards-End-to-End-Visual-Odometry-with-Deep-Recurrent-Convolutional-Neural-Networks&quot;&gt;&lt;a href=&quot;#DeepVO-Towards-End-to-End-Visual-Odometry-with-Deep-Recurrent-Convolutional-Neural-Networks&quot; class=&quot;headerlink&quot; title=&quot;DeepVO: Towards End-to-End Visual Odometry with Deep Recurrent Convolutional Neural Networks&quot;&gt;&lt;/a&gt;DeepVO: Towards End-to-End Visual Odometry with Deep Recurrent Convolutional Neural Networks&lt;/h4&gt;&lt;p&gt;CNN和RNN结合，实现了一个端到端的VO&lt;br&gt;听说复现的效果不好，需考虑&lt;/p&gt;
&lt;p&gt;我的改进idea：将Deep RNN换成更好的注意力模型&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.dataguru.cn/article-12415-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;注意力机制介绍&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Tombone’s-Computer-Vision-Blog&quot;&gt;&lt;a href=&quot;#Tombone’s-Computer-Vision-Blog&quot; class=&quot;headerlink&quot; title=&quot;Tombone’s Computer Vision Blog&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.computervisionblog.com/2016/01/why-slam-matters-future-of-real-time.html&quot;&gt;Tombone’s Computer Vision Blog&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;翻译如下：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/qq_18661939/article/details/51919329&quot;&gt;ICCV研讨会：实时SLAM的未来以及深度学习与SLAM的比较&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/66006923&quot;&gt;当前深度学习和slam结合有哪些比较好的论文，有没有一些开源的代码?&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="VSLAM" scheme="http://hujun1413.github.io/categories/VSLAM/"/>
    
    
  </entry>
  
  <entry>
    <title>ORB-SLAM2</title>
    <link href="http://hujun1413.github.io/2018/11/09/VSLAM/ORB-SLAM2/"/>
    <id>http://hujun1413.github.io/2018/11/09/VSLAM/ORB-SLAM2/</id>
    <published>2018-11-09T10:35:26.000Z</published>
    <updated>2019-03-24T16:34:17.649Z</updated>
    
    <content type="html">&lt;h3 id=&quot;ORB-SLAM2&quot;&gt;&lt;a href=&quot;#ORB-SLAM2&quot; class=&quot;headerlink&quot; title=&quot;ORB-SLAM2&quot;&gt;&lt;/a&gt;ORB-SLAM2&lt;/h3&gt;&lt;p&gt;ROS版本：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo chmod 777 ORBvoc.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo chmod 777 TUM1.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;话题名字为：/camera/rgb/image_color和/camera/depth/image，修改ROS/ORB_SLAM2/src/ros_rgbd.cc文件中的监听话题名，再./build_ros.sh。（编译可能出错）&lt;/p&gt;
&lt;p&gt;（需要用opencv2.4.9来进行编译），即在CMakeList.txt中写成&lt;br&gt;find_package(OpenCV 2.4.9 EXACT REQUIRED)&lt;/p&gt;
&lt;h4 id=&quot;ROS版本：&quot;&gt;&lt;a href=&quot;#ROS版本：&quot; class=&quot;headerlink&quot; title=&quot;ROS版本：&quot;&gt;&lt;/a&gt;ROS版本：&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RGBD：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;roscore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ~/hujun_file/ORB_SLAM2/Examples/ROS/ORB_SLAM2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosrun ORB_SLAM2 RGBD ORBvoc.txt TUM1.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosbag play --clock hujun_file/bag/create_map/rgbd_dataset_freiburg1_xyz.bag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stereo:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ~/hujun_file/ORB_SLAM2/Examples/ROS/ORB_SLAM2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosrun ORB_SLAM2 Stereo Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosbag play --pause ~/hujun_file/bag/MH_01_easy.bag cam0/image_raw:=/camera/left/image_raw /cam1/image_raw:=/camera/right/image_raw&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Monocular:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosrun ORB_SLAM2 Mono Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml /cam0/image_raw #注意这里需要手动传入监听的图像话题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AR_Demo:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;运行出错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosrun ORB_SLAM2 MonoAR Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosbag play --pause ~/hujun_file/bag/MH_01_easy.bag cam0/image_raw:=/camera/image_raw&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;非ROS版本：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RGB-D:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./Examples/RGB-D/rgbd_tum Vocabulary/ORBvoc.txt Examples/RGB-D/TUM1.yaml ../rgbd_dataset_freiburg1_xyz ../rgbd_dataset_freiburg1_xyz/associations.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stereo:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./Examples/Stereo/stereo_euroc Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml ~/hujun_file/bag/mav0/cam0/data ~/hujun_file/bag/mav0/cam1/data Examples/Monocular/EuRoC_TimeStamps/MH01.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Monocular:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./Examples/Monocular/mono_euroc Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml ~/hujun_file/bag/mav0/cam0/data Examples/Monocular/EuRoC_TimeStamps/MH01.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ORB-SLAM吴博注释版&lt;br&gt;ORBSlam2中的闭环检测和后端优化LoopClosing&lt;/p&gt;
&lt;h4 id=&quot;源码阅读记录&quot;&gt;&lt;a href=&quot;#源码阅读记录&quot; class=&quot;headerlink&quot; title=&quot;源码阅读记录&quot;&gt;&lt;/a&gt;源码阅读记录&lt;/h4&gt;&lt;p&gt;ORB-SLAM2详解（一）简介&lt;br&gt;ORB-SLAM2 程序解读&lt;br&gt;ORB-SLAM2详解（二）代码逻辑&lt;br&gt;RGB-D： 泡泡机器人ORB-SLAM2源码详解&lt;/p&gt;
&lt;h5 id=&quot;自动地图初始化&quot;&gt;&lt;a href=&quot;#自动地图初始化&quot; class=&quot;headerlink&quot; title=&quot;自动地图初始化&quot;&gt;&lt;/a&gt;自动地图初始化&lt;/h5&gt;&lt;p&gt;系统的第一步是初始化，ORB_SLAM使用的是一种自动初始化方法。这里同时计算两个模型：用于平面场景的单应性矩阵H和用于非平面场景的基础矩阵F，然后通过一个评分规则来选择合适的模型，恢复相机的旋转矩阵R和平移向量t。&lt;/p&gt;
&lt;h5 id=&quot;找到初始对应点&quot;&gt;&lt;a href=&quot;#找到初始对应点&quot; class=&quot;headerlink&quot; title=&quot;找到初始对应点&quot;&gt;&lt;/a&gt;找到初始对应点&lt;/h5&gt;&lt;p&gt;Tracking.cc 600行SearchForInitialization&lt;/p&gt;
&lt;h6 id=&quot;同时计算两个模型&quot;&gt;&lt;a href=&quot;#同时计算两个模型&quot; class=&quot;headerlink&quot; title=&quot;同时计算两个模型&quot;&gt;&lt;/a&gt;同时计算两个模型&lt;/h6&gt;&lt;p&gt;调用Initializer.cc中的Initializer::Initialized函数进行初始化工作。同时计算H和F的线程，当场景是一个平面、或近似为一个平面、或者视差较小的时候，可以使用单应性矩阵H，而使用基础矩阵F恢复运动，需要场景是一个非平面、视差大的场景。 ORB_SLAM2关键算法分析1——基础矩阵F和单应矩阵H初始化位姿&lt;/p&gt;
&lt;h5 id=&quot;跟踪点在一个范围内做金字塔&quot;&gt;&lt;a href=&quot;#跟踪点在一个范围内做金字塔&quot; class=&quot;headerlink&quot; title=&quot;跟踪点在一个范围内做金字塔&quot;&gt;&lt;/a&gt;跟踪点在一个范围内做金字塔&lt;/h5&gt;&lt;p&gt;每层金字塔的特征点数是有要求的，保证在特征点稠密的地方特征点不会太多，在特征点稀疏的地方特征点不会太少。&lt;/p&gt;
&lt;p&gt;ORB-SLAM2之地图保存、加载和重定位&lt;/p&gt;
&lt;h4 id=&quot;将ORB-SLAM2用于导航&quot;&gt;&lt;a href=&quot;#将ORB-SLAM2用于导航&quot; class=&quot;headerlink&quot; title=&quot;将ORB_SLAM2用于导航&quot;&gt;&lt;/a&gt;将ORB_SLAM2用于导航&lt;/h4&gt;&lt;p&gt;2D的栅格地图 或者 3D点云生成的octomap 适合用于机器人导航&lt;/p&gt;
&lt;p&gt;首先运行ORB_SLAM2得到机器人的定位和一些识别出的路标。然后利用所选取的关键帧进行拼接得到点云地图，将点云转换成octomap即可用于导航&lt;br&gt;ORB_SLAM实时显示octomap&lt;br&gt;原始的orb-slam2只能显示稀疏点云，所以加了一个pcl_viewer和点云拼接的线程，来实现实时显示拼接关键帧的点云图像。&lt;/p&gt;
&lt;p&gt;ORB_SLAM实时发布点云–高博的ORBSLAM2_with_pointcloud_map&lt;br&gt;编译安装高翔的ORBSLAM2_with_pointcloud_map，获取点云地图&lt;br&gt;ORBSLAM2_with_pointcloud_map-master通过RGBD跑TUM数据集&lt;br&gt;Octomap 在ROS环境下实时显示&lt;/p&gt;
&lt;h4 id=&quot;Kinect2跑ORB-SLAM2&quot;&gt;&lt;a href=&quot;#Kinect2跑ORB-SLAM2&quot; class=&quot;headerlink&quot; title=&quot;Kinect2跑ORB_SLAM2&quot;&gt;&lt;/a&gt;Kinect2跑ORB_SLAM2&lt;/h4&gt;&lt;p&gt;编译Kinect v2，跑通kinect2&lt;br&gt;标定：没标定过的kinect2，深度图和彩色图之间是不保证一一对应的。标定后得到kinect2彩色头、深度头、红外头的内参和外参。&lt;br&gt;编译orb-slam2，跑通orb-slam2&lt;br&gt;在Kinect2上运行orb-slam2&lt;br&gt;写一下kinect参数到yaml&lt;br&gt;直接跑orb的ros demo/修改kinect_viewer的代码&lt;/p&gt;
&lt;h4 id=&quot;利用ORB-SLAM2得到的路标点来得到可用于路径轨迹的地图&quot;&gt;&lt;a href=&quot;#利用ORB-SLAM2得到的路标点来得到可用于路径轨迹的地图&quot; class=&quot;headerlink&quot; title=&quot;利用ORB_SLAM2得到的路标点来得到可用于路径轨迹的地图&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.zhihu.com/question/68430075/answer/265121749&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;利用ORB_SLAM2得到的路标点来得到可用于路径轨迹的地图&lt;/a&gt;&lt;/h4&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ORB-SLAM2&quot;&gt;&lt;a href=&quot;#ORB-SLAM2&quot; class=&quot;headerlink&quot; title=&quot;ORB-SLAM2&quot;&gt;&lt;/a&gt;ORB-SLAM2&lt;/h3&gt;&lt;p&gt;ROS版本：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo chmod 777 ORBvoc.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo chmod 777 TUM1.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="VSLAM" scheme="http://hujun1413.github.io/categories/VSLAM/"/>
    
    
  </entry>
  
  <entry>
    <title>重要VSLAM系统</title>
    <link href="http://hujun1413.github.io/2018/11/09/VSLAM/%E9%87%8D%E8%A6%81VSLAM%E7%B3%BB%E7%BB%9F/"/>
    <id>http://hujun1413.github.io/2018/11/09/VSLAM/重要VSLAM系统/</id>
    <published>2018-11-09T10:35:26.000Z</published>
    <updated>2019-03-24T13:09:10.462Z</updated>
    
    <content type="html">&lt;h3 id=&quot;SLAMCN&quot;&gt;&lt;a href=&quot;#SLAMCN&quot; class=&quot;headerlink&quot; title=&quot;SLAMCN&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.slamcn.org/index.php/%E9%A6%96%E9%A1%B5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SLAMCN&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;SLAM是什么？它的未来在哪里？&quot;&gt;&lt;a href=&quot;#SLAM是什么？它的未来在哪里？&quot; class=&quot;headerlink&quot; title=&quot;SLAM是什么？它的未来在哪里？&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_61b61d9d0102wnf2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SLAM是什么？它的未来在哪里？&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;SLAM是技术，手机端的话涉及VIO&lt;/p&gt;
&lt;p&gt;RGBD,Lidar,imu,odom,gps。基于这些传感器做一个组合SLAM。涉及：前端的tracking和后端的优化&lt;br&gt;多传感器融合是趋势，视觉结合imu等传感器。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结归纳&quot;&gt;&lt;a href=&quot;#总结归纳&quot; class=&quot;headerlink&quot; title=&quot;总结归纳&quot;&gt;&lt;/a&gt;总结归纳&lt;/h3&gt;&lt;p&gt;直接法的缺点：&lt;br&gt;怕模糊（需要全局曝光相机）&lt;br&gt;怕大运动（图像非凸性）&lt;br&gt;怕光照变化（灰度不变假设）&lt;/p&gt;
&lt;p&gt;直接法的优点：&lt;br&gt;速度快&lt;br&gt;可稠密建图&lt;/p&gt;
&lt;h3 id=&quot;视觉SLAM系统&quot;&gt;&lt;a href=&quot;#视觉SLAM系统&quot; class=&quot;headerlink&quot; title=&quot;视觉SLAM系统&quot;&gt;&lt;/a&gt;视觉SLAM系统&lt;/h3&gt;&lt;p&gt;单目SLAM:     &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PTAM 2007 很牛逼的工作，论文中提出的关键帧以及多线程处理思想成为之后视觉slam标配；甚至能够实时运行在手机上。不少AR是基于ptam的；     &lt;/li&gt;
&lt;li&gt;DTAM 2011 direct  slam方法的鼻祖；    &lt;/li&gt;
&lt;li&gt;LSD-SLAM 2014年，将直接法应用到了半稠密的单目SLAM中。&lt;/li&gt;
&lt;li&gt;ORB-SLAM 2015年，代表着主流的特征点SLAM的一个高峰，属于稀疏建图。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;RGBD:     &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;KinectFusion 2011     &lt;/li&gt;
&lt;li&gt;RGBD-SLAM2 2014     &lt;/li&gt;
&lt;li&gt;ElasticFusion  2015&lt;/li&gt;
&lt;li&gt;RTAB-MAP  RGB-D在CPU上实现实时稠密地图&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以单目slam为例，SLAM可分为前端和后端；前端主要负责tracking相机的姿态位置，并筛选关键帧；而后端则主要负责姿态图的优化。而优化的方法多采用G2O或者SBA。&lt;/p&gt;
&lt;h3 id=&quot;一起做RGB-D-SLAM&quot;&gt;&lt;a href=&quot;#一起做RGB-D-SLAM&quot; class=&quot;headerlink&quot; title=&quot;一起做RGB-D SLAM&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.cnblogs.com/gaoxiang12/p/4719156.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一起做RGB-D SLAM&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;机器人会议：IJRR/TRO/RAM/JFD/ICRA/IROS/ROBIO&lt;/p&gt;
&lt;h3 id=&quot;主流的VSLAM&quot;&gt;&lt;a href=&quot;#主流的VSLAM&quot; class=&quot;headerlink&quot; title=&quot;主流的VSLAM&quot;&gt;&lt;/a&gt;主流的VSLAM&lt;/h3&gt;&lt;p&gt;视觉稀疏法：ORB-SLAM 、PTAM、MonoSLAM&lt;/p&gt;
&lt;p&gt;半稠密法：LSD-SLAM、DSO、SVO&lt;/p&gt;
&lt;p&gt;稠密法：DTAM、Elastic Fusion、Kintinous、DVO、RGBD-SLAM-V2、RTAB-MAP、MLM等&lt;/p&gt;
&lt;p&gt;激光：Hector SLAM、Gmapping、tinySLAM&lt;/p&gt;
&lt;p&gt;后端优化：g2o、ceres、GTSAM&lt;/p&gt;
&lt;p&gt;数据：RGB-D SLAM Dataset and Benchmark、KITTI Vision Benchmark Suite、The EuRoC MAV Dataset等。&lt;/p&gt;
&lt;p&gt;直接法：SVO、LSD-SLAM&lt;/p&gt;
&lt;h4 id=&quot;MonoSLAM-2003-2007&quot;&gt;&lt;a href=&quot;#MonoSLAM-2003-2007&quot; class=&quot;headerlink&quot; title=&quot;MonoSLAM(2003-2007)&quot;&gt;&lt;/a&gt;MonoSLAM(2003-2007)&lt;/h4&gt;&lt;p&gt;2007年，A.J.Davison教授提出的第一个实时的单目视觉SLAM系统。扩展卡尔曼滤波为后端，追踪前段非常稀疏的特征点。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用场景很窄&lt;/li&gt;
&lt;li&gt;路标数量有限&lt;/li&gt;
&lt;li&gt;特征点稀疏非常容易丢失&lt;/li&gt;
&lt;li&gt;开发已经停止&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;PTAM-2007-2008&quot;&gt;&lt;a href=&quot;#PTAM-2007-2008&quot; class=&quot;headerlink&quot; title=&quot;PTAM(2007-2008)&quot;&gt;&lt;/a&gt;PTAM(2007-2008)&lt;/h4&gt;&lt;p&gt;2007年，Klein等人提出。基于FAST角点&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跟踪和建图的并行化&lt;/li&gt;
&lt;li&gt;第一个使用非线性优化。&lt;/li&gt;
&lt;li&gt;同时是一个增强现实的软件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺乏回环检测和重定位&lt;/li&gt;
&lt;li&gt;场景小，跟踪容易丢失&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ORB-SLAM-2014-2015&quot;&gt;&lt;a href=&quot;#ORB-SLAM-2014-2015&quot; class=&quot;headerlink&quot; title=&quot;ORB-SLAM(2014-2015)&quot;&gt;&lt;/a&gt;ORB-SLAM(2014-2015)&lt;/h4&gt;&lt;p&gt;2015年，代表着主流的特征点SLAM的一个高峰，属于稀疏建图。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持单目，双目，RGB-D。&lt;/li&gt;
&lt;li&gt;围绕ORB特征进行计算，包括视觉里程计和回环检测的ORB字典。&lt;/li&gt;
&lt;li&gt;回环检测是亮点，但要加载很大的ORB字典。&lt;/li&gt;
&lt;li&gt;创新式地使用了三个线程：实时跟踪的Tracking，局部BA(小图)，全局Pose Graph的回环检测和优化(大图)。&lt;/li&gt;
&lt;li&gt;围绕特征点进行了不少的优化。保证了特征点的均匀分布，在优化位姿时使用了一种循环优化4遍以得到更多正确匹配的方法，比PTAM更为宽松的关键帧选取策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每副图像计算一遍ORB特征，非常耗时。&lt;/li&gt;
&lt;li&gt;三线程结构也给CPU带来了较重的负担，移植到嵌入式设备上有一定的困难。&lt;/li&gt;
&lt;li&gt;建图为稀疏特征点，没有开放存储和读取地图后进行重新定位的功能。&lt;/li&gt;
&lt;li&gt;稀疏特征点地图只能满足定位要求，无法提供导航，避障，交互等功能，因此仅用ORB-SLAM来处理定位问题太重量级。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;LSD-SLAM-2013-2014&quot;&gt;&lt;a href=&quot;#LSD-SLAM-2013-2014&quot; class=&quot;headerlink&quot; title=&quot;LSD-SLAM(2013-2014)&quot;&gt;&lt;/a&gt;LSD-SLAM(2013-2014)&lt;/h4&gt;&lt;p&gt;2014年，J.Engle等人提出。标志着单目直接法的成功应用，将直接法应用到了半稠密的单目SLAM中。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接法是针对像素进行的。有创见地提出了像素梯度与直接法的关系，以及像素梯度与极线方向在稠密重建中的角度关系。&lt;/li&gt;
&lt;li&gt;在CPU上实现了实时半稠密场景的重建。&lt;/li&gt;
&lt;li&gt;不是利用单个像素，而是在极线上等距离取5个点，度量其SSD。用了很多精妙的手段来保证追踪的实时性和稳定性。&lt;/li&gt;
&lt;li&gt;直接法的优点：对特征缺失区域不敏感&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对相机内参和曝光非常敏感，在相机快速运动时容易丢失&lt;/li&gt;
&lt;li&gt;没有基于直接法的回环检测。因此必须依赖于特征点方法来进行回环检测，尚未摆脱特征点的计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;SVO-Semi-direct-Visual-Odoemtry，半直接视觉里程计-2014&quot;&gt;&lt;a href=&quot;#SVO-Semi-direct-Visual-Odoemtry，半直接视觉里程计-2014&quot; class=&quot;headerlink&quot; title=&quot;SVO(Semi-direct Visual Odoemtry，半直接视觉里程计)(2014)&quot;&gt;&lt;/a&gt;SVO(Semi-direct Visual Odoemtry，半直接视觉里程计)(2014)&lt;/h4&gt;&lt;p&gt;2014年，Forster等人提出。基于稀疏直接法的视觉里程计。特征点和直接法混合：跟踪一些关键点（角点，没有描述子），然后像直接法那样将关键点周围4×4的小块进行块匹配，来估计相机自身的运动。&lt;/p&gt;
&lt;p&gt;SVO 2.0 2016年：&lt;br&gt;C. Forster, Z. Zhang, M. Gassner, M. Werlberger, and D. Scaramuzza.&lt;br&gt;SVO 2.0: Semi-direct visual odometry for monocular and multicamera&lt;br&gt;systems. TRO, 2016.&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;速度极快。在PC平台上能达到每秒100多帧，后续的SVO 2.0能达到每秒400帧。&lt;/li&gt;
&lt;li&gt;非常适用于无人机，手持AR/VR设备这些计算平台受限场合的定位&lt;/li&gt;
&lt;li&gt;创新之处：提出了深度滤波器的概念，并推导了基于均匀－高斯混合分布的深度滤波器。&lt;/li&gt;
&lt;li&gt;代码清晰易读&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标应用平台是无人机的俯视相机，所以在平视相机中表现不佳&lt;/li&gt;
&lt;li&gt;为了速度和轻量化，舍弃了后端优化和回环检测，基本没有建图功能。所以位姿估计存在累计误差，丢失后不太容易进行重定位，所以SVO只是个VO。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;DSO-直接稀疏VO，2016&quot;&gt;&lt;a href=&quot;#DSO-直接稀疏VO，2016&quot; class=&quot;headerlink&quot; title=&quot;DSO(直接稀疏VO，2016)&quot;&gt;&lt;/a&gt;DSO(直接稀疏VO，2016)&lt;/h4&gt;&lt;p&gt;DSO [13]是LSD-SLAM的作者Jakob Engel放出的另一个大杀器，从其展示的实验结果看，无论是robustness，或是accuracy，或是计算速度，都完爆LSD-SLAM和ORB-SLAM，上个月又放出了code。&lt;/p&gt;
&lt;h4 id=&quot;RTAB-MAP&quot;&gt;&lt;a href=&quot;#RTAB-MAP&quot; class=&quot;headerlink&quot; title=&quot;RTAB-MAP&quot;&gt;&lt;/a&gt;RTAB-MAP&lt;/h4&gt;&lt;p&gt;RGB-D在CPU上实现实时稠密地图。&lt;/p&gt;
&lt;p&gt;支持常见的RGB-D和双目传感器，提供实时的建图和定位功能&lt;/p&gt;
&lt;p&gt;集成度较高，进行二次开发比较困难，更适合作为SLAM应用而非研究使用&lt;/p&gt;
&lt;h4 id=&quot;DVO-SLAM（RGBD）&quot;&gt;&lt;a href=&quot;#DVO-SLAM（RGBD）&quot; class=&quot;headerlink&quot; title=&quot;DVO-SLAM（RGBD）&quot;&gt;&lt;/a&gt;DVO-SLAM（RGBD）&lt;/h4&gt;&lt;p&gt;TUM的基于RGBD camera的VO方法 &lt;/p&gt;
&lt;h4 id=&quot;RGBD-SLAM-V2&quot;&gt;&lt;a href=&quot;#RGBD-SLAM-V2&quot; class=&quot;headerlink&quot; title=&quot;RGBD-SLAM-V2&quot;&gt;&lt;/a&gt;RGBD-SLAM-V2&lt;/h4&gt;&lt;h4 id=&quot;Kinect-Fusion&quot;&gt;&lt;a href=&quot;#Kinect-Fusion&quot; class=&quot;headerlink&quot; title=&quot;Kinect Fusion&quot;&gt;&lt;/a&gt;Kinect Fusion&lt;/h4&gt;&lt;h4 id=&quot;Google-Cartographer&quot;&gt;&lt;a href=&quot;#Google-Cartographer&quot; class=&quot;headerlink&quot; title=&quot;Google Cartographer&quot;&gt;&lt;/a&gt;Google Cartographer&lt;/h4&gt;&lt;h4 id=&quot;DTAM-RGBD&quot;&gt;&lt;a href=&quot;#DTAM-RGBD&quot; class=&quot;headerlink&quot; title=&quot;DTAM(RGBD)&quot;&gt;&lt;/a&gt;DTAM(RGBD)&lt;/h4&gt;&lt;h4 id=&quot;Elastic-Fusion-RGBD-2015&quot;&gt;&lt;a href=&quot;#Elastic-Fusion-RGBD-2015&quot; class=&quot;headerlink&quot; title=&quot;Elastic Fusion(RGBD 2015)&quot;&gt;&lt;/a&gt;Elastic Fusion(RGBD 2015)&lt;/h4&gt;&lt;h4 id=&quot;Kintinous-RGBD&quot;&gt;&lt;a href=&quot;#Kintinous-RGBD&quot; class=&quot;headerlink&quot; title=&quot;Kintinous(RGBD)&quot;&gt;&lt;/a&gt;Kintinous(RGBD)&lt;/h4&gt;&lt;h4 id=&quot;FAB-MAP&quot;&gt;&lt;a href=&quot;#FAB-MAP&quot; class=&quot;headerlink&quot; title=&quot;FAB-MAP&quot;&gt;&lt;/a&gt;FAB-MAP&lt;/h4&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SLAMCN&quot;&gt;&lt;a href=&quot;#SLAMCN&quot; class=&quot;headerlink&quot; title=&quot;SLAMCN&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.slamcn.org/index.php/%E9%A6%96%E9%A1%B5&quot;&gt;SLAMCN&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;SLAM是什么？它的未来在哪里？&quot;&gt;&lt;a href=&quot;#SLAM是什么？它的未来在哪里？&quot; class=&quot;headerlink&quot; title=&quot;SLAM是什么？它的未来在哪里？&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_61b61d9d0102wnf2.html&quot;&gt;SLAM是什么？它的未来在哪里？&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;SLAM是技术，手机端的话涉及VIO&lt;/p&gt;
&lt;p&gt;RGBD,Lidar,imu,odom,gps。基于这些传感器做一个组合SLAM。涉及：前端的tracking和后端的优化&lt;br&gt;多传感器融合是趋势，视觉结合imu等传感器。&lt;br&gt;
    
    </summary>
    
      <category term="VSLAM" scheme="http://hujun1413.github.io/categories/VSLAM/"/>
    
    
  </entry>
  
  <entry>
    <title>滤波</title>
    <link href="http://hujun1413.github.io/2018/11/09/VSLAM/%E6%BB%A4%E6%B3%A2/"/>
    <id>http://hujun1413.github.io/2018/11/09/VSLAM/滤波/</id>
    <published>2018-11-09T10:35:26.000Z</published>
    <updated>2019-03-24T15:02:56.693Z</updated>
    
    <content type="html">&lt;h3 id=&quot;高翔总结&quot;&gt;&lt;a href=&quot;#高翔总结&quot; class=&quot;headerlink&quot; title=&quot;高翔总结&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/gaoxiang12/p/5560360.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高翔总结&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;KF（卡尔曼滤波）&quot;&gt;&lt;a href=&quot;#KF（卡尔曼滤波）&quot; class=&quot;headerlink&quot; title=&quot;KF（卡尔曼滤波）&quot;&gt;&lt;/a&gt;KF（卡尔曼滤波）&lt;/h3&gt;&lt;p&gt;线性系统，高斯噪声&lt;/p&gt;
&lt;p&gt;预测：从上一时刻的状态，根据输入信息预测当前时刻的状态分布，计算系统状态预测值的协方差（先验）&lt;br&gt;计算卡尔曼增益Kg&lt;br&gt;更新：然后更新系统状态，再计算系统状态估计值的协方差(后验)，为下一次迭代做准备&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;EKF（extended-kalman-filter，扩展卡尔曼滤波）&quot;&gt;&lt;a href=&quot;#EKF（extended-kalman-filter，扩展卡尔曼滤波）&quot; class=&quot;headerlink&quot; title=&quot;EKF（extended kalman filter，扩展卡尔曼滤波）&quot;&gt;&lt;/a&gt;EKF（extended kalman filter，扩展卡尔曼滤波）&lt;/h3&gt;&lt;p&gt;将非线性进行线性化（泰勒展开），然后再做KF。&lt;/p&gt;
&lt;p&gt;存在着精度不高、稳定性差、对目标机动反应迟缓等缺点. &lt;/p&gt;
&lt;h3 id=&quot;UKF（Unscented-Kalman-Filter，无迹-无损卡尔曼滤波）&quot;&gt;&lt;a href=&quot;#UKF（Unscented-Kalman-Filter，无迹-无损卡尔曼滤波）&quot; class=&quot;headerlink&quot; title=&quot;UKF（Unscented Kalman Filter，无迹/无损卡尔曼滤波）&quot;&gt;&lt;/a&gt;UKF（Unscented Kalman Filter，无迹/无损卡尔曼滤波）&lt;/h3&gt;&lt;p&gt;通过无损变换使非线性系统方程适用于线性假设下的标准Kalman滤波体系,而不是像EKF那样,通过线性化非线性函数实现递推滤波。&lt;/p&gt;
&lt;p&gt;UKF是对非线性函数的概率密度分布进行近似，用一系列确定样本来逼近状态的后验概率密度，而不是对非线性函数进行近似，不需要求导计算Jacobian矩阵。&lt;/p&gt;
&lt;h3 id=&quot;PF（粒子滤波）&quot;&gt;&lt;a href=&quot;#PF（粒子滤波）&quot; class=&quot;headerlink&quot; title=&quot;PF（粒子滤波）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.csdn.net/piaoxuezhong/article/details/78619150&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PF（粒子滤波）&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;粒子集初始化&lt;/p&gt;
&lt;p&gt;计算每个粒子的权重，归一化之后确定目标状态&lt;/p&gt;
&lt;p&gt;计算状态估计值&lt;/p&gt;
&lt;p&gt;重要性重采样&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化阶段——计算目标特征，比如人体跟踪，就是人体区域的颜色直方图等，n*1的向量；&lt;/li&gt;
&lt;li&gt;搜索化阶段——放警犬(采样大量粒子，用来发现目标)，可以 均匀的放置/按目标中心高斯分布放置；——狗鼻子发现目标，按照相似度信息，计算警犬距离目标的权重，并归一化；&lt;/li&gt;
&lt;li&gt;决策化阶段——收集信息，综合信息，每条小狗有一个位置信息和一个权重信息，我们进行 加权求和得到目标坐标；&lt;/li&gt;
&lt;li&gt;重采样阶段——去掉一些跑偏的警犬，再放入一些警犬，根据权重信息，将权重低的警犬调回来，重新放置在权重高的地方；根据重要性重新放狗&lt;br&gt;2-&amp;gt; 3-&amp;gt; 4-&amp;gt; 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;粒子滤波(PF: Particle Filter)的思想基于蒙特卡洛方法(Monte Carlo methods)，它是利用粒子集来表示概率，可以用在任何形式的状态空间模型上。&lt;/p&gt;
&lt;p&gt;以样本均值代替积分运算，从而获得状态最小方差分布的过程。这里的样本即指粒子,当样本数量N→∝时可以逼近任何形式的概率密度分布。&lt;/p&gt;
&lt;p&gt;摆脱了解决非线性滤波问题时随机量必须满足高斯分布的制约，能表达比高斯模型更广泛的分布，也对变量参数的非线性特性有更强的建模能力。&lt;/p&gt;
&lt;h3 id=&quot;BF（贝叶斯滤波）&quot;&gt;&lt;a href=&quot;#BF（贝叶斯滤波）&quot; class=&quot;headerlink&quot; title=&quot;BF（贝叶斯滤波）&quot;&gt;&lt;/a&gt;BF（贝叶斯滤波）&lt;/h3&gt;&lt;p&gt;器人传感器获取的观测数据，利用Bayes公式（概率论）去估计机器人的状态。&lt;/p&gt;
&lt;p&gt;非线性系统，随机噪声&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;高翔总结&quot;&gt;&lt;a href=&quot;#高翔总结&quot; class=&quot;headerlink&quot; title=&quot;高翔总结&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/gaoxiang12/p/5560360.html&quot;&gt;高翔总结&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;KF（卡尔曼滤波）&quot;&gt;&lt;a href=&quot;#KF（卡尔曼滤波）&quot; class=&quot;headerlink&quot; title=&quot;KF（卡尔曼滤波）&quot;&gt;&lt;/a&gt;KF（卡尔曼滤波）&lt;/h3&gt;&lt;p&gt;线性系统，高斯噪声&lt;/p&gt;
&lt;p&gt;预测：从上一时刻的状态，根据输入信息预测当前时刻的状态分布，计算系统状态预测值的协方差（先验）&lt;br&gt;计算卡尔曼增益Kg&lt;br&gt;更新：然后更新系统状态，再计算系统状态估计值的协方差(后验)，为下一次迭代做准备&lt;/p&gt;
    
    </summary>
    
      <category term="VSLAM" scheme="http://hujun1413.github.io/categories/VSLAM/"/>
    
    
  </entry>
  
  <entry>
    <title>OctoMap</title>
    <link href="http://hujun1413.github.io/2018/10/09/VSLAM/Octomap/"/>
    <id>http://hujun1413.github.io/2018/10/09/VSLAM/Octomap/</id>
    <published>2018-10-09T10:35:26.000Z</published>
    <updated>2019-03-24T15:03:50.144Z</updated>
    
    <content type="html">&lt;h3 id=&quot;octomap-Reference&quot;&gt;&lt;a href=&quot;#octomap-Reference&quot; class=&quot;headerlink&quot; title=&quot;octomap Reference&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://octomap.github.io/octomap/doc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;octomap Reference&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;SLAM拾萃-1-：octomap&quot;&gt;&lt;a href=&quot;#SLAM拾萃-1-：octomap&quot; class=&quot;headerlink&quot; title=&quot;SLAM拾萃(1)：octomap&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/gaoxiang12/p/5041142.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SLAM拾萃(1)：octomap&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/hujun1413/octomap_tutor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于高博的修改&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;octomap的网页见：&lt;a href=&quot;https://octomap.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://octomap.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;它的github源码在：&lt;a href=&quot;https://github.com/OctoMap/octomap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/OctoMap/octomap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;它还有ROS下的安装方式：&lt;a href=&quot;http://wiki.ros.org/octomap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wiki.ros.org/octomap&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;编译octovis提示链接出错&quot;&gt;&lt;a href=&quot;#编译octovis提示链接出错&quot; class=&quot;headerlink&quot; title=&quot;编译octovis提示链接出错&quot;&gt;&lt;/a&gt;编译octovis提示链接出错&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CMakeFiles/octovis.dir/src/ViewerGui.cpp.o: In function `octomap::OcTreeBaseImpl&amp;lt;octomap::ColorOcTreeNode, octomap::AbstractOccupancyOcTree&amp;gt;::writeData(std::ostream&amp;amp;) const&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ViewerGui.cpp:(.text._ZNK7octomap14OcTreeBaseImplINS_15ColorOcTreeNodeENS_23AbstractOccupancyOcTreeEE9writeDataERSo[_ZNK7octomap14OcTreeBaseImplINS_15ColorOcTreeNodeENS_23AbstractOccupancyOcTreeEE9writeDataERSo]+0xe): undefined reference to `octomap::ColorOcTreeNode::writeValue(std::ostream&amp;amp;) const&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_36420239/article/details/79488181&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编译octovis提示链接出错的解决措施&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd octomap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout v1.6.9   //校验为/opt/ros/indigo/share/octpmap/octomap-config-version文件中的自己的版本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;重新编译即可&lt;/p&gt;
&lt;h4 id=&quot;正确安装octomap&quot;&gt;&lt;a href=&quot;#正确安装octomap&quot; class=&quot;headerlink&quot; title=&quot;正确安装octomap&quot;&gt;&lt;/a&gt;正确安装octomap&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/OctoMap/octomap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd octomap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout v1.6.9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmake ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;点云转换为不带颜色的octomap&quot;&gt;&lt;a href=&quot;#点云转换为不带颜色的octomap&quot; class=&quot;headerlink&quot; title=&quot;点云转换为不带颜色的octomap&quot;&gt;&lt;/a&gt;点云转换为不带颜色的octomap&lt;/h3&gt;&lt;p&gt;将点云中的点一个一个地插入到OcTree中&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;octomap::OcTree tree( 0.05 );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for (auto p:cloud.points)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 将点云里的点插入到octomap中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tree.updateNode( octomap::point3d(p.x, p.y, p.z), true );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 更新octomap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tree.updateInnerOccupancy();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 存储octomap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tree.writeBinary( output_file );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cout&amp;lt;&amp;lt;&amp;quot;done.&amp;quot;&amp;lt;&amp;lt;endl;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;点云转换成带颜色的octomap&quot;&gt;&lt;a href=&quot;#点云转换成带颜色的octomap&quot; class=&quot;headerlink&quot; title=&quot;点云转换成带颜色的octomap&quot;&gt;&lt;/a&gt;点云转换成带颜色的octomap&lt;/h3&gt;&lt;p&gt;将点云经过一个变换后，插入到ColorOcTree中&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;octomap::ColorOcTree tree( 0.05 ); //全局map&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;octomap::Pointcloud cloud_octo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for (auto p:temp-&amp;gt;points)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cloud_octo.push_back( p.x, p.y, p.z );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tree.insertPointCloud( cloud_octo, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        octomap::point3d( pose(0,3), pose(1,3), pose(2,3) ) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for (auto p:temp-&amp;gt;points)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tree.integrateNodeColor( p.x, p.y, p.z, p.r, p.g, p.b );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tree.updateInnerOccupancy();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tree.write( &amp;quot;./data/map.ot&amp;quot; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//带颜色的octomap，调用integrateNodeColor来混合颜色。后缀名改成了.ot文件。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cout&amp;lt;&amp;lt;&amp;quot;done.&amp;quot;&amp;lt;&amp;lt;endl;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;octomap-Reference&quot;&gt;&lt;a href=&quot;#octomap-Reference&quot; class=&quot;headerlink&quot; title=&quot;octomap Reference&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://octomap.github.io/octomap/doc/&quot;&gt;octomap Reference&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;SLAM拾萃-1-：octomap&quot;&gt;&lt;a href=&quot;#SLAM拾萃-1-：octomap&quot; class=&quot;headerlink&quot; title=&quot;SLAM拾萃(1)：octomap&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/gaoxiang12/p/5041142.html&quot;&gt;SLAM拾萃(1)：octomap&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/hujun1413/octomap_tutor&quot;&gt;基于高博的修改&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="VSLAM" scheme="http://hujun1413.github.io/categories/VSLAM/"/>
    
    
  </entry>
  
  <entry>
    <title>修改turtlebot2的description以改变tf tree</title>
    <link href="http://hujun1413.github.io/2018/06/13/ROS/%E4%BF%AE%E6%94%B9turtlebot2%E7%9A%84description%E4%BB%A5%E6%94%B9%E5%8F%98tf%20tree/"/>
    <id>http://hujun1413.github.io/2018/06/13/ROS/修改turtlebot2的description以改变tf tree/</id>
    <published>2018-06-13T12:35:26.000Z</published>
    <updated>2018-08-27T09:06:15.844Z</updated>
    
    <content type="html">&lt;h3 id=&quot;调用什么文件来显示机器人及其身上的坐标系转换&quot;&gt;&lt;a href=&quot;#调用什么文件来显示机器人及其身上的坐标系转换&quot; class=&quot;headerlink&quot; title=&quot;调用什么文件来显示机器人及其身上的坐标系转换&quot;&gt;&lt;/a&gt;调用什么文件来显示机器人及其身上的坐标系转换&lt;/h3&gt;&lt;p&gt;在turtlebot_description包中，urdf/turtlebot_library.urdf.xacro文件中引用了基本所有的机器人组件。&lt;/p&gt;
&lt;p&gt;一般的，minimal.launch是用于启动机器人robot.launch.xml和底盘mobile_base.launch.xml&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;robot.launch中调用description.launch.xml来建立机器人的各关节和传感器的坐标系描述，调用robot_state_publisher来读取robot_description文件并发布tf tree。&lt;/p&gt;
&lt;p&gt;description.launch.xml调用$(find turtlebot&lt;em&gt;description)/robots/$(arg base)&lt;/em&gt;$(arg stacks)_$(arg 3d_sensor).urdf.xacro’文件来定义机器人的关节和传感器&lt;/p&gt;
&lt;p&gt;因此，通过调用(find turtlebot&lt;em&gt;description)/robots/$(arg base)&lt;/em&gt;$(arg stacks)_$(arg 3d_sensor).urdf.xacro’文件来显示机器人及其坐标系。可以修改这个文件所包含的文件，来改变机器人的形态和坐标系变换&lt;/p&gt;
&lt;p&gt;例如：&lt;br&gt;在kobuki_hexagons_asus_xtion_pro.urdf.xacro文件中，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;xacro:include filename=&amp;quot;$(find turtlebot_description)/urdf/turtlebot_library.urdf.xacro&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;kobuki/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;stack_hexagons                 parent=&amp;quot;base_link&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;sensor_asus_xtion_pro          parent=&amp;quot;base_link&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;sensor_rplidar  				  parent=&amp;quot;base_link&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;turtlebot的hexagon平台&quot;&gt;&lt;a href=&quot;#turtlebot的hexagon平台&quot; class=&quot;headerlink&quot; title=&quot;turtlebot的hexagon平台&quot;&gt;&lt;/a&gt;turtlebot的hexagon平台&lt;/h3&gt;&lt;p&gt;以base_link为母坐标系，base_link在turtlebot中代表的是机器人中心，若使用kobuki则在实际世界坐标系中高度为0.0102m，即若以机器人正中心在地面的坐标为origin（0,0,0），则base_link相对于origin的坐标为（0,0,0.0102）。发布base_link与base_footprint之间的tf变换为&lt;code&gt;xyz=&amp;quot;0 0 0.0102&amp;quot; rpy=&amp;quot;0 0 0&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;详情参考urdf/stacks/hexagons.urdf.xacro文件。&lt;/p&gt;
&lt;p&gt;以下坐标都是相对于base_link坐标系而言，即真实的高度都要加上0.0102m，且坐标都是指该物体的中心点坐标。若是柱子则是柱子的中心点，若是平台则是平台的中心点。&lt;/p&gt;
&lt;p&gt;层与层之间支撑的柱子，如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;stack_top_pole parent=&amp;quot;$&amp;#123;parent&amp;#125;&amp;quot; number=&amp;quot;0&amp;quot; x_loc= &amp;quot;0.0381&amp;quot; y_loc= &amp;quot;0.1505&amp;quot; z_loc=&amp;quot;0.2920&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代表最高层和中间层之间的柱子，柱子中间点的高度为0.2920m，而urdf/stacks/hexagons.urdf.xacro文件的87行的&lt;code&gt;&amp;lt;cylinder length=&amp;quot;0.2032&amp;quot; radius=&amp;quot;0.006&amp;quot;/&amp;gt;&lt;/code&gt;，说明柱子长度为0.2032m，因此柱子的底部为0.1904m，顶部为0.3936。&lt;/p&gt;
&lt;p&gt;urdf/stacks/hexagons.urdf.xacro文件的157行的&lt;br&gt;&lt;code&gt;&amp;lt;cylinder length=&amp;quot;0.006&amp;quot; radius=&amp;quot;0.170&amp;quot;/&amp;gt;&lt;/code&gt;，说明平台的宽度为0.006m。&lt;br&gt;最高层平台中心的高度为：0.3966m，平台上的物体的高度为0.3996m（平台上物体的真实高度为0.4096m）&lt;br&gt;中间层平台中心的高度为：0.1874m&lt;br&gt;最低层平台中心的高度为：0.1306m&lt;/p&gt;
&lt;h3 id=&quot;turtlebot的asus-xtion-pro&quot;&gt;&lt;a href=&quot;#turtlebot的asus-xtion-pro&quot; class=&quot;headerlink&quot; title=&quot;turtlebot的asus xtion pro&quot;&gt;&lt;/a&gt;turtlebot的asus xtion pro&lt;/h3&gt;&lt;p&gt;urdf/sensors/asus_xtion_pro.urdf.xacro文件中，摄像头的中心camera_rgb_frame相对于base_link的转换为：&lt;br&gt;&lt;code&gt;&amp;lt;origin xyz=&amp;quot;${cam_px} ${asus_xtion_pro_cam_py} ${cam_pz}&amp;quot;
              rpy=&amp;quot;${cam_or} ${cam_op} ${cam_oy}&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;asus_xtion_pro_cam_py在asus_xtion_pro.urdf.xacro文件中设定。&lt;br&gt;cam_px,cam_pz,cam_or,cam_op,cam_oy在urdf/turtlebot_properties.urdf.xacro文件中设定&lt;/p&gt;
&lt;p&gt;/camera_rgb_frame相对于/camera_rgb_optical_frame为&lt;code&gt;&amp;lt;origin xyz=&amp;quot;0 0 0&amp;quot; rpy=&amp;quot;${-M_PI/2} 0 ${-M_PI/2}&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;/camera_link相对于/camera_rgb_frame为&lt;code&gt;&amp;lt;origin xyz=&amp;quot;0 ${asus_xtion_pro_cam_rel_rgb_py} 0&amp;quot; rpy=&amp;quot;0 0 0&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;/camera_depth_frame相对于/camera_rgb_frame为&lt;code&gt;&amp;lt;origin xyz=&amp;quot;0 ${asus_xtion_pro_depth_rel_rgb_py} 0&amp;quot; rpy=&amp;quot;0 0 0&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;带入数据，&lt;br&gt;depth_frame rgb_optical_frame base_link camera_link&lt;br&gt;0.027m 0.0205m 0.0225-0.0205=0.002m&lt;/p&gt;
&lt;p&gt;世界坐标系的相对关系为右手坐标系，机器人前方为x轴正方向，机器人左方为y轴正方向，机器人上方为z轴正方向。&lt;/p&gt;
&lt;p&gt;相机坐标系：机器人前方为z轴正方向，机器人右方为x轴正方向，机器人下方为y轴正方向&lt;/p&gt;
&lt;h3 id=&quot;相机坐标系与世界坐标系的变换&quot;&gt;&lt;a href=&quot;#相机坐标系与世界坐标系的变换&quot; class=&quot;headerlink&quot; title=&quot;相机坐标系与世界坐标系的变换&quot;&gt;&lt;/a&gt;相机坐标系与世界坐标系的变换&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cutcat@cutcat:~$ rosrun tf tf_echo /camera_rgb_optical_frame /map&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;At time 1528257902.539&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Translation: [0.034, 0.685, 0.055]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Rotation: in Quaternion [0.502, -0.498, 0.498, 0.502]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            in RPY (radian) [1.571, -1.563, 0.000]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            in RPY (degree) [90.000, -89.528, 0.000]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tf_listener.transformPoint(kMapTF, msg-&amp;gt;start, start);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msg-&amp;gt;start在/camera_rgb_optical_frame坐标系下，start在/map坐标系下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msg-&amp;gt;start_x=2     msg-&amp;gt;satrt_y=-1     msg-&amp;gt;satrt_z=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start_x=0.961461     start_y=-1.95825     start_z=1.6848&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2-0.034)=1.966 (-1-0.685)=-1.685 1-0.055=0.945 #源坐标系下坐标-translation，若正方向相反，则添负号。（相机的x轴正方向是机器人右方，对应于直接坐标系的y轴负方向，将1.966添负号后放在世界坐标系的y坐标上。相机的y轴正方向是机器人的下方，将-1.685添负号后放在世界坐标系的z坐标上。相机的z轴正方向是机器人前方，不添负号直接放在世界坐标系的x坐标上）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0.945 -1.966 1.685&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0.961461 -1.95825 1.6848&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cutcat@cutcat:~$ rosrun tf tf_echo /base_link /map&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;At time 1528257977.424&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Translation: [-0.043, -0.013, -0.010]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Rotation: in Quaternion [0.000, 0.000, -0.004, 1.000]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            in RPY (radian) [0.000, 0.000, -0.008]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            in RPY (degree) [0.000, 0.000, -0.472]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;turtlebot2的description参数&quot;&gt;&lt;a href=&quot;#turtlebot2的description参数&quot; class=&quot;headerlink&quot; title=&quot;turtlebot2的description参数&quot;&gt;&lt;/a&gt;turtlebot2的description参数&lt;/h3&gt;&lt;h4 id=&quot;turtlebot-description-urdf-sensors-rplidar-urdf-xacro&quot;&gt;&lt;a href=&quot;#turtlebot-description-urdf-sensors-rplidar-urdf-xacro&quot; class=&quot;headerlink&quot; title=&quot;turtlebot_description/urdf/sensors/rplidar.urdf.xacro&quot;&gt;&lt;/a&gt;turtlebot_description/urdf/sensors/rplidar.urdf.xacro&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;joint name=&amp;quot;laser&amp;quot; type=&amp;quot;fixed&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;!--&amp;lt;origin xyz=&amp;quot;0.15 0.0 0.15&amp;quot; rpy=&amp;quot;0 0.0 0.0&amp;quot; /&amp;gt;  --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;origin xyz=&amp;quot;0.10 -0.03 0.4716&amp;quot; rpy=&amp;quot;0 0.0 0.0&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;turtlebot-description-urdf-sensors-asus-xtion-pro-urdf-xacro&quot;&gt;&lt;a href=&quot;#turtlebot-description-urdf-sensors-asus-xtion-pro-urdf-xacro&quot; class=&quot;headerlink&quot; title=&quot;turtlebot_description/urdf/sensors/asus_xtion_pro.urdf.xacro&quot;&gt;&lt;/a&gt;turtlebot_description/urdf/sensors/asus_xtion_pro.urdf.xacro&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;joint name=&amp;quot;mount_asus_xtion_pro_joint&amp;quot; type=&amp;quot;fixed&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;origin xyz=&amp;quot;-0.1024 0.0 0.6596&amp;quot; rpy=&amp;quot;0 0 0&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;!--&amp;lt;origin xyz=&amp;quot;-0.1024 0.0 0.272&amp;quot; rpy=&amp;quot;0 0 0&amp;quot;/&amp;gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;turtlebot-description-urdf-turtlebot-properties-urdf-xacro&quot;&gt;&lt;a href=&quot;#turtlebot-description-urdf-turtlebot-properties-urdf-xacro&quot; class=&quot;headerlink&quot; title=&quot;turtlebot_description/urdf/turtlebot_properties.urdf.xacro&quot;&gt;&lt;/a&gt;turtlebot_description/urdf/turtlebot_properties.urdf.xacro&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--&amp;lt;property name=&amp;quot;cam_px&amp;quot; value=&amp;quot;-0.087&amp;quot; /&amp;gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;property name=&amp;quot;cam_px&amp;quot; value=&amp;quot;-0.098&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--	&amp;lt;property name=&amp;quot;cam_py&amp;quot; value=&amp;quot;-0.0125&amp;quot; /&amp;gt; Y varies for different configurations. get sets in sensors_urdf --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--&amp;lt;property name=&amp;quot;cam_pz&amp;quot; value=&amp;quot;0.2870&amp;quot; /&amp;gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;property name=&amp;quot;cam_pz&amp;quot; value=&amp;quot;0.6746&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;调用什么文件来显示机器人及其身上的坐标系转换&quot;&gt;&lt;a href=&quot;#调用什么文件来显示机器人及其身上的坐标系转换&quot; class=&quot;headerlink&quot; title=&quot;调用什么文件来显示机器人及其身上的坐标系转换&quot;&gt;&lt;/a&gt;调用什么文件来显示机器人及其身上的坐标系转换&lt;/h3&gt;&lt;p&gt;在turtlebot_description包中，urdf/turtlebot_library.urdf.xacro文件中引用了基本所有的机器人组件。&lt;/p&gt;
&lt;p&gt;一般的，minimal.launch是用于启动机器人robot.launch.xml和底盘mobile_base.launch.xml&lt;br&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://hujun1413.github.io/categories/ROS/"/>
    
    
  </entry>
  
  <entry>
    <title>给turtlebot增加一个传感器</title>
    <link href="http://hujun1413.github.io/2018/06/13/ROS/%E7%BB%99turtlebot%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    <id>http://hujun1413.github.io/2018/06/13/ROS/给turtlebot增加一个传感器/</id>
    <published>2018-06-13T12:35:26.000Z</published>
    <updated>2019-03-24T12:50:45.489Z</updated>
    
    <content type="html">&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zyh821351004/article/details/48846179&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ros中利用gazebo进行gmapping仿真:kobuki+kinect -&amp;gt; kobuki+rplidar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_36355662/article/details/61413860&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS中给turtlebot加两个传感器：kinect+hokuyo，进行gazebo仿真&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;让turtlebot带雷达和asua-xtion-pro&quot;&gt;&lt;a href=&quot;#让turtlebot带雷达和asua-xtion-pro&quot; class=&quot;headerlink&quot; title=&quot;让turtlebot带雷达和asua_xtion_pro&quot;&gt;&lt;/a&gt;让turtlebot带雷达和asua_xtion_pro&lt;/h3&gt;&lt;p&gt;roslaunch turtlebot_bringup minimal.launch是用于启动机器人robot.launch.xml和底盘mobile_base.launch.xml&lt;/p&gt;
&lt;p&gt;minimal.launch中的&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;arg name=&amp;quot;base&amp;quot; value=&amp;quot;$(arg base)&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;arg name=&amp;quot;stacks&amp;quot; value=&amp;quot;$(arg stacks)&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;arg name=&amp;quot;3d_sensor&amp;quot; value=&amp;quot;$(arg 3d_sensor)&amp;quot; /&amp;gt; #rplidar,asua_xtion_pro,kinect2等&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;arg name=&amp;quot;serialport&amp;quot; value=&amp;quot;$(arg serialport)&amp;quot; /&amp;gt; #底盘的设备端口，如/dev/ttyUSB0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以通过在~/.bashrc中设置TURTLEBOT_BASE，TURTLEBOT_STACKS，TURTLEBOT_3D_SENSOR，TURTLEBOT_SERIAL_PORT来赋值&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export TURTLEBOT_BASE=kobuki&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export TURTLEBOT_STACKS=hexagons&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export TURTLEBOT_3D_SENSOR=asus_xtion_pro&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export TURTLEBOT_SERIAL_PORT=/dev/ttyUSB0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;robot.launch中调用description.launch.xml来建立机器人的各关节和传感器的坐标系描述，调用robot_state_publisher来读取robot_description文件并发布tf tree。&lt;/p&gt;
&lt;p&gt;description.launch.xml调用$(find turtlebot&lt;em&gt;description)/robots/$(arg base)&lt;/em&gt;$(arg stacks)_$(arg 3d_sensor).urdf.xacro’文件来定义机器人的关节和传感器，可以在turtlebot_description)/robots下定义新的.urdf.xacro文件来代表拥有不同关节和传感器的机器人&lt;/p&gt;
&lt;p&gt;例如：&lt;br&gt;在kobuki_hexagons_asus_xtion_pro.urdf.xacro文件中，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;xacro:include filename=&amp;quot;$(find turtlebot_description)/urdf/turtlebot_library.urdf.xacro&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;kobuki/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;stack_hexagons                 parent=&amp;quot;base_link&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;sensor_asus_xtion_pro          parent=&amp;quot;base_link&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;sensor_rplidar           parent=&amp;quot;base_link&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代表拥有kobuki底盘，hexagons 平台，asua_xtion_pro深度摄像头,rplidar雷达的turtlebot机器人。&lt;/p&gt;
&lt;p&gt;urdf/turtlebot_library.urdf.xacro文件的内容为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;xacro:include filename=&amp;quot;$(find turtlebot_description)/urdf/sensors/asus_xtion_pro_offset.urdf.xacro&amp;quot;/&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;xacro:include filename=&amp;quot;$(find turtlebot_description)/urdf/sensors/rplidar.urdf.xacro&amp;quot;/&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;调用了turtlebot_description/urdf/stack/hexagons.urdf.xacro和turtlebot_description/urdf/sensor/asus_xtion_pro.urdf.xacro和turtlebot_description/urdf/sensor/rplidar.urdf.xacro文件。&lt;br&gt;这几个文件都是平台和传感器的描述和坐标变换。&lt;/p&gt;
&lt;p&gt;如果以后需要增加一个新的传感器，只需要在turtlebot_description/urdf/sensor文件夹下增加一个[sensor_name].urdf.xacro文件，里面写好该传感器的描述和坐标系转换，然后在urdf/turtlebot_library.urdf.xacro文件中include新增加的传感器描述文件，然后在选择的像kobuki_hexagons_asus_xtion&lt;em&gt;pro.urdf.xacro这样的文件中，加入一行&lt;br&gt;`&amp;lt;sensor&lt;/em&gt;[sensor_name]            parent=”base_link”/&amp;gt;`&lt;/p&gt;
&lt;p&gt;这样robot_state_publisher就会自动读取机器人的各关节和传感器，并发送tf tree。&lt;/p&gt;
&lt;p&gt;注意：asus_xtion_pro.urdf.xacro文件中会用到turtlebot_properies.urdf.xacro中的cam_px等变量，代表相机相对base_link的位置。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zyh821351004/article/details/48846179&quot;&gt;ros中利用gazebo进行gmapping仿真:kobuki+kinect -&amp;gt; kobuki+rplidar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_36355662/article/details/61413860&quot;&gt;ROS中给turtlebot加两个传感器：kinect+hokuyo，进行gazebo仿真&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://hujun1413.github.io/categories/ROS/"/>
    
    
  </entry>
  
  <entry>
    <title>RTAB_Map</title>
    <link href="http://hujun1413.github.io/2018/06/09/VSLAM/RTAB_MAP/"/>
    <id>http://hujun1413.github.io/2018/06/09/VSLAM/RTAB_MAP/</id>
    <published>2018-06-09T10:35:26.000Z</published>
    <updated>2019-03-24T15:03:30.717Z</updated>
    
    <content type="html">&lt;h3 id=&quot;RTAB是什么&quot;&gt;&lt;a href=&quot;#RTAB是什么&quot; class=&quot;headerlink&quot; title=&quot;RTAB是什么&quot;&gt;&lt;/a&gt;RTAB是什么&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://remyspot.blog.51cto.com/8218746/1784914/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RtabMap中文解析&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/severnvergil/p/6671879.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RTABMAP-ROS RGB-D的建图原理&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;RGB-D,可以换输入&lt;/p&gt;
&lt;p&gt;通过sift关键点进行匹配，然后估计相机运动，最后通过闭环检测减少误差。&lt;/p&gt;
&lt;h3 id=&quot;rtabMap源码&quot;&gt;&lt;a href=&quot;#rtabMap源码&quot; class=&quot;headerlink&quot; title=&quot;rtabMap源码&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/introlab/rtabmap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rtabMap&lt;/a&gt;源码&lt;/h3&gt;&lt;p&gt;RTABMap&lt;/p&gt;
&lt;p&gt;问题可能主要在于 g2o and gtsam没有使用c++11的标准，而作者的工程使用的是c++11标准，所以出现了这个错误。&lt;br&gt;而作者直接给出的解决办法是编译时不使用g2o and gtsam.但是整个工程中是怎么用这两个库的，可能还的看看源码。&lt;/p&gt;
&lt;p&gt;cmake -DWITH_G2O=OFF -DWITH_GTSAM=OFF ..&lt;/p&gt;
&lt;p&gt;app/src/main.cpp中new了一个MainWindow类&lt;br&gt;MainWindow.cpp：&lt;br&gt;4592行：_preferencesDialog这个dialog中获取注入colorOnly之类的参数&lt;/p&gt;
&lt;h3 id=&quot;ros上rtabmap-ros包&quot;&gt;&lt;a href=&quot;#ros上rtabmap-ros包&quot; class=&quot;headerlink&quot; title=&quot;ros上rtabmap_ros包&quot;&gt;&lt;/a&gt;ros上&lt;a href=&quot;http://wiki.ros.org/rtabmap_ros?distro=lunar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rtabmap_ros&lt;/a&gt;包&lt;/h3&gt;&lt;p&gt;安装rtabmap_ros包。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.rosclub.cn/post-118.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rtabmap_ros的安装和使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/introlab/rtabmap_ros#rtabmap_ros&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github上rtab_map的安装&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用debian方式安装&lt;br&gt;sudo apt-get install ros-indigo-rtabmap-ros &lt;/p&gt;
&lt;p&gt;debian卸载&lt;br&gt;sudo apt-get remove ros-indigo-rtabmap&lt;/p&gt;
&lt;p&gt;安装rtabmap0.11.8版本，配套rtabmap_ros0.11.8-indigo版本。&lt;br&gt;编译rtabmap0.11.8遇到的问题：&lt;br&gt;&lt;a href=&quot;https://stackoverflow.com/questions/42504592/flann-util-serialization-h-class-stdunordered-mapunsigned-int-stdvectorun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;flann/util/serialization.h class std::unordered_map&lt;unsigned int,=&quot;&quot; std::vector&lt;unsigned=&quot;&quot; int=&quot;&quot;&gt; &amp;gt;’ has no member named ‘serialize’&lt;/unsigned&gt;&lt;/a&gt;&lt;br&gt;解决方法：将include flann.hpp的地方都放在include opencv头文件的前面。&lt;/p&gt;
&lt;h3 id=&quot;用奥比中光跑rtabmap-ros&quot;&gt;&lt;a href=&quot;#用奥比中光跑rtabmap-ros&quot; class=&quot;headerlink&quot; title=&quot;用奥比中光跑rtabmap_ros&quot;&gt;&lt;/a&gt;用奥比中光跑rtabmap_ros&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/tfoote/ros_astra_camera&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ros上跑奥比中光&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/suijideren/article/details/60876382&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;奥比中光3D传感摄像头Ubuntu系统安装ROS说明&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/zhangrelay/article/details/53515859&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;奥比中光Orbbec Astra Pro RGBD 3D视觉传感器在ROS（indigo和kinetic）使用说明 rgb depth同时显示&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;roslaunch astra_launch astra.launch #启动奥比中光摄像头&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;roslaunch rtabmap_ros rtabmap.launch rtabmap_args:=&amp;quot;--delete_db_on_start&amp;quot; rviz:=true rtabmapviz:=false　#启动rtabmap_ros，如果窗口一闪而过，先执行rtabmap，关闭rtabmap后重新执行这句即可。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rviz　#可以查看奥比中光摄像头产生的rgb图，深度图和三维点云&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rtabmap-databaseViewer ~/.ros/rtabmap.db　#查看地图数据库&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;[ERROR] (2017-10-21 10:34:13.134) RegistrationVis.cpp:1156::computeTransformationImpl() Calibrated camera required (multi-cameras not supported). Id=221 Models=1 StereoModel=0 weight=0&lt;/p&gt;
&lt;h3 id=&quot;用速感摄像头跑rtabmap-ros&quot;&gt;&lt;a href=&quot;#用速感摄像头跑rtabmap-ros&quot; class=&quot;headerlink&quot; title=&quot;用速感摄像头跑rtabmap_ros&quot;&gt;&lt;/a&gt;用速感摄像头跑rtabmap_ros&lt;/h3&gt;&lt;h3 id=&quot;rtabmap启动的node&quot;&gt;&lt;a href=&quot;#rtabmap启动的node&quot; class=&quot;headerlink&quot; title=&quot;rtabmap启动的node&quot;&gt;&lt;/a&gt;rtabmap启动的node&lt;/h3&gt;&lt;p&gt;When launching rtabmap_ros’s nodes, if you have the error error while loading shared libraries…, add the next line at the end of your ~/.bashrc to fix it:&lt;br&gt;&lt;code&gt;$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/ros/kinetic/lib/x86_64-linux-gnu&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;\&amp;lt;!-- RGB-D Odometry --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rgbd_odometry src/RGBDOdometryNode.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- Visual SLAM (robot side) --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rtabmap src/CoreNode.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- Visualisation RTAB-Map --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rtabmapviz src/GuiNode.cpp src/GuiWrapper.cpp src/PreferencesDialogROS.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者选择rviz用于可视化&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;rtabmap-ros-入门教程&quot;&gt;&lt;a href=&quot;#rtabmap-ros-入门教程&quot; class=&quot;headerlink&quot; title=&quot;rtabmap_ros-入门教程&quot;&gt;&lt;/a&gt;rtabmap_ros-入门教程&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.ncnynl.com/archives/201709/1992.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS与VSLAM入门教程-rtabmap_ros-深度相机手持建图&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.rosclub.cn/thread-25.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用投影地图,使用Handsfree进行三维建图导航&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;rtab-map的优缺点&quot;&gt;&lt;a href=&quot;#rtab-map的优缺点&quot; class=&quot;headerlink&quot; title=&quot;rtab_map的优缺点&quot;&gt;&lt;/a&gt;rtab_map的优缺点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在Tango上的表现体现出对动态场景不鲁棒。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RTAB是什么&quot;&gt;&lt;a href=&quot;#RTAB是什么&quot; class=&quot;headerlink&quot; title=&quot;RTAB是什么&quot;&gt;&lt;/a&gt;RTAB是什么&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://remyspot.blog.51cto.com/8218746/1784914/&quot;&gt;RtabMap中文解析&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/severnvergil/p/6671879.html&quot;&gt;RTABMAP-ROS RGB-D的建图原理&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="VSLAM" scheme="http://hujun1413.github.io/categories/VSLAM/"/>
    
    
  </entry>
  
  <entry>
    <title>visdom可视化</title>
    <link href="http://hujun1413.github.io/2018/05/28/Deep%20Learning/visdom%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://hujun1413.github.io/2018/05/28/Deep Learning/visdom可视化/</id>
    <published>2018-05-28T08:25:26.000Z</published>
    <updated>2019-03-24T12:42:28.696Z</updated>
    
    <content type="html">&lt;h3 id=&quot;visdom可视化&quot;&gt;&lt;a href=&quot;#visdom可视化&quot; class=&quot;headerlink&quot; title=&quot;visdom可视化&quot;&gt;&lt;/a&gt;visdom可视化&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install visdom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python -m visdom.server #启动visdom服务&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; class=&quot;headerlink&quot; title=&quot;API&quot;&gt;&lt;/a&gt;API&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/facebookresearch/visdom&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;visdom官方github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.pytorchtutorial.com/pytorch-visdom/#visimage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PyTorch 可视化工具 Visdom 介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.pytorchtutorial.com/using-visdom-for-visualization-in-pytorch/#plotline&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 Visdom 在 PyTorch 中进行可视化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ptorch.com/news/77.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在PyTorch中使用Visdom可视化工具&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;visdom画线图&quot;&gt;&lt;a href=&quot;#visdom画线图&quot; class=&quot;headerlink&quot; title=&quot;visdom画线图&quot;&gt;&lt;/a&gt;visdom画线图&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;losses_his = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vis.vis.line(Y=np.array(losses_his), X=np.array(x), win=&lt;span class=&quot;string&quot;&gt;&#39;hujun_vis1&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opts=dict(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title=&lt;span class=&quot;string&quot;&gt;&#39;hujun_vis1&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#legend=[&#39;SGD&#39;, &#39;Momentum&#39;, &#39;RMSprop&#39;, &#39;Adam&#39;],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ytickmin=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ytickmax=&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vis = visdom.Visdom(env=&lt;span class=&quot;string&quot;&gt;u&#39;test1&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#visdom作图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vis.line(Y=torch.from_numpy(np.array(losses_his).T), win=&lt;span class=&quot;string&quot;&gt;&#39;losses&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opts=dict(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title=&lt;span class=&quot;string&quot;&gt;&#39;y=losses&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    legend=[&lt;span class=&quot;string&quot;&gt;&#39;SGD&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Momentum&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;RMSprop&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Adam&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ytickmin=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ytickmax=&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;losses_his = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;#一条线，N*M表示M条长度为N的线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vis.vis.line(Y=t.from_numpy(np.array(losses_his)), win=&lt;span class=&quot;string&quot;&gt;&#39;hujun_vis1&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opts=dict(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title=&lt;span class=&quot;string&quot;&gt;&#39;hujun_vis1&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#legend=[&#39;SGD&#39;, &#39;Momentum&#39;, &#39;RMSprop&#39;, &#39;Adam&#39;],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ytickmin=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ytickmax=&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;span class=&quot;comment&quot;&gt;#在hujun_vis1这个pane上画线图，title为hujun_vis1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;losses_his = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]] &lt;span class=&quot;comment&quot;&gt;#两条线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vis.vis.line(Y=t.from_numpy(np.array(losses_his)), win=&lt;span class=&quot;string&quot;&gt;&#39;hujun_vis2&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;opts=dict(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title=&lt;span class=&quot;string&quot;&gt;&#39;hujun_vis1&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#legend=[&#39;SGD&#39;, &#39;Momentum&#39;, &#39;RMSprop&#39;, &#39;Adam&#39;],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ytickmin=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ytickmax=&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;span class=&quot;comment&quot;&gt;#在hujun_vis2这个pane上画线图，title为hujun_vis1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#若继续在hujun_vis1这个pane上画图，将会覆盖掉之前的。换一个pane就可以画出多个图了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# line updates，最好更新一开始就有的线，比如一开始画了5根线，更新的就是name就最好是1,2,3,4,5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;win = viz.line(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    X=np.column_stack((np.arange(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;), np.arange(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Y=np.column_stack((np.linspace(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       np.linspace(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    opts=dict(showlegend=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;viz.line(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    X=np.column_stack((np.arange(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;), np.arange(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;))),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Y=np.column_stack((np.linspace(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       np.linspace(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    win=win,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update=&lt;span class=&quot;string&quot;&gt;&#39;append&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;viz.line(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    X=np.arange(&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Y=np.arange(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    win=win,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name=&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update=&lt;span class=&quot;string&quot;&gt;&#39;append&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;viz.line(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    X=np.arange(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Y=np.arange(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    win=win,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name=&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update=&lt;span class=&quot;string&quot;&gt;&#39;append&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;viz.line(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    X=np.arange(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Y=np.arange(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    win=win,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#name=&#39;3&#39;, #默认为1，即给第一条线append数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update=&lt;span class=&quot;string&quot;&gt;&#39;append&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#viz.line(X=np.arange(5, 10),Y=np.arange(6, 11), win=win, name=&#39;5&#39;, update=&#39;remove&#39;, opts=dict(legend=[&#39;2&#39;], showlegend=True))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;viz.line(X=np.arange(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;),Y=np.arange(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;), win=win, name=&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, update=&lt;span class=&quot;string&quot;&gt;&#39;append&#39;&lt;/span&gt;, opts=dict(showlegend=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;#当name不存在时，新增一条线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;另一台机器远程可视化&quot;&gt;&lt;a href=&quot;#另一台机器远程可视化&quot; class=&quot;headerlink&quot; title=&quot;另一台机器远程可视化&quot;&gt;&lt;/a&gt;另一台机器远程可视化&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python -m visdom.server &lt;span class=&quot;comment&quot;&gt;#远程服务器visdom作图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh -L &lt;span class=&quot;number&quot;&gt;18097&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;8097&lt;/span&gt; cutcat@&lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.106&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh -L &lt;span class=&quot;number&quot;&gt;18097&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;8097&lt;/span&gt; cscg@&lt;span class=&quot;number&quot;&gt;166.111&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.71&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.121&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#通过端口映射，将远程机器的ip端口映射到本地的另一个端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#在本地机器的浏览器输入127.0.0.1:18097，即可查看在远程服务器上8097端口的图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;指定端口&quot;&gt;&lt;a href=&quot;#指定端口&quot; class=&quot;headerlink&quot; title=&quot;指定端口&quot;&gt;&lt;/a&gt;指定端口&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vis = visdom.Visdom(port=&lt;span class=&quot;number&quot;&gt;2333&lt;/span&gt;,env=&lt;span class=&quot;string&quot;&gt;&#39;example&#39;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;#port缺省值为8097，env缺省值为&#39;main&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vis.text(&lt;span class=&quot;string&quot;&gt;&#39;Hello, world!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vis.image(np.ones((&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python -m visdom.server -p &lt;span class=&quot;number&quot;&gt;2333&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -p参数指定端口，缺省值为8097，这里，我们指定2333端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;保存env中的图&quot;&gt;&lt;a href=&quot;#保存env中的图&quot; class=&quot;headerlink&quot; title=&quot;保存env中的图&quot;&gt;&lt;/a&gt;保存env中的图&lt;/h4&gt;&lt;p&gt;点击localhost:8097网页上Environment右边的文件夹，点击Save or fork 下面的那个save按钮，即可将该env中的所有图保存为环境名.json文件，文件存在~/.visdom目录下。关闭visdom服务后，下次启动时会读取jsom文件，重新可视化该env中的图。也可以在网页上的图片上选择保存为png或者文本到本地，这样就算删除了该env，也留下了之前跑的结果。&lt;/p&gt;
&lt;p&gt;若在生成了env中的图后未点击保存，关闭visdom服务下次再启动时，将会丢失上次运行但未保存的所有图。&lt;/p&gt;
&lt;p&gt;如果想要删除，就点击localhost:8097网页上Environment右边的文件夹，点击Delete environment selected 下面的那个Delete按钮，即可将环境名.json文件从~/.visdom目录下删除。&lt;/p&gt;
&lt;p&gt;如果上次跑的图没有保存，也没有关掉visdom服务，则网页上仍会维持着上次程序跑出来的图。但如果这时又要重新在这个env中画图（如：启动一个和上次相同port和env的程序来可视化），则会覆盖掉之前跑出的图。所以在多次执行一个程序前，记得保存上次执行跑出来的图到本地，做好记录。也可以将view进行fork，或者将整个env进行fork&lt;/p&gt;
&lt;p&gt;Fork: 有过您输入了一个新的env 名字，saving会建立一个心的env – 有效的forking之前的状态。（注：这个fork等价于github的fork，跟复制的意思差不多&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;visdom可视化&quot;&gt;&lt;a href=&quot;#visdom可视化&quot; class=&quot;headerlink&quot; title=&quot;visdom可视化&quot;&gt;&lt;/a&gt;visdom可视化&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install visdom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python -m visdom.server #启动visdom服务&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Deep Learning" scheme="http://hujun1413.github.io/categories/Deep-Learning/"/>
    
    
      <category term="Pytorch" scheme="http://hujun1413.github.io/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch教程</title>
    <link href="http://hujun1413.github.io/2018/05/25/Deep%20Learning/pytorch%E6%95%99%E7%A8%8B/"/>
    <id>http://hujun1413.github.io/2018/05/25/Deep Learning/pytorch教程/</id>
    <published>2018-05-25T08:25:26.000Z</published>
    <updated>2018-08-27T09:05:32.404Z</updated>
    
    <content type="html">&lt;h3 id=&quot;PyTorch-Tutorial&quot;&gt;&lt;a href=&quot;#PyTorch-Tutorial&quot; class=&quot;headerlink&quot; title=&quot;PyTorch-Tutorial&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/MorvanZhou/PyTorch-Tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PyTorch-Tutorial&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;与之配套的说明教程：&lt;br&gt;&lt;a href=&quot;https://morvanzhou.github.io/tutorials/machine-learning/torch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pytorch动态神经网络&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;《深度学习框架PyTorch：入门与实践》&quot;&gt;&lt;a href=&quot;#《深度学习框架PyTorch：入门与实践》&quot; class=&quot;headerlink&quot; title=&quot;《深度学习框架PyTorch：入门与实践》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/chenyuntc/pytorch-book&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《深度学习框架PyTorch：入门与实践》&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;softmax分类器&lt;br&gt;fast rcnn&lt;/p&gt;
&lt;h3 id=&quot;pytorch中文文档&quot;&gt;&lt;a href=&quot;#pytorch中文文档&quot; class=&quot;headerlink&quot; title=&quot;pytorch中文文档&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://pytorch-cn.readthedocs.io/zh/latest/package_references/torch-autograd/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pytorch中文文档&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;理解&quot;&gt;&lt;a href=&quot;#理解&quot; class=&quot;headerlink&quot; title=&quot;理解&quot;&gt;&lt;/a&gt;理解&lt;/h3&gt;&lt;p&gt;torch.FloatTensor 相比于numpy，可以使用GPU&lt;br&gt;Variable 相比于Tensor，可以定义计算图，用于自动计算梯度&lt;/p&gt;
&lt;p&gt;The biggest difference between the two is that TensorFlow’s computational graphs are static and PyTorch uses dynamic computational graphs.&lt;/p&gt;
&lt;p&gt;TensorFlow是静态的计算图，而pytorch用动态计算图&lt;/p&gt;
&lt;h3 id=&quot;Dogs-vs-Cats-Kaggle&quot;&gt;&lt;a href=&quot;#Dogs-vs-Cats-Kaggle&quot; class=&quot;headerlink&quot; title=&quot;Dogs vs. Cats Kaggle&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.kaggle.com/c/dogs-vs-cats/data&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dogs vs. Cats Kaggle&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/29024978&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PyTorch实战指南6-知乎&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CUDA_VISIBLE_DEVICES=1 python my_script.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CUDA_VISIBLE_DEVICES=0 python main.py train --train-data-root=./data/train/train --use-gpu=True --env=classifier&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CUDA_VISIBLE_DEVICES=0 python main.py test --load-model-path=./checkpoints/resnet34_0426_17\:40\:25.pth&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用Jupyter-notebook或IPython等交互式调试&quot;&gt;&lt;a href=&quot;#使用Jupyter-notebook或IPython等交互式调试&quot; class=&quot;headerlink&quot; title=&quot;使用Jupyter notebook或IPython等交互式调试&quot;&gt;&lt;/a&gt;使用Jupyter notebook或IPython等交互式调试&lt;/h3&gt;&lt;h3 id=&quot;二分类随机瞎蒙的loss在0-69左右&quot;&gt;&lt;a href=&quot;#二分类随机瞎蒙的loss在0-69左右&quot; class=&quot;headerlink&quot; title=&quot;二分类随机瞎蒙的loss在0.69左右&quot;&gt;&lt;/a&gt;二分类随机瞎蒙的loss在0.69左右&lt;/h3&gt;&lt;p&gt;0.9这个loss很高   二分类随机瞎蒙的loss应该在0.69左右。&lt;/p&gt;
&lt;p&gt;而且学习率太大了&lt;/p&gt;
&lt;p&gt;建议用resnet 34  学习率 0.001  adam优化器&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PyTorch-Tutorial&quot;&gt;&lt;a href=&quot;#PyTorch-Tutorial&quot; class=&quot;headerlink&quot; title=&quot;PyTorch-Tutorial&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/MorvanZhou/PyTorch-Tutorial&quot;&gt;PyTorch-Tutorial&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;与之配套的说明教程：&lt;br&gt;&lt;a href=&quot;https://morvanzhou.github.io/tutorials/machine-learning/torch/&quot;&gt;pytorch动态神经网络&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Deep Learning" scheme="http://hujun1413.github.io/categories/Deep-Learning/"/>
    
    
      <category term="Pytorch" scheme="http://hujun1413.github.io/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>GAN</title>
    <link href="http://hujun1413.github.io/2018/05/25/Deep%20Learning/GAN/"/>
    <id>http://hujun1413.github.io/2018/05/25/Deep Learning/GAN/</id>
    <published>2018-05-25T08:25:26.000Z</published>
    <updated>2018-08-27T09:05:25.290Z</updated>
    
    <content type="html">&lt;h3 id=&quot;简单理解与实验生成对抗网络GAN&quot;&gt;&lt;a href=&quot;#简单理解与实验生成对抗网络GAN&quot; class=&quot;headerlink&quot; title=&quot;简单理解与实验生成对抗网络GAN&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.csdn.net/on2way/article/details/72773771&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简单理解与实验生成对抗网络GAN&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.leiphone.com/news/201706/ty7H504cn7l6EVLd.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最简单易懂的GAN（生成对抗网络）教程：从理论到实践（附代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;生成网络&lt;br&gt;判别网络&lt;/p&gt;
&lt;p&gt;单独交替迭代训练&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;判别网络不仅要做出判断，还要告诉生成网络怎么改进会更好（即：判别网络将学习到的经验反向传递给生成网络）&lt;/p&gt;
&lt;p&gt;DCGAN:将卷积神经网络和对抗网络结合起来&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25071913&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WGAN&lt;/a&gt;:训练过程中终于有一个像交叉熵、准确率这样的数值来指示训练的进程，这个数值越小代表GAN训练得越好，代表生成器产生的图像质量越高&lt;/p&gt;
&lt;p&gt;WGAN-GP:&lt;a href=&quot;https://arxiv.org/pdf/1704.00028.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Improved Training of Wasserstein GANs&lt;/a&gt;使用正则化（gradient penalty）而非 weight clipping的改进版WGAN&lt;br&gt;&lt;a href=&quot;https://github.com/caogang/wgan-gp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pytorch implementation of WGAN-GP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LSGAN:最小二乘GAN&lt;/p&gt;
&lt;p&gt;条件GAN：把generator换成一个image to image的网络，比如encoder-decoder和U-Net。&lt;br&gt;G网络从一个Image生成另一个image，比如：Loss是GAN Loss(尽量让D判成真)+L1 Loss(生成的和真实的一致性)；D网络从一个image判断是否为真实，Loss是将真判为真，生成的判为假&lt;/p&gt;
&lt;p&gt;U-Net是将第i层拼接到第n-i层，这样做是因为第i层和第n-i层的图像大小是一致的，可以认为他们承载着类似的信息。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/NVIDIA/pix2pixHD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pix2pixHD，比pix2pix更好&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;深入浅出理解GAN&quot;&gt;&lt;a href=&quot;#深入浅出理解GAN&quot; class=&quot;headerlink&quot; title=&quot;深入浅出理解GAN&quot;&gt;&lt;/a&gt;深入浅出理解GAN&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.sohu.com/a/143961544_741733&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出 GAN&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;如何指导GAN的训练&quot;&gt;&lt;a href=&quot;#如何指导GAN的训练&quot; class=&quot;headerlink&quot; title=&quot;如何指导GAN的训练&quot;&gt;&lt;/a&gt;如何指导GAN的训练&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/soumith/ganhacks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ganhacks&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;GAN用于分类&quot;&gt;&lt;a href=&quot;#GAN用于分类&quot; class=&quot;headerlink&quot; title=&quot;GAN用于分类&quot;&gt;&lt;/a&gt;GAN用于分类&lt;/h3&gt;&lt;h3 id=&quot;知乎&quot;&gt;&lt;a href=&quot;#知乎&quot; class=&quot;headerlink&quot; title=&quot;知乎&quot;&gt;&lt;/a&gt;知乎&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/52602529&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;生成式对抗网络GAN有哪些最新的发展，可以实际应用到哪些场景中？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/268725048&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GAN 研究的应用方向应该如何选择？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25201511&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深度对抗学习在图像分割和超分辨率中的应用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图像分割&lt;br&gt;视频后续帧预测&lt;br&gt;pix2pix风格变换&lt;br&gt;低分辨率到高分辨率图片&lt;br&gt;噪声生成图片&lt;br&gt;GAN生成深度图（单帧图像的深度估计）：先做分割，再在此基础上做深度估计，因为一个平面上的深度基本相同&lt;/p&gt;
&lt;p&gt;给一张图和路线，就知道应该怎么导航。是向前还是后，左，右&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简单理解与实验生成对抗网络GAN&quot;&gt;&lt;a href=&quot;#简单理解与实验生成对抗网络GAN&quot; class=&quot;headerlink&quot; title=&quot;简单理解与实验生成对抗网络GAN&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.csdn.net/on2way/article/details/72773771&quot;&gt;简单理解与实验生成对抗网络GAN&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.leiphone.com/news/201706/ty7H504cn7l6EVLd.html&quot;&gt;最简单易懂的GAN（生成对抗网络）教程：从理论到实践（附代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;生成网络&lt;br&gt;判别网络&lt;/p&gt;
&lt;p&gt;单独交替迭代训练&lt;br&gt;
    
    </summary>
    
      <category term="Deep Learning" scheme="http://hujun1413.github.io/categories/Deep-Learning/"/>
    
    
      <category term="GAN" scheme="http://hujun1413.github.io/tags/GAN/"/>
    
  </entry>
  
  <entry>
    <title>Cartographer</title>
    <link href="http://hujun1413.github.io/2018/04/09/VSLAM/Cartographer/"/>
    <id>http://hujun1413.github.io/2018/04/09/VSLAM/Cartographer/</id>
    <published>2018-04-09T10:35:26.000Z</published>
    <updated>2019-03-24T13:23:27.296Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Cartographer学习&quot;&gt;&lt;a href=&quot;#Cartographer学习&quot; class=&quot;headerlink&quot; title=&quot;Cartographer学习&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/yebo92/p/6266717.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cartographer学习&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27631583&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;谷歌 slam 地图库-cartographer-源码分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zyh821351004/article/details/52421005&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cartographer和karto-slam&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;http://www.luyixian.cn/news_show_3265.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cartographer算法理解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u013721521/article/details/81477005&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;算法整体结构&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/roadseek_zw/article/details/66968762&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cartographer 代码阅读分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先使用本地slam算法估计初始位姿，然后使用扫描匹配检测闭环，终于通过稀疏姿态图优化（sparse pose graph optimization，原理参见论文）算法优化整个位姿序列。&lt;/p&gt;
&lt;p&gt;如果走丢了（定位失败），算法里似乎没有恢复的方法，不能全局定位，它写了个PerformGlobalLocalization，但是没看见使用；&lt;/p&gt;
&lt;h4 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h4&gt;&lt;p&gt;catographer利用IMU构建预测模型，ScanMatcher与Odom（可选）构建观测模型，采取UKF进行运动预测。 &lt;/p&gt;
&lt;p&gt;通过一次角速度和加速度的prediction得到当前时刻的pose的估计。&lt;br&gt;使用和loop closure相同的匹配方法得到一个pose。&lt;br&gt;imu预测的pose和loop closure匹配方法得到的pose融合后得到一个coarse的pose。&lt;/p&gt;
&lt;h4 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h4&gt;&lt;p&gt;Local SLAM部分获得了很多Submap.&lt;/p&gt;
&lt;p&gt;ScanMatcher部分：cartographer采取的双搜索方式进行，先用一次real-time correlative scan matcher（三维窗口遍历寻优），再构建优化等式，利用Ceres优化求解。&lt;/p&gt;
&lt;p&gt;本地优化里调用了一个重要的函数LocalTrajectoryBuilder::ScanMatch（），这个函数首先对激光数据进行了投射处理、栅格化滤波，然后实时在线优化real_time_correlative_scan&lt;em&gt;matcher&lt;/em&gt;.Match，这个优化是可选的，优化方式比较简单，就是在之前预测位姿附近开一个三维窗口，然后在这个三维窗口内，均匀播撒候选粒子，对每个粒子计算匹配得分，选取最高得分的粒子作为优化的位姿。该优化的位姿还要传入一个ceres_scan&lt;em&gt;matcher&lt;/em&gt;.Match(）在子地图中完成局部优化，最终得到本地优化后的位姿。ceres_scan&lt;em&gt;matcher&lt;/em&gt;.Match()是将局部地图的scan matching作为一个二次型优化问题，由ceres slover解决&lt;/p&gt;
&lt;h4 id=&quot;全局图优化&quot;&gt;&lt;a href=&quot;#全局图优化&quot; class=&quot;headerlink&quot; title=&quot;全局图优化&quot;&gt;&lt;/a&gt;全局图优化&lt;/h4&gt;&lt;p&gt;closing loop， 采用了 SPA（Sparse Pose Adjustment）进行后端loop closure。这个过程中有一个很重要的过程是的scan和submap的匹配，这里采用了BBS（Branch-and-bound scan matching）， 利用分支定界进行全局的闭环检测完成优化，它可大幅提高精度和速度。&lt;/p&gt;
&lt;h3 id=&quot;官网安装教程-Cartographer-ROS-Integration&quot;&gt;&lt;a href=&quot;#官网安装教程-Cartographer-ROS-Integration&quot; class=&quot;headerlink&quot; title=&quot;官网安装教程-Cartographer ROS Integration&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://google-cartographer-ros.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网安装教程-Cartographer ROS Integration&lt;/a&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Install wstool and rosdep.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install -y python-wstool python-rosdep ninja-build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Create a new workspace in &#39;catkin_ws&#39;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir catkin_ws&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; catkin_ws&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wstool init src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Merge the cartographer_ros.rosinstall file and fetch code for dependencies.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#wstool merge -t src https://raw.githubusercontent.com/googlecartographer/cartographer_ros/master/cartographer_ros.rosinstall&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#wstool update -t src&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;由于ceres-solver的地址为https://ceres-solver.googlesource.com/ceres-solver，不翻墙下载不到，所以创建一个名字为a.rosinstall的文件，内容为：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- git: &amp;#123;&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;-name: cartographer, uri: &lt;span class=&quot;string&quot;&gt;&#39;https://github.com/googlecartographer/cartographer.git&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- git: &amp;#123;&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;-name: cartographer_ros, uri: &lt;span class=&quot;string&quot;&gt;&#39;https://github.com/googlecartographer/cartographer_ros.git&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- git: &amp;#123;&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;-name: ceres-solver, uri: &lt;span class=&quot;string&quot;&gt;&#39;https://github.com/ceres-solver/ceres-solver.git&#39;&lt;/span&gt;, version: &lt;span class=&quot;string&quot;&gt;&#39;1.13.0&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所以执行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wstool merge -t src a.rosinstall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wstool update -t src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Install proto3.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;src/cartographer/scripts/install_proto3.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Install deb dependencies.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# The command &#39;sudo rosdep init&#39; will print an error if you have already&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# executed it since installing ROS. This error can be ignored.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo rosdep init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosdep update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosdep install --from-paths src --ignore-src --rosdistro=&lt;span class=&quot;variable&quot;&gt;$&amp;#123;ROS_DISTRO&amp;#125;&lt;/span&gt; -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Build and install.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;catkin_make_isolated --install --use-ninja&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; install_isolated/setup.bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装cartographer遇到Unrecognized syntax identifier “proto3”. This parser only recognizes “proto2”问题&lt;br&gt;需要将protobuf从2.x换成3.x版本&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;protoc --version，如果输出是libprotoc 2.6.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;which protoc，如果输出是/usr/local/protoc，则执行下面的：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo mv /usr/bin/protoc  /usr/bin/protoc.bk &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重新编译protobuf，然后protoc --version输出得到libprotoc 3.4.0即可&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后执行which protoc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：/usr/local/bin/protoc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最后执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo ln -s /usr/local/bin/protoc /usr/bin/protoc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/googlecartographer/cartographer/issues/1395&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;catkin_make_isolated –install –use-ninja遇到undefined reference to google::protobuf::internal::ArenaImpl::AddCleanup(void*, void ()(void))’问题&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;删除build，devel，install文件夹，重新编译&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;catkin_make_isolated --install --use-ninja&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source install_isolated/setup.bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;将CMakeLists.txt中的find_package(Eigen3 REQUIRED)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;替换成：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;include_directories( &amp;quot;/usr/include/eigen3&amp;quot; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#find_package(Eigen3 REQUIRED)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;因为Eigen3全是头文件，所以可以直接在CMakeLists.txt中添加eigen3的路径&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;apt-get安装&quot;&gt;&lt;a href=&quot;#apt-get安装&quot; class=&quot;headerlink&quot; title=&quot;apt-get安装&quot;&gt;&lt;/a&gt;apt-get安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install ros-indigo-cartographer-ros&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;cartographer-turtlebot&quot;&gt;&lt;a href=&quot;#cartographer-turtlebot&quot; class=&quot;headerlink&quot; title=&quot;cartographer_turtlebot&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/googlecartographer/cartographer_turtlebot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cartographer_turtlebot&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;为什么要使用cartographer_turtlebot，而不是直接用cartographer_ROS&lt;/p&gt;
&lt;p&gt;除了多出几个turtlebot的配置文件省去你调参的麻烦以外，cartographer_turtlebot还多了flat_world_imu_node这个函数，官方的解释是’imu_data_raw’ topic传递的Kobuki的IMU信息因为驱动的问题会导致乱顺序，这个函数去掉了乱序的信息。&lt;/p&gt;
&lt;p&gt;有个开关叫TRAJECTORY_BUILDER_2D.use_imu_data，如果不用imu的话，构图的时候一定要移动的很慢、很慢，使用了imu就可以让小车飞快的跑。在cartographer_turtlebot中能找到使用方法&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Cartographer学习&quot;&gt;&lt;a href=&quot;#Cartographer学习&quot; class=&quot;headerlink&quot; title=&quot;Cartographer学习&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/yebo92/p/6266717.html&quot;&gt;Cartographer学习&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27631583&quot;&gt;谷歌 slam 地图库-cartographer-源码分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zyh821351004/article/details/52421005&quot;&gt;cartographer和karto-slam&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="VSLAM" scheme="http://hujun1413.github.io/categories/VSLAM/"/>
    
    
  </entry>
  
  <entry>
    <title>move_base源码学习</title>
    <link href="http://hujun1413.github.io/2017/11/25/Navigation/move_base%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://hujun1413.github.io/2017/11/25/Navigation/move_base源码学习/</id>
    <published>2017-11-25T08:25:26.000Z</published>
    <updated>2018-08-27T09:05:51.528Z</updated>
    
    <content type="html">&lt;h3 id=&quot;move-base代码学习一&quot;&gt;&lt;a href=&quot;#move-base代码学习一&quot; class=&quot;headerlink&quot; title=&quot;move_base代码学习一&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.cnblogs.com/shhu1993/p/6323699.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;move_base代码学习一&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/david_han008/article/details/72032898&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;move_base导航的源码心得&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;源码架构分析&quot;&gt;&lt;a href=&quot;#源码架构分析&quot; class=&quot;headerlink&quot; title=&quot;源码架构分析&quot;&gt;&lt;/a&gt;源码架构分析&lt;/h3&gt;&lt;h4 id=&quot;move-base&quot;&gt;&lt;a href=&quot;#move-base&quot; class=&quot;headerlink&quot; title=&quot;move_base&quot;&gt;&lt;/a&gt;move_base&lt;/h4&gt;&lt;p&gt;move_base 提供的是框架，在move_base 中是通过nav_core 中规定的planner 与 recovery_behavior 的基类的接口进行调用。与具体的实现方法隔离开来。&lt;/p&gt;
&lt;p&gt;planThread是全局路径规划的线程，在有新的目标到达时等需要进行全局规划时被唤醒，用于规划出一条全局路径。&lt;/p&gt;
&lt;p&gt;executeCycle是局部路径规划的工作函数，其中会调用computeVelocityCommands来规划出当前机器人的速度&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MoveBase::MoveBase(tf::TransformListener&amp;amp; tf)　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//MoveBase类的构造函数，读取配置参数，加载所选择的插件，开启global　planner的线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MoveBase::reconfigureCB(move_base::MoveBaseConfig &amp;amp;config, &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; level)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//动态更改节点参数的回调函数，用于修改参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MoveBase::goalCB(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; geometry_msgs::PoseStamped::ConstPtr&amp;amp; goal)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//In ROS goal callback, wrapping the PoseStamped in the action message and re-sending to the server.将接收到的目标重新发送给action_goal server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MoveBase::clearCostmapWindows(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; size_x, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; size_y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//clear the planner&#39;s costmap and the controller&#39;s costmap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; MoveBase::clearCostmapsService(std_srvs::Empty::Request &amp;amp;req, std_srvs::Empty::Response &amp;amp;resp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//a service for clearing the costmaps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; MoveBase::planService(nav_msgs::GetPlan::Request &amp;amp;req, nav_msgs::GetPlan::Response &amp;amp;resp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//a service for getting a plan&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MoveBase::~MoveBase()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//MoveBase类的析构函数，清除并关闭线程，退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; MoveBase::makePlan(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; geometry_msgs::PoseStamped&amp;amp; goal, &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;geometry_msgs::PoseStamped&amp;gt;&amp;amp; plan)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//global planner function, 调用planner_-&amp;gt;makePlan，这里即调用bool NavfnROS::makePlan(const geometry_msgs::PoseStamped&amp;amp; start, const geometry_msgs::PoseStamped&amp;amp; goal, std::vector&amp;lt;geometry_msgs::PoseStamped&amp;gt;&amp;amp; plan)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MoveBase::planThread()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//global planner thread，会被executeCb,executeCycle唤醒或挂起&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MoveBase::executeCb(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; move_base_msgs::MoveBaseGoalConstPtr&amp;amp; move_base_goal)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//MoveBaseActionServer，每次goal到来都被调用,如果有新目标到来而被抢占则唤醒planThread线程处理，否则为取消目标并挂起处理线程。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; MoveBase::executeCycle(geometry_msgs::PoseStamped&amp;amp; goal, &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;geometry_msgs::PoseStamped&amp;gt;&amp;amp; global_plan)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//local planner 核心工作函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; MoveBase::loadRecoveryBehaviors(ros::NodeHandle node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//加载指定的void MoveBase::loadDefaultRecoveryBehaviors()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MoveBase::loadDefaultRecoveryBehaviors()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//加载默认的void MoveBase::loadDefaultRecoveryBehaviors()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MoveBase::resetState()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//状态重置，速度归零&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;navfn-ros&quot;&gt;&lt;a href=&quot;#navfn-ros&quot; class=&quot;headerlink&quot; title=&quot;navfn_ros&quot;&gt;&lt;/a&gt;navfn_ros&lt;/h3&gt;&lt;p&gt;为navigation的全局规划器，接受costmap生成的 global costmap 规划出从起始点到目标点的路径，为local_planner 作出参考。&lt;/p&gt;
&lt;p&gt;所有的global planner都必须实现nav_core::BaseGlobalPlanner定义的接口(即纯虚函数)&lt;/p&gt;
&lt;p&gt;makePlan用于规划出全局路径，调用calcNavFnDijkstra和getPlanFromPotential。calcNavFnDijkstra会调用propNavFnDijkstra的Dijkstra算法来计算全局路径。&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; NavfnROS::initialize(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; name, costmap_2d::Costmap2DROS* costmap_ros)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; NavfnROS::makePlan(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; geometry_msgs::PoseStamped&amp;amp; start, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; geometry_msgs::PoseStamped&amp;amp; goal, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; tolerance, &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;geometry_msgs::PoseStamped&amp;gt;&amp;amp; plan)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//global planner function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; NavFn::calcNavFnDijkstra(&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; atStart)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用propNavFnDijkstra，找到全局规划路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; NavFn::propNavFnDijkstra(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cycles, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; atStart)	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//main propagation function，Dijkstra method, breadth-first&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; NavFn::calcPath(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *st)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Path construction,Find gradient at array points, interpolate path, Use step size of pathStep, usually 0.5 pixel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; NavfnROS::getPlanFromPotential(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; geometry_msgs::PoseStamped&amp;amp; goal, &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;geometry_msgs::PoseStamped&amp;gt;&amp;amp; plan)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//从potential中选出最佳的下一个pose，调用了calcPath&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;base-local-planner&quot;&gt;&lt;a href=&quot;#base-local-planner&quot; class=&quot;headerlink&quot; title=&quot;base_local_planner&quot;&gt;&lt;/a&gt;base_local_planner&lt;/h3&gt;&lt;p&gt;所有的local planner都必须实现nav_core::BaseLocalPlanner定义的接口(纯虚函数)&lt;/p&gt;
&lt;p&gt;为navigation 的局部规划器，接受costmap 生成的local costmap 规划出速度。&lt;/p&gt;
&lt;p&gt;setPlan()用于设置之前全局规划得到的全局路径，然后转换成相对于机器人位置的路径之后，调用findBestPath来得到当前的速度。&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Given the current position, orientation, and velocity of the robot, compute velocity commands to send to the base&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;computeVelocityCommands&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(geometry_msgs::Twist &amp;amp;cmd_vel)&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; name, tf::TransformListener *tf, costmap_2d::Costmap2DROS *costmap_ros)&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isGoalReached&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setPlan&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt; geometry_msgs::PoseStamped &amp;gt; &amp;amp;plan)&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; TrajectoryPlannerROS::computeVelocityCommands(geometry_msgs::Twist&amp;amp; cmd_vel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//计算得到当前的速度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Trajectory TrajectoryPlanner::findBestPath(tf::Stamped&amp;lt;tf::Pose&amp;gt; global_pose, tf::Stamped&amp;lt;tf::Pose&amp;gt; global_vel, tf::Stamped&amp;lt;tf::Pose&amp;gt;&amp;amp; drive_velocities)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//given the current state of the robot, find a good trajectory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;clear-costmap-recovery&quot;&gt;&lt;a href=&quot;#clear-costmap-recovery&quot; class=&quot;headerlink&quot; title=&quot;clear_costmap_recovery&quot;&gt;&lt;/a&gt;clear_costmap_recovery&lt;/h3&gt;&lt;p&gt;所有的recovery behaviors都必须实现nav_core::RecoveryBehavior定义的接口(纯虚函数)&lt;/p&gt;
&lt;p&gt;规定move_base 行为集合中处理异常情况的行为，可以定义多种恢复行为的插件。&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; name, tf::TransformListener *tf, costmap_2d::Costmap2DROS *global_costmap, costmap_2d::Costmap2DROS *local_costmap)&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;runBehavior&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//executeCycle中的CLEARING模式，调用runBehavior，是把local,global costmap在reset_distance半径之外的free，occupied都清除，变成NO_INFORMATION。不对static layer操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;rotate-recovery&quot;&gt;&lt;a href=&quot;#rotate-recovery&quot; class=&quot;headerlink&quot; title=&quot;rotate_recovery&quot;&gt;&lt;/a&gt;rotate_recovery&lt;/h3&gt;&lt;p&gt;他的作用只是在原地旋转，这样costmap就会自己更新，mark或者clear一点的值&lt;/p&gt;
&lt;h3 id=&quot;costmap-2d&quot;&gt;&lt;a href=&quot;#costmap-2d&quot; class=&quot;headerlink&quot; title=&quot;costmap_2d&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.csdn.net/sonictl/article/details/51518492&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;costmap_2d&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;使用分层的机制，每层的信息都加到costmap_2d::LayeredCostmap进行管理。&lt;br&gt;可看作为navigation的输入处理器。不同的传感器输入的数据差异很大（激光雷达 &amp;amp; RGBD-camera）通过costmap_2d ， 不同的数据被处理成统一的格式：栅格地图，权值用经过概率方法处理过的，表示空间中障碍物，未知与安全区域。生成出来的costmap则是planner的输入。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/mllearnertj/article/details/74838981&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;costmap_2d中类的解析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;StaticLayer：订阅map消息&lt;br&gt;ObstacleLayer：监听Laser回调&lt;br&gt;inflation_layer：Given a distance, compute a cost.&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Costmap2DROS::reconfigureCB(costmap_2d::Costmap2DConfig &amp;amp;config, &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; level)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//动态更改节点参数的回调函数，用于修改参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Costmap2DROS::mapUpdateLoop(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; frequency)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//根据频率更新costmap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Costmap2DROS::updateMap()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; LayeredCostmap::updateMap(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; robot_x, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; robot_y, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; robot_yaw)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(*plugin)-&amp;gt;updateCosts(costmap_, x0, y0, xn, yn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//cost 值的更新，每个plugin都实现这个函数,是一份costmap在不同的plugin下的更新，costmap是一样的，cost值是叠加上去的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; StaticLayer::updateCosts(costmap_2d::Costmap2D&amp;amp; master_grid, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; min_i, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; min_j, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; max_i, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; max_j)或者obstacle_layer,inflation_layer等插件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;dwa-planner&quot;&gt;&lt;a href=&quot;#dwa-planner&quot; class=&quot;headerlink&quot; title=&quot;dwa_planner&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://wiki.ros.org/dwa_local_planner&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dwa_planner&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.bubuko.com/infodetail-720132.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS局部规划模块分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/x_r_su/article/details/53393872&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS Navigation—–dwa_local_planner（DWA）简介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/david_han008/article/details/72171602&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;agv 路径规划move_base&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/heyijia0327/article/details/44983551&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;机器人局部避障的动态窗口法(dynamic window approach)&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SimpleTrajectoryGenerator::generateTrajectory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//生成轨迹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DWAPlanner::findBestPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//given the current state of the robot, find a good trajectory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SimpleTrajectoryGenerator::initialise&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//初始化路径生成器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SimpleScoredSamplingPlanner::findBestTrajectory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SimpleTrajectoryGenerator::nextTrajectory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SimpleTrajectoryGenerator::generateTrajectory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SimpleScoredSamplingPlanner::scoreTrajectory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;base_local_planner::LocalPlannerLimits* limits的min_vel和max_vel之间平均采样vsamples次，作为sample_params_数组的值&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题记录&quot;&gt;&lt;a href=&quot;#问题记录&quot; class=&quot;headerlink&quot; title=&quot;问题记录&quot;&gt;&lt;/a&gt;问题记录&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;导航中是如何使用costmap_2d的&lt;/li&gt;
&lt;li&gt;所需设置的参数及含义&lt;/li&gt;
&lt;li&gt;几个线程及功能：&lt;ul&gt;
&lt;li&gt;move_base.cpp的line 86，planner&lt;em&gt;thread&lt;/em&gt;：做全局规划的线程&lt;/li&gt;
&lt;li&gt;主线程，ros::spin()&lt;/li&gt;
&lt;li&gt;move_base，MoveBase::executeCb，MoveBaseActionServer&lt;/li&gt;
&lt;li&gt;MoveBase::reconfigureCB，dynamic_reconfigure::Server&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;make_plan，MoveBase::planService，private_nh.advertiseService&lt;/li&gt;
&lt;li&gt;clear_costmaps，MoveBase::clearCostmapsService，private_nh.advertiseService&lt;/li&gt;
&lt;li&gt;提供两种方式send goal目标位置的信息&lt;br&gt;SimpleActionServer(可以追踪移动到目标过程的状态信息，到了没有，是不是没有plan，取消了etc)&lt;br&gt;Subscribe topic(move_base_simple/goal),直接发布这个topic的信息，不会有目标执行过程中的反馈信息&lt;br&gt;提供的service&lt;br&gt;~make_plan(只会提供plan该怎么走的位置信息，不会使机器人移动)&lt;br&gt;~clear_unknown_space(告诉move_base清楚机器人周围的unknown space)&lt;br&gt;~clear_costmaps(告诉move_base清楚costmap中的障碍物信息，可能导致撞到障碍物)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;global local　整合&lt;/li&gt;
&lt;li&gt;有了plan怎么得速度&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;move-base代码学习一&quot;&gt;&lt;a href=&quot;#move-base代码学习一&quot; class=&quot;headerlink&quot; title=&quot;move_base代码学习一&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.cnblogs.com/shhu1993/p/6323699.html&quot;&gt;move_base代码学习一&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/david_han008/article/details/72032898&quot;&gt;move_base导航的源码心得&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;源码架构分析&quot;&gt;&lt;a href=&quot;#源码架构分析&quot; class=&quot;headerlink&quot; title=&quot;源码架构分析&quot;&gt;&lt;/a&gt;源码架构分析&lt;/h3&gt;&lt;h4 id=&quot;move-base&quot;&gt;&lt;a href=&quot;#move-base&quot; class=&quot;headerlink&quot; title=&quot;move_base&quot;&gt;&lt;/a&gt;move_base&lt;/h4&gt;&lt;p&gt;move_base 提供的是框架，在move_base 中是通过nav_core 中规定的planner 与 recovery_behavior 的基类的接口进行调用。与具体的实现方法隔离开来。&lt;/p&gt;
&lt;p&gt;planThread是全局路径规划的线程，在有新的目标到达时等需要进行全局规划时被唤醒，用于规划出一条全局路径。&lt;/p&gt;
&lt;p&gt;executeCycle是局部路径规划的工作函数，其中会调用computeVelocityCommands来规划出当前机器人的速度&lt;br&gt;
    
    </summary>
    
      <category term="Navigation" scheme="http://hujun1413.github.io/categories/Navigation/"/>
    
    
      <category term="move_base" scheme="http://hujun1413.github.io/tags/move-base/"/>
    
  </entry>
  
  <entry>
    <title>ROS开发</title>
    <link href="http://hujun1413.github.io/2017/07/18/ROS/ROS%E5%BC%80%E5%8F%91/"/>
    <id>http://hujun1413.github.io/2017/07/18/ROS/ROS开发/</id>
    <published>2017-07-18T12:35:26.000Z</published>
    <updated>2019-03-24T16:36:11.243Z</updated>
    
    <content type="html">&lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;h3 id=&quot;Linux系统&quot;&gt;&lt;a href=&quot;#Linux系统&quot; class=&quot;headerlink&quot; title=&quot;Linux系统&quot;&gt;&lt;/a&gt;Linux系统&lt;/h3&gt;&lt;p&gt;参考&lt;a href=&quot;http://www.ncnynl.com/archives/201701/1277.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS与C++入门教程-搭建开发环境(QT+ros_qtc_plugin)&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;将ROS代码和业务逻辑代码分离开&quot;&gt;&lt;a href=&quot;#将ROS代码和业务逻辑代码分离开&quot; class=&quot;headerlink&quot; title=&quot;将ROS代码和业务逻辑代码分离开&quot;&gt;&lt;/a&gt;将ROS代码和业务逻辑代码分离开&lt;/h2&gt;&lt;p&gt;包含自己写的roshelper.hpp库即可，里面包含创建发布器，订阅器和定时器。&lt;br&gt;自己写一个继承RosHelper类的子类，然后在初始化函数中调用RosHelper的函数来创建发布器，订阅器和定时器；然后将发布消息进行封装，以后的发布消息都调用封装后的函数即可。&lt;/p&gt;
&lt;h2 id=&quot;tf变换的使用&quot;&gt;&lt;a href=&quot;#tf变换的使用&quot; class=&quot;headerlink&quot; title=&quot;tf变换的使用&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.guyuehome.com/355&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tf变换的使用&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/crazyquhezheng/article/details/43346907&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TF,base_link, map,odom和odom 主题的关系&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/EAIBOT/article/details/51542721&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS的坐标系TF&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/light_jiang2016/article/details/55517129&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于turtlebot 中tf tree的理解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;odom-&amp;gt;base_link的坐标关系是由里程计节点计算并发布的，相当于底盘做了一个粗略的定位，得到了机器人在odom坐标系中的位置。 /odom消息是由里程计发出来的，代表底盘的粗略定位，消息中的pos是指底盘算出来的机器人在odom坐标系中的位置。&lt;/p&gt;
&lt;p&gt;map -&amp;gt; base_link的坐标关系是由定位节点计算出来，但并不发布，而是利用接收odom-&amp;gt;base_link的坐标关系，计算出map-&amp;gt;odom的坐标关系（这就相当于定位节点修正了底盘定位的误差，得到修正后机器人在map坐标系下的误差），然后发布。&lt;/p&gt;
&lt;p&gt;有了底盘的odom-&amp;gt;base_link和定位建图节点的map-&amp;gt;odom，就可以知道map-&amp;gt;base_link的坐标变换，也就是得到机器人在map坐标系中的位置，一般认为map坐标系是真实世界的坐标系，所以就得到了机器人在真实世界中的定位。&lt;br&gt;同时定位建图节点也建出了一张map坐标系下的地图，用于可视化和在真实世界中进行导航。&lt;/p&gt;
&lt;p&gt;建图定位节点接收/odom的数据，然后用SLAM方法来进行定位修正和建图，用以消除底盘粗略定位的累计误差。建图定位节点可以得到map-&amp;gt;base_link的坐标变换，可以得到机器人在map坐标系中的位置。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tf tf_echo /base_link /map&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;At time 1527845513.918&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Translation: [-1.782, -0.758, -0.017]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Rotation: in Quaternion [0.000, 0.000, 0.548, 0.837]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            in RPY (radian) [0.000, -0.000, 1.159]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            in RPY (degree) [0.000, -0.000, 66.392]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明：/map所在的坐标系在地面上(origin_x, origin_y, 0)位置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先，编写一个用来发布tf tree的广播节点，然后编写订阅tf广播的节点，即可在订阅端利用tf进行坐标变换&lt;/p&gt;
&lt;h3 id=&quot;tf广播&quot;&gt;&lt;a href=&quot;#tf广播&quot; class=&quot;headerlink&quot; title=&quot;tf广播&quot;&gt;&lt;/a&gt;tf广播&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tf::TransformBroadcaster broadcaster;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; broadcaster.sendTransform(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      tf::StampedTransform(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tf::Transform(tf::Quaternion(0, 0, 0, 1), tf::Vector3(0.1, 0.0, 0.2)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ros::Time::now(),&amp;quot;base_link&amp;quot;, &amp;quot;base_laser&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;订阅tf的节点&quot;&gt;&lt;a href=&quot;#订阅tf的节点&quot; class=&quot;headerlink&quot; title=&quot;订阅tf的节点&quot;&gt;&lt;/a&gt;订阅tf的节点&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tf::TransformListener listener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sleep(1); //wait for receive message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;geometry_msgs::PointStamped base_point;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listener.transformPoint(&amp;quot;base_link&amp;quot;, laser_point, base_point);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;格式化输出&quot;&gt;&lt;a href=&quot;#格式化输出&quot; class=&quot;headerlink&quot; title=&quot;格式化输出&quot;&gt;&lt;/a&gt;格式化输出&lt;/h2&gt;&lt;p&gt;DEBUG和INFO 信息是输出到标准输出cout（或stdout）；而WARN、ERROR和 FATAL会输出到错误信息输出cerr（或stderr）。&lt;/p&gt;
&lt;p&gt;DEBUG为绿色， INFO为白色， WARN为黄色， ERROR为红色，以及FATAL为紫色。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ROS_DEBUG_STREAM&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ROS_WARN_STREAM&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ROS_WARN_STREAM(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;My INFO stream message with argument: &amp;quot; &amp;lt;&amp;lt; val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ROS_INFO_STREAM&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ROS_INFO_STREAM(&amp;quot;parameter:&amp;quot; &amp;lt;&amp;lt; std::endl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;lt; &amp;quot;        base_name: &amp;quot; FG_CYAN &amp;lt;&amp;lt; base_name &amp;lt;&amp;lt; NO_COLOR &amp;lt;&amp;lt; std::endl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;lt; &amp;quot;     base_name_tf: &amp;quot; FG_CYAN &amp;lt;&amp;lt; baseNameTF &amp;lt;&amp;lt; NO_COLOR &amp;lt;&amp;lt; std::endl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;lt; &amp;quot;   worker_threads: &amp;quot; FG_CYAN &amp;lt;&amp;lt; worker_threads &amp;lt;&amp;lt; NO_COLOR);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OUT_ERROR_STREAM&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OUT_ERROR_STREAM(&amp;quot;could not close device!&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;打断机制的实现&quot;&gt;&lt;a href=&quot;#打断机制的实现&quot; class=&quot;headerlink&quot; title=&quot;打断机制的实现&quot;&gt;&lt;/a&gt;打断机制的实现&lt;/h2&gt;&lt;p&gt;在消息的回调函数中，判断为何种指令，然后调用另一个类中的记录函数，记录又来了一个新的消息。在这个记录函数中可以开启一个专门的线程来做消息所代表的任务，保证在消息的回调函数执行时间足够短。在类中可以用一个消息队列来缓冲消息（不打断当前任务，当前执行完后再执行队列中的任务），也可以直接打断当前的指令（打断当前任务，即在当前任务中要知道是否有新的任务来）。&lt;/p&gt;
&lt;p&gt;以上专门开一个线程来处理消息的好处：如果主线程用来监听所有的topic，当来了一个需要处理很久的消息时，在处理消息过程中又来了很多频率很快的消息，这时缓冲消息的队列一旦满了就会丢失之后的消息。因此，最好将回调函数中的代码效率进行优化，实在优化不了就开一个线程处理接收的消息。&lt;/p&gt;
&lt;h2 id=&quot;ROS-gtest&quot;&gt;&lt;a href=&quot;#ROS-gtest&quot; class=&quot;headerlink&quot; title=&quot;ROS gtest&quot;&gt;&lt;/a&gt;ROS gtest&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://wiki.ros.org/UnitTesting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS UnitTesting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wiki.ros.org/rostest/Writing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rostest/Writing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wiki.ros.org/gtest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS gtest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/x_r_su/article/details/53184871&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; ROS rostest tool使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;/tools/rosconsole/test&lt;br&gt;/test/test_roscpp/test/test_poll_set.cpp&lt;/p&gt;
&lt;p&gt;直接在自己的包里建一个test子目录，里面写一个gtest的测试用例shm_transport_test就可以了&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if(CATKIN_ENABLE_TESTING)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  find_package(rostest REQUIRED)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  catkin_add_gtest(shm_test shm_test/shm_test.cpp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if(TARGET shm_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    target_link_libraries(shm_test $&amp;#123;catkin_LIBRARIES&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  endif()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endif()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译所有test:&lt;br&gt;&lt;code&gt;catkin_make tests&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编译运行所有test:&lt;br&gt;&lt;code&gt;catkin_make run_tests&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编译指定的某个test&lt;br&gt;&lt;code&gt;catkin_make tests &amp;lt;package name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编译运行指定的某个test&lt;br&gt;&lt;code&gt;catkin_make run_tests &amp;lt;package name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;make run_test shm_test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= make tests shm_test + rosrun shm_transport shm_test &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= make tests + ./devel/lib/shm_transport/shm_test&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装ros-comm后roscore出错&quot;&gt;&lt;a href=&quot;#安装ros-comm后roscore出错&quot; class=&quot;headerlink&quot; title=&quot;安装ros_comm后roscore出错&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.exbot.net/archives/941&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安装ros_comm后roscore出错&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;roscd rosout，发现进入到刚编译好的~/catkin_ws_hujun/src/ros_comm里，而不是/opt/ros/indigo&lt;/p&gt;
&lt;p&gt;方法一（已测试，可行）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;删除~/.bashrc中的source ~/catkin_ws_hujun/devel/setup.bash&lt;/li&gt;
&lt;li&gt;重新打开一个终端（此时.bashrc让catkin_ws_hujun不在环境变量中），进入~/catkin_ws_hujun/src&lt;/li&gt;
&lt;li&gt;删除ros_comm，同时删除所在workspace的build和devel文件夹，重新执行catkin_make，编译通过&lt;/li&gt;
&lt;li&gt;在~/.bashrc中的重新加入source ~/catkin_ws_hujun/devel/setup.bash，执行roscore即可成功&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法二（未测试）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;source /opt/ros/indigo/setup.bash&lt;/li&gt;
&lt;li&gt;进入~/catkin_ws_hujun/src，删除ros_comm，同时删除所在workspace的build和devel文件夹，重新执行catkin_make，编译通过&lt;/li&gt;
&lt;li&gt;打开另一终端，执行roscore即可成功&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;对象和constptr或ptr直接互相转换&quot;&gt;&lt;a href=&quot;#对象和constptr或ptr直接互相转换&quot; class=&quot;headerlink&quot; title=&quot;对象和constptr或ptr直接互相转换&quot;&gt;&lt;/a&gt;对象和constptr或ptr直接互相转换&lt;/h2&gt;&lt;h3 id=&quot;对象转constptr&quot;&gt;&lt;a href=&quot;#对象转constptr&quot; class=&quot;headerlink&quot; title=&quot;对象转constptr&quot;&gt;&lt;/a&gt;对象转constptr&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nav_msgs::OccupancyGrid a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.info.origin.position.x = 1.2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nav_msgs::OccupancyGridConstPtr b = nav_msgs::OccupancyGridConstPtr(&amp;amp;a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//b的地址就是a的地址，如果a被销毁，b的内容也将不复存在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double c= b-&amp;gt;info.origin.position.x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printf(&amp;quot;%lf\n&amp;quot;, c);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;constptr转对象&quot;&gt;&lt;a href=&quot;#constptr转对象&quot; class=&quot;headerlink&quot; title=&quot;constptr转对象&quot;&gt;&lt;/a&gt;constptr转对象&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nav_msgs::OccupancyGridConstPtr map = tool-&amp;gt;getGlobalMap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nav_msgs::OccupancyGrid b = *map;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double c= b.info.origin.position.x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printf(&amp;quot;%lf\n&amp;quot;, c);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;ptr转constptr&quot;&gt;&lt;a href=&quot;#ptr转constptr&quot; class=&quot;headerlink&quot; title=&quot;ptr转constptr&quot;&gt;&lt;/a&gt;ptr转constptr&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;直接赋值即可。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cv_bridge::CvImagePtr cv_ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sensor_msgs::imagePtr img_ptr = cv_ptr-&amp;gt;toImageMsg();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sensor_msgs::ImageConstPtr img_constptr = img_ptr;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;constptr转ptr&quot;&gt;&lt;a href=&quot;#constptr转ptr&quot; class=&quot;headerlink&quot; title=&quot;constptr转ptr&quot;&gt;&lt;/a&gt;constptr转ptr&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.jb51.net/article/55885.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;const_cast&lt;/a&gt;用来将类型的const、volatile和__unaligned属性移除&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const CA *pA = new CA;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CA *pB = const_cast&amp;lt;CA *&amp;gt;(pA);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pB-&amp;gt;m_iA = 100;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Now the pA and the pB points to the same object&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;仿真启动turtlebot&quot;&gt;&lt;a href=&quot;#仿真启动turtlebot&quot; class=&quot;headerlink&quot; title=&quot;仿真启动turtlebot&quot;&gt;&lt;/a&gt;仿真启动turtlebot&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;include file=&amp;quot;$(find turtlebot_bringup)/launch/minimal.launch&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;arg name=&amp;quot;simulation&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/include&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;ros-time&quot;&gt;&lt;a href=&quot;#ros-time&quot; class=&quot;headerlink&quot; title=&quot;ros time&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.ncnynl.com/archives/201611/1074.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ros time&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;t = rospy.Time.from_sec(time.time())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;seconds = t.to_sec() #floating point&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nanoseconds = t.to_nsec()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;python-欧拉角和四元数相互转换&quot;&gt;&lt;a href=&quot;#python-欧拉角和四元数相互转换&quot; class=&quot;headerlink&quot; title=&quot;python 欧拉角和四元数相互转换&quot;&gt;&lt;/a&gt;python 欧拉角和四元数相互转换&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tf.transformations.euler_from_quaternion(quaternion, axes=&amp;apos;sxyz&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tf.transformations.quaternion_from_euler(ai, aj, ak, axes=&amp;apos;sxyz&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;ros-tf官方api文档&quot;&gt;&lt;a href=&quot;#ros-tf官方api文档&quot; class=&quot;headerlink&quot; title=&quot;ros tf官方api文档&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://docs.ros.org/indigo/api/tf/html/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ros tf官方api文档&lt;/a&gt;&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;h3 id=&quot;Linux系统&quot;&gt;&lt;a href=&quot;#Linux系统&quot; class=&quot;headerlink&quot; title=&quot;Linux系统&quot;&gt;&lt;/a&gt;Linux系统&lt;/h3&gt;&lt;p&gt;参考&lt;a href=&quot;http://www.ncnynl.com/archives/201701/1277.html&quot;&gt;ROS与C++入门教程-搭建开发环境(QT+ros_qtc_plugin)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ROS" scheme="http://hujun1413.github.io/categories/ROS/"/>
    
    
  </entry>
  
  <entry>
    <title>LLVM的编程技巧</title>
    <link href="http://hujun1413.github.io/2017/01/15/LLVM/3.LLVM%E7%9A%84%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    <id>http://hujun1413.github.io/2017/01/15/LLVM/3.LLVM的编程技巧/</id>
    <published>2017-01-15T10:35:26.000Z</published>
    <updated>2018-08-27T08:54:14.692Z</updated>
    
    <content type="html">&lt;h3 id=&quot;先获取模块中的每个函数，再获取每个函数中的每个BasicBlock，再获取每个BasicBlock中的每条instruction（最常用）&quot;&gt;&lt;a href=&quot;#先获取模块中的每个函数，再获取每个函数中的每个BasicBlock，再获取每个BasicBlock中的每条instruction（最常用）&quot; class=&quot;headerlink&quot; title=&quot;先获取模块中的每个函数，再获取每个函数中的每个BasicBlock，再获取每个BasicBlock中的每条instruction（最常用）&quot;&gt;&lt;/a&gt;先获取模块中的每个函数，再获取每个函数中的每个BasicBlock，再获取每个BasicBlock中的每条instruction（最常用）&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Module::iterator FunIt = mod-&amp;gt;begin() ; FunIt != mod-&amp;gt;end() ; ++FunIt)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Function::iterator b = FunIt-&amp;gt;begin(), e = FunIt-&amp;gt;end(); b != e; ++b)  //获取每个函数中的basic block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cout&amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Basic block name=&quot;&lt;/span&gt; &amp;lt;&amp;lt; b-&amp;gt;getName().str() &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (BasicBlock::iterator i = b-&amp;gt;begin(), e = b-&amp;gt;end(); i != e; ++i)  //获取每个basic block中的instruction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            outs() &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Instruction* inst = &amp;amp;(*i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;获取Module中的每一个Function&quot;&gt;&lt;a href=&quot;#获取Module中的每一个Function&quot; class=&quot;headerlink&quot; title=&quot;获取Module中的每一个Function&quot;&gt;&lt;/a&gt;获取Module中的每一个Function&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Module::iterator FunIt = mod-&amp;gt;begin() ; FunIt != mod-&amp;gt;end() ; ++FunIt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Function* F = &amp;amp;(*FunIt);  //获取模块中的每一个函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;直接获取Function中的instruction&quot;&gt;&lt;a href=&quot;#直接获取Function中的instruction&quot; class=&quot;headerlink&quot; title=&quot;直接获取Function中的instruction&quot;&gt;&lt;/a&gt;直接获取Function中的instruction&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (inst_iterator I = inst_begin(F), E = inst_end(F); I != E; ++I)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Instruction* inst = &amp;amp;(*I);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outs() &amp;lt;&amp;lt; inst-&amp;gt;getName() &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;    &quot;&lt;/span&gt; &amp;lt;&amp;lt; inst-&amp;gt;getOpcode() &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取Function中的每个BasicBlock，直接打印整个BasicBlock的内容&quot;&gt;&lt;a href=&quot;#获取Function中的每个BasicBlock，直接打印整个BasicBlock的内容&quot; class=&quot;headerlink&quot; title=&quot;获取Function中的每个BasicBlock，直接打印整个BasicBlock的内容&quot;&gt;&lt;/a&gt;获取Function中的每个BasicBlock，直接打印整个BasicBlock的内容&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Function::iterator i = FunIt-&amp;gt;begin(), e = FunIt-&amp;gt;end(); i != e; ++i) &amp;#123;  //获取每个函数中的basic block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cout&amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Basic block name=&quot;&lt;/span&gt; &amp;lt;&amp;lt; i-&amp;gt;getName().str() &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outs() &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;   //打印basic blocks的名字和内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;声明一个函数&quot;&gt;&lt;a href=&quot;#声明一个函数&quot; class=&quot;headerlink&quot; title=&quot;声明一个函数&quot;&gt;&lt;/a&gt;声明一个函数&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//先创造函数的类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IntegerType *IntTy32 = IntegerType::get(mod-&amp;gt;getContext(), 32);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;std::vector&amp;lt;Type*&amp;gt;FuncTy_args;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FuncTy_args.push_back(IntTy32);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FuncTy_args.push_back(IntTy32);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FunctionType* FuncTy = FunctionType::get(/*Result=*/Type::getVoidTy(mod-&amp;gt;getContext()),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*Params=*/FuncTy_args,/*isVarArg=*/&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//再声明函数，设置链接类型，函数名，调用惯例和属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Function* func = mod-&amp;gt;getFunction(&lt;span class=&quot;string&quot;&gt;&quot;PrintWrite&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!func)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Function* func =Function::Create(/*Type=*/FuncTy, /*Linkage=*/GlobalValue::ExternalLinkage,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									 /*Name=*/&lt;span class=&quot;string&quot;&gt;&quot;PrintWrite&quot;&lt;/span&gt;,mod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	func-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;CallingConv(CallingConv::C);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AttrListPtr func_Add_PAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Attributes(func_Add_PAL);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;调用一个函数&quot;&gt;&lt;a href=&quot;#调用一个函数&quot; class=&quot;headerlink&quot; title=&quot;调用一个函数&quot;&gt;&lt;/a&gt;调用一个函数&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//BasicBlock::iterator i   i是BasicBlock迭代器，通过Instruction* inst = &amp;amp;(*i)获取指令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//在i指令后插入一条函数调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CallInst *newcall;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;std::vector&amp;lt;Value*&amp;gt; para;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Constant *content = CreateWords(mod, &lt;span class=&quot;string&quot;&gt;&quot;sum outputted by Hujun:\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;para.push_back(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newcall = CallInst::Create(&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;, para1, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, i);  //在i之前插入一条函数调用，&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;是函数的指针&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newcall-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;CallingConv(CallingConv::C);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newcall-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;TailCall(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--i;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建一个指向字符串的指针，若已存在则直接返回指针&quot;&gt;&lt;a href=&quot;#创建一个指向字符串的指针，若已存在则直接返回指针&quot; class=&quot;headerlink&quot; title=&quot;创建一个指向字符串的指针，若已存在则直接返回指针&quot;&gt;&lt;/a&gt;创建一个指向字符串的指针，若已存在则直接返回指针&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Constant *CreateWords(Module *mod, string str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//look up the word &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; global value table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	string mystr = &lt;span class=&quot;string&quot;&gt;&quot;%%&quot;&lt;/span&gt; + str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GlobalValue *my_name = mod-&amp;gt;getNamedValue(mystr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (my_name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		GlobalVariable *my_global = cast &amp;lt;GlobalVariable&amp;gt; (my_name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ConstantInt* const_int = ConstantInt::get(mod-&amp;gt;getContext(), APInt(32, 0));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		std::vector&amp;lt;Constant*&amp;gt; const_ptr_indices;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		const_ptr_indices.push_back(const_int);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		const_ptr_indices.push_back(const_int);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Constant* const_ptr = ConstantExpr::getGetElementPtr(my_global, const_ptr_indices);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//ConstantExpr - a constant value that is initialized with an expression using other constant values.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; const_ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; not find it, &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; create a new word &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; global value table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ArrayType *ArrayTy = ArrayType::get(IntegerType::get(mod-&amp;gt;getContext(), 8), str.length()+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GlobalVariable *global_name = new GlobalVariable(*mod, ArrayTy, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									GlobalValue::PrivateLinkage, 0, mystr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	global_name-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Alignment(1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//Constant Definitions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Constant* const_array = ConstantDataArray::getString(mod-&amp;gt;getContext(), str, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //This method constructs a CDS and initializes it with a text string.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ConstantInt* const_int = ConstantInt::get(mod-&amp;gt;getContext(), APInt(32, 0));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	std::vector&amp;lt;Constant*&amp;gt; const_ptr_indices;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	const_ptr_indices.push_back(const_int);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	const_ptr_indices.push_back(const_int);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Constant* const_ptr = ConstantExpr::getGetElementPtr(global_name, const_ptr_indices);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//Global Variable Definitions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	global_name-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Initializer(const_array);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; const_ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;itoa用sprintf替代&quot;&gt;&lt;a href=&quot;#itoa用sprintf替代&quot; class=&quot;headerlink&quot; title=&quot;itoa用sprintf替代&quot;&gt;&lt;/a&gt;itoa用sprintf替代&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int nValue = 80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char* szBuffer = (char *)malloc(20);//分配动态内存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;memset(szBuffer, 0, 20);    //内存块初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sprintf(szBuffer, &lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, nValue);//整数转化为字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;free(szBuffer);        //释放动态分配的内存&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;llvm中调用printf&quot;&gt;&lt;a href=&quot;#llvm中调用printf&quot; class=&quot;headerlink&quot; title=&quot;llvm中调用printf&quot;&gt;&lt;/a&gt;llvm中调用printf&lt;/h3&gt;&lt;p&gt;直接创建一个string类型的字串，然后获取它的地址Value*，调用printf的Function*即可。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Function *&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; = mod-&amp;gt;getFunction(&lt;span class=&quot;string&quot;&gt;&quot;printf&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CallInst *newcall;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	std::vector&amp;lt;Value*&amp;gt; para;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Constant *content = CreateWords(mod, &lt;span class=&quot;string&quot;&gt;&quot;output something\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    para.push_back(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	++i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	newcall = CallInst::Create(&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;, para, &lt;span class=&quot;string&quot;&gt;&quot;printRand&quot;&lt;/span&gt;, i);  //CallInst represents a &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; call，在i指令之前插入一条func_record&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	newcall-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;CallingConv(CallingConv::C);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	newcall-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;TailCall(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	--i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;从Value-得到int类型数据&quot;&gt;&lt;a href=&quot;#从Value-得到int类型数据&quot; class=&quot;headerlink&quot; title=&quot;从Value*得到int类型数据&quot;&gt;&lt;/a&gt;从Value*得到int类型数据&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Value *oneInt = %add = add nsw i32 %call, %total.06&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ConstantInt* CI = dyn_cast&amp;lt;ConstantInt&amp;gt;(oneInt)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Value *ten_int = ConstantInt::get(mod-&amp;gt;getContext(), APInt(32, 10));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ConstantInt* CI = dyn_cast&amp;lt;ConstantInt&amp;gt;(ten_int))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outs() &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;转换成功\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (CI-&amp;gt;getBitWidth() &amp;lt;= 64)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int constIntValue = CI-&amp;gt;getSExtValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        outs() &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;整型值为：&quot;&lt;/span&gt; &amp;lt;&amp;lt; constIntValue &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;    //这里输出10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outs() &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;转换失败！\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;从Value得到string字符串&quot;&gt;&lt;a href=&quot;#从Value得到string字符串&quot; class=&quot;headerlink&quot; title=&quot;从Value得到string字符串&quot;&gt;&lt;/a&gt;从Value得到string字符串&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;有getName方法时：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StringRef oriValue = Funtion.getName(); //Funtion的名字，类型为StringRef&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string mystr = oriValue.str();  //StringRef::str: Get the contents as an std::string.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;无getName方法时（比如要打印整条指令的内容时）：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Instruction *MyIn = &amp;amp;(*it_BB);  //MyIn为一条指令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string mystr(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;raw_string_ostream stream(mystr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stream &amp;lt;&amp;lt; *MyIn;  //重载实现了&amp;lt;&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mystr = stream.str()  //raw_string_ostream::str: Flushes the stream contents to the target string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      //and returns the string&lt;span class=&quot;string&quot;&gt;&#39;s reference.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;从Value得到char-字符串-由string转char-得到&quot;&gt;&lt;a href=&quot;#从Value得到char-字符串-由string转char-得到&quot; class=&quot;headerlink&quot; title=&quot;从Value得到char* 字符串(由string转char*得到)&quot;&gt;&lt;/a&gt;从Value得到char* 字符串(由string转char*得到)&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;string getString = MyIn-&amp;gt;getName().str();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char mystr[100];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;strcpy(mystr, getString.c_str());  //mystr中为函数名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*extern int strcmp(const char *s1,const char *s2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当s1&amp;lt;s2时，返回为负数；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当s1==s2时，返回值= 0；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当s1&amp;gt;s2时，返回正数。*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strcmp(mystr, &lt;span class=&quot;string&quot;&gt;&quot;printf&quot;&lt;/span&gt;) == 0)  //判断mystr是否等于&lt;span class=&quot;string&quot;&gt;&quot;printf&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;调用外部的C函数（生成静态库）&quot;&gt;&lt;a href=&quot;#调用外部的C函数（生成静态库）&quot; class=&quot;headerlink&quot; title=&quot;调用外部的C函数（生成静态库）&quot;&gt;&lt;/a&gt;调用外部的C函数（生成静态库）&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/dlite/article/details/44118865&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LLVM IR和C/C++函数相互调用时的注意事项&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;生成静态库.a:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc -c &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;Int.c &lt;span class=&quot;comment&quot;&gt;#生成printInt.o&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ar -cr libmyprint.a &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;Int.o &lt;span class=&quot;comment&quot;&gt;#printInt.o生成静态库libmyprint.a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./RandSum ../../hello.bc  &lt;span class=&quot;comment&quot;&gt;#插桩生成.bc文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;llc update.bc -o update.s &lt;span class=&quot;comment&quot;&gt;#将插桩后得到的.bc变为.s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc -c update.s -o update.o &lt;span class=&quot;comment&quot;&gt;#将.s变为.o&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc update.o ../../libmyprint.a -o update &lt;span class=&quot;comment&quot;&gt;#将.o与静态库.a生成可执行文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./update  &lt;span class=&quot;comment&quot;&gt;#运行可执行文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;获取指令的操作数和返回值&quot;&gt;&lt;a href=&quot;#获取指令的操作数和返回值&quot; class=&quot;headerlink&quot; title=&quot;获取指令的操作数和返回值&quot;&gt;&lt;/a&gt;获取指令的操作数和返回值&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int operand_num = inst-&amp;gt;getNumOperands();           //获得所有的操作数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;outs() &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;总共&quot;&lt;/span&gt; &amp;lt;&amp;lt; operand_num &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;个操作数&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(int i=0; i&amp;lt;operand_num; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outs() &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;第&quot;&lt;/span&gt; &amp;lt;&amp;lt; i+1 &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;个操作数是：&quot;&lt;/span&gt; &amp;lt;&amp;lt; *inst-&amp;gt;getOperand(i) &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;    //&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;的第2个操作数是字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;outs() &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;返回值是：&quot;&lt;/span&gt;  &amp;lt;&amp;lt; *inst &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n\n&quot;&lt;/span&gt;;   //返回值就是指令本身&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取函数的参数的位置和类型&quot;&gt;&lt;a href=&quot;#获取函数的参数的位置和类型&quot; class=&quot;headerlink&quot; title=&quot;获取函数的参数的位置和类型&quot;&gt;&lt;/a&gt;获取函数的参数的位置和类型&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(myfunc-&amp;gt;isVarArg())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outs() &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;可变参数\n&quot;&lt;/span&gt;;   //如&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(i8*,...)，则是可变参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Function::arg_iterator start = myfunc-&amp;gt;arg_begin(), end = myfunc-&amp;gt;arg_end(); start != end; ++start)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outs() &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;argument:&quot;&lt;/span&gt; &amp;lt;&amp;lt; *start &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;   //获得参数类型和位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //如&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(i8*,...)  则输出argument:i8* %0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;replaceAllUsesWith&quot;&gt;&lt;a href=&quot;#replaceAllUsesWith&quot; class=&quot;headerlink&quot; title=&quot;replaceAllUsesWith&quot;&gt;&lt;/a&gt;replaceAllUsesWith&lt;/h3&gt;&lt;p&gt;replaceUsesOfWith&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;先获取模块中的每个函数，再获取每个函数中的每个BasicBlock，再获取每个BasicBlock中的每条instruction（最常用）&quot;&gt;&lt;a href=&quot;#先获取模块中的每个函数，再获取每个函数中的每个BasicBlock，再获取每个BasicBlock中的每条instruction（最常用）&quot; class=&quot;headerlink&quot; title=&quot;先获取模块中的每个函数，再获取每个函数中的每个BasicBlock，再获取每个BasicBlock中的每条instruction（最常用）&quot;&gt;&lt;/a&gt;先获取模块中的每个函数，再获取每个函数中的每个BasicBlock，再获取每个BasicBlock中的每条instruction（最常用）&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Module::iterator FunIt = mod-&amp;gt;begin() ; FunIt != mod-&amp;gt;end() ; ++FunIt)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Function::iterator b = FunIt-&amp;gt;begin(), e = FunIt-&amp;gt;end(); b != e; ++b)  //获取每个函数中的basic block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cout&amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Basic block name=&quot;&lt;/span&gt; &amp;lt;&amp;lt; b-&amp;gt;getName().str() &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (BasicBlock::iterator i = b-&amp;gt;begin(), e = b-&amp;gt;end(); i != e; ++i)  //获取每个basic block中的instruction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            outs() &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Instruction* inst = &amp;amp;(*i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="LLVM" scheme="http://hujun1413.github.io/categories/LLVM/"/>
    
    
  </entry>
  
  <entry>
    <title>《Linux设备驱动程序》笔记</title>
    <link href="http://hujun1413.github.io/2017/01/11/Linux/Linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://hujun1413.github.io/2017/01/11/Linux/Linux设备驱动程序/</id>
    <published>2017-01-11T12:35:26.000Z</published>
    <updated>2019-03-24T16:37:40.713Z</updated>
    
    <content type="html">&lt;h2 id=&quot;第一章–设备驱动程序简介（P9）&quot;&gt;&lt;a href=&quot;#第一章–设备驱动程序简介（P9）&quot; class=&quot;headerlink&quot; title=&quot;第一章–设备驱动程序简介（P9）&quot;&gt;&lt;/a&gt;第一章–设备驱动程序简介（P9）&lt;/h2&gt;&lt;h3 id=&quot;什么是Linux设备驱动程序（P9）&quot;&gt;&lt;a href=&quot;#什么是Linux设备驱动程序（P9）&quot; class=&quot;headerlink&quot; title=&quot;什么是Linux设备驱动程序（P9）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.csdn.net/yapingmcu/article/details/7400262&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;什么是Linux设备驱动程序&lt;/a&gt;（P9）&lt;/h3&gt;&lt;p&gt;linux驱动处于OS和硬件之间。&lt;br&gt;驱动给OS提供一组设备驱动接口函数（包括open,close,read,ioctl等）&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;为什么研究编写Linux驱动程序（P9）&quot;&gt;&lt;a href=&quot;#为什么研究编写Linux驱动程序（P9）&quot; class=&quot;headerlink&quot; title=&quot;为什么研究编写Linux驱动程序（P9）&quot;&gt;&lt;/a&gt;为什么研究编写Linux驱动程序（P9）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;新硬件问世或硬件过时&lt;/li&gt;
&lt;li&gt;个人用户要了解一些驱动程序知识才能访问设备&lt;/li&gt;
&lt;li&gt;硬件厂商通过提供Linux驱动程序能为自己的产品带来潜在用户群&lt;/li&gt;
&lt;li&gt;Linux开源，驱动程序源码可以在大量用户中迅速流传&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;设备驱动程序的作用（P10）&quot;&gt;&lt;a href=&quot;#设备驱动程序的作用（P10）&quot; class=&quot;headerlink&quot; title=&quot;设备驱动程序的作用（P10）&quot;&gt;&lt;/a&gt;设备驱动程序的作用（P10）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;驱动的作用在于提供机制，而不是提供策略（驱动灵活）&lt;ul&gt;
&lt;li&gt;机制：需要提供什么功能&lt;/li&gt;
&lt;li&gt;策略：如何使用这些功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;介于应用程序和实际设备之间，设计驱动时综合考虑三方面：给用户提供尽可能多的选项，编写驱动占用的时间，尽量保持程序简单而不至于错误丛生&lt;/li&gt;
&lt;li&gt;不带策略的驱动的典型特征：同时支持同步和异步，能被多次打开，充分利用硬件特性，不具备用来“简化任务”的或提供与策略相关的软件层&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;内核功能划分（P12）&quot;&gt;&lt;a href=&quot;#内核功能划分（P12）&quot; class=&quot;headerlink&quot; title=&quot;内核功能划分（P12）&quot;&gt;&lt;/a&gt;内核功能划分（P12）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;进程管理：在单个或多个CPU上实现了多个进程的抽象&lt;/li&gt;
&lt;li&gt;内存管理：内核的不同部分在和内存管理子系统交互时使用一组函数调用&lt;/li&gt;
&lt;li&gt;文件系统：Linux支持多种文件系统类型，也就是在物理介质上组织数据的不同方式&lt;/li&gt;
&lt;li&gt;设备控制：除了处理器和内存等少数对象外，所有设备控制操作都由驱动完成&lt;/li&gt;
&lt;li&gt;网络功能：大部分网络操作和具体进程无关。系统负责在应用程序和网络接口之间传递数据包，并根据网络活动控制程序的执行。所有的路由和地址解析问题都由内核处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;设备和模块的分类（P14）&quot;&gt;&lt;a href=&quot;#设备和模块的分类（P14）&quot; class=&quot;headerlink&quot; title=&quot;设备和模块的分类（P14）&quot;&gt;&lt;/a&gt;设备和模块的分类（P14）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;字符模块：能像字节流（类似文件）一样被访问的设备。字符设备驱动通常至少要实现open，close，read和write系统调用。&lt;/li&gt;
&lt;li&gt;块模块：每次只能传输一个或多个完整的块（512KB或更大），和字符驱动相比具有完全不同的接口。&lt;/li&gt;
&lt;li&gt;网络模块：网络接口可以是硬件设备，也可能是个纯软件设备（回环接口loopback）。只负责发送和接受数据包，eth0在文件系统中不存在对应的节点&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;驱动安全策略（P16）&quot;&gt;&lt;a href=&quot;#驱动安全策略（P16）&quot; class=&quot;headerlink&quot; title=&quot;驱动安全策略（P16）&quot;&gt;&lt;/a&gt;驱动安全策略（P16）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;系统中所有安全检查都是由内核代码进行的，系统调用init_module会检查调用进程是否具有将模块装载到内核的权利。&lt;/li&gt;
&lt;li&gt;尽量避免在驱动代码中实现安全策略。由驱动本身完成的相关安全检查：能影响全局资源的设备操作（设置中断线），可能会破坏硬件（装载固件），影响其他用户（给磁盘驱动器设置默认的块尺寸），这些都只能由root执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;第二章–构造和运行模块（P21）&quot;&gt;&lt;a href=&quot;#第二章–构造和运行模块（P21）&quot; class=&quot;headerlink&quot; title=&quot;第二章–构造和运行模块（P21）&quot;&gt;&lt;/a&gt;第二章–构造和运行模块（P21）&lt;/h2&gt;&lt;h3 id=&quot;核心模块与应用程序的对比（P24）&quot;&gt;&lt;a href=&quot;#核心模块与应用程序的对比（P24）&quot; class=&quot;headerlink&quot; title=&quot;核心模块与应用程序的对比（P24）&quot;&gt;&lt;/a&gt;核心模块与应用程序的对比（P24）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;内核模块都是事件驱动的，模块只是预先注册自己以便服务于将来的某个请求。&lt;/li&gt;
&lt;li&gt;内核模块能调用的函数仅仅是由内核导出的那些函数，而不存在任何可链接的函数库。printk函数缺少对浮点数的支持。&lt;/li&gt;
&lt;li&gt;处理错误的方式不同，应用程序中的段错误是无害的，总是可以使用调试器跟踪到源代码中的问题所在，而一个内核错误即使不影响整个系统，也至少会杀死当前进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;用户空间和内核空间（P25）&quot;&gt;&lt;a href=&quot;#用户空间和内核空间（P25）&quot; class=&quot;headerlink&quot; title=&quot;用户空间和内核空间（P25）&quot;&gt;&lt;/a&gt;用户空间和内核空间（P25）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;OS必须负责程序的独立操作并保护资源不受非法访问，在CPU中实现不同的操作模式（级别）。&lt;/li&gt;
&lt;li&gt;当应用程序执行系统调用或者被硬件中断挂起时（两者由驱动代码提供），Unix将执行模式从用户空间切换到内核空间。执行系统调用的内核代码运行在进程上下文中，它代表调用进程执行操作，能访问进程地址空间的所有数据，而处理硬件中断的内核代码和进程是异步的，与特定进程无关。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;内核中的并发（P26）&quot;&gt;&lt;a href=&quot;#内核中的并发（P26）&quot; class=&quot;headerlink&quot; title=&quot;内核中的并发（P26）&quot;&gt;&lt;/a&gt;内核中的并发（P26）&lt;/h3&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Linux系统中通常正在运行多个并发进程，并且可能有多个进程同时使用我们的驱动程序。&lt;/li&gt;
&lt;li&gt;大多数设备能够中断处理器，而且中断处理程序可能在驱动正试图处理其他任务时被调用。&lt;/li&gt;
&lt;li&gt;有一些软件抽象（如内核定时器）也在异步运行着。&lt;/li&gt;
&lt;li&gt;Linux还可以运行对称多处理器(SMP)系统上，可能同时有不止一个CPU运行着驱动。&lt;/li&gt;
&lt;li&gt;内核代码是可抢占的，即使在单处理器系统上也存在类似多处理器系统的并发问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;版本依赖（P31）&quot;&gt;&lt;a href=&quot;#版本依赖（P31）&quot; class=&quot;headerlink&quot; title=&quot;版本依赖（P31）&quot;&gt;&lt;/a&gt;版本依赖（P31）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;加载模块时会将模块与当前内核树中的vermagic.o链接，用来检查模块和正在运行的内核的兼容性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;内核符号表（P33）&quot;&gt;&lt;a href=&quot;#内核符号表（P33）&quot; class=&quot;headerlink&quot; title=&quot;内核符号表（P33）&quot;&gt;&lt;/a&gt;内核符号表（P33）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;模块被装入内核后，它所导出的任何符号都会变成内核符号表的一部分。&lt;/li&gt;
&lt;li&gt;EXPORT_SYMBOL_GPL(name)导出的模块只能被GPL许可证下的模块使用。这个宏将被扩展为一个全局变量的声明，该变量在模块可执行文件的ELF段中保存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;初始化和关闭-P36&quot;&gt;&lt;a href=&quot;#初始化和关闭-P36&quot; class=&quot;headerlink&quot; title=&quot;初始化和关闭(P36)&quot;&gt;&lt;/a&gt;初始化和关闭(P36)&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static int __init record_init_module(void)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void __&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; record_&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;_module(void)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;module_init(record_init_module);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;module_&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(record_&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;_module);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;__init表示仅在初始化使用；在模块装载结束后，模块装载器会将初始化函数扔掉。&lt;/p&gt;
&lt;p&gt;只要你的模块依赖关系正确（可以通过depmod设置），你就可以通过modprobe 命令加载而不需要知道具体模块文件位置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#define __init __attribute__((__section__(&amp;quot;.init.text&amp;quot;)) __cold&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;将作用的函数或数据放入指定名为&amp;quot;.init.text&amp;quot;的输入段。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当内核启动完毕后，.init.text段中的内存会被释放掉供其他使用。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入段和输出段是相对于要生成最终的elf或binary时的Link过程说的，Link过程的输入大都是由源代码编绎生成的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;目标文件.o，那么这些.o文件中包含的段相对link过程来说就是输入段，而Link的输出一般是可执行文件elf或库等&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只有内核未被配置为支持热拔插设备时，__devinit和__devinitdata才会被翻译为__init和__initdata(用于数据定义)&lt;/p&gt;
&lt;p&gt;能够注册的设施包括：串口，杂项设备，sysfs入口，/proc文件，可执行域和线路规程（line discipline）&lt;/p&gt;
&lt;p&gt;如果一个模块未定义清除函数，则内核不允许卸载该模块。&lt;/p&gt;
&lt;h3 id=&quot;初始化过程中的错误处理（P37）&quot;&gt;&lt;a href=&quot;#初始化过程中的错误处理（P37）&quot; class=&quot;headerlink&quot; title=&quot;初始化过程中的错误处理（P37）&quot;&gt;&lt;/a&gt;初始化过程中的错误处理（P37）&lt;/h3&gt;&lt;p&gt;错误恢复的处理有时使用goto语句比较有效。&lt;br&gt;Linux中，错误编码是定义在&lt;linux errno.h=&quot;&quot;&gt;中的负整数。&lt;/linux&gt;&lt;/p&gt;
&lt;h3 id=&quot;模块装载竞争（P40）&quot;&gt;&lt;a href=&quot;#模块装载竞争（P40）&quot; class=&quot;headerlink&quot; title=&quot;模块装载竞争（P40）&quot;&gt;&lt;/a&gt;模块装载竞争（P40）&lt;/h3&gt;&lt;p&gt;在用来支持某个设施的所有内部初始化完成之前，不要注册任何设施。&lt;/p&gt;
&lt;h3 id=&quot;模块参数化（P40）&quot;&gt;&lt;a href=&quot;#模块参数化（P40）&quot; class=&quot;headerlink&quot; title=&quot;模块参数化（P40）&quot;&gt;&lt;/a&gt;模块参数化（P40）&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module_param(bugfile, charp, S_IRUGO);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;module_param_array(name, &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;, num, perm)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们需要的类型不在内核支持的模块参数类型里，模块代码中的钩子可让我们来定义这些类型。&lt;/p&gt;
&lt;p&gt;所有的模块参数都应该给定一个默认值，insmod只会在用户明确设置了参数的值的情况下才会改变参数的值。&lt;/p&gt;
&lt;p&gt;最后一个参数perm是访问许可值，它用来控制谁能访问sysfs中对模块参数的表述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0表示不会有对应的sysfs入口项；否则模块参数会在/sys/module中出现，并设置为给定的访问许可。&lt;/li&gt;
&lt;li&gt;S_IRUGO，任何人均可读取该参数，但不能修改&lt;/li&gt;
&lt;li&gt;S_IRUGO|S_IWUSR，允许root用户修改该参数。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;在用户空间编写驱动程序（P42）&quot;&gt;&lt;a href=&quot;#在用户空间编写驱动程序（P42）&quot; class=&quot;headerlink&quot; title=&quot;在用户空间编写驱动程序（P42）&quot;&gt;&lt;/a&gt;在用户空间编写驱动程序（P42）&lt;/h3&gt;&lt;p&gt;用户空间驱动程序的优缺点&lt;/p&gt;
&lt;h2 id=&quot;第三章–字符设备驱动程序（P46）&quot;&gt;&lt;a href=&quot;#第三章–字符设备驱动程序（P46）&quot; class=&quot;headerlink&quot; title=&quot;第三章–字符设备驱动程序（P46）&quot;&gt;&lt;/a&gt;第三章–字符设备驱动程序（P46）&lt;/h2&gt;&lt;h3 id=&quot;主设备号和次设备号（P47）&quot;&gt;&lt;a href=&quot;#主设备号和次设备号（P47）&quot; class=&quot;headerlink&quot; title=&quot;主设备号和次设备号（P47）&quot;&gt;&lt;/a&gt;主设备号和次设备号（P47）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对字符设备的访问是通过文件系统内的设备名称进行的。那些名称被称为特殊文件、设备文件，或者简单称之为文件系统树的节点。通常位于/dev目录、&lt;/li&gt;
&lt;li&gt;ls - l的修改日期前用逗号分隔的两个数，主设备号， 从设备号&lt;/li&gt;
&lt;li&gt;尽管现代的Linux内核允许多个驱动程序共享主设备号，但大部分是“一个主设备号对应一个驱动程序”。次设备号用来后的一个指向内核设备的直接指针。&lt;/li&gt;
&lt;li&gt;dev_t（在&lt;linux types.h=&quot;&quot;&gt;中定义）用来保存设备编号，12+20位。使用&lt;linux kdev_t.h=&quot;&quot;&gt;中定义的宏获得：&lt;ul&gt;
&lt;li&gt;MAJOR(dev_t dev) &lt;/li&gt;
&lt;li&gt;MINOR(dev_t dev) &lt;/li&gt;
&lt;li&gt;MKDEV(int major, int minor)&lt;/li&gt;
&lt;/ul&gt;
&lt;/linux&gt;&lt;/linux&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分配和释放设备编号（P49）&quot;&gt;&lt;a href=&quot;#分配和释放设备编号（P49）&quot; class=&quot;headerlink&quot; title=&quot;分配和释放设备编号（P49）&quot;&gt;&lt;/a&gt;分配和释放设备编号（P49）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;静态获得设备编号：在&lt;linux fs.h=&quot;&quot;&gt;中，int register_chrdev_region(dev_t first, unsigned int count, char* name)，first为分配的设备编号的起始值，常为0，count为连续设备的个数，name为设备名称&lt;/linux&gt;&lt;/li&gt;
&lt;li&gt;动态分配主设备号：alloc_chrdev_region&lt;/li&gt;
&lt;li&gt;释放设备编号：unregister_chrdev_region&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;动态分配主设备号（P50）&quot;&gt;&lt;a href=&quot;#动态分配主设备号（P50）&quot; class=&quot;headerlink&quot; title=&quot;动态分配主设备号（P50）&quot;&gt;&lt;/a&gt;动态分配主设备号（P50）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;动态分配的缺点：由于分配的主设备号不能保证始终不变，所以无法预先创建设备节点。但分配完设备号可从/proc/devices中读取&lt;/li&gt;
&lt;li&gt;scull_load, scull_init&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;一些重要的数据结构（53P）&quot;&gt;&lt;a href=&quot;#一些重要的数据结构（53P）&quot; class=&quot;headerlink&quot; title=&quot;一些重要的数据结构（53P）&quot;&gt;&lt;/a&gt;一些重要的数据结构（53P）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;大部分基本的驱动程序操作涉及到三个重要的内核数据结构，分别是：file_operations,file,inode&lt;/li&gt;
&lt;li&gt;file_operations（&lt;linux fs.h=&quot;&quot;&gt;中）结构用来将驱动程序操作连接到设备编号，其中包含每个打开的文件和一组函数关联&lt;/linux&gt;&lt;/li&gt;
&lt;li&gt;file_operations结构或指向这类结构的指针称为fops，结构中的每个字段都必须指向驱动中实现特定操作的函数，对于不支持的操作字段置为NULL。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;file_operations结构的字段介绍：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;owner 避免在模块的操作正在被使用时卸载该模块&lt;/li&gt;
&lt;li&gt;llseek 设置为NULL,调用seek将以不可预期的方式修改file结构中的位置计数器。&lt;/li&gt;
&lt;li&gt;read 设置为NULL，调用read将出错并返回-EINVAL&lt;/li&gt;
&lt;li&gt;aio_read 初始化一个异步的读取操作，设置为NULL将通过read（同步）处理&lt;/li&gt;
&lt;li&gt;write&lt;/li&gt;
&lt;li&gt;readdir 仅用于读取目录，只对文件系统有用&lt;/li&gt;
&lt;li&gt;poll 是poll,epoll,select这三个系统调用的后端实现&lt;/li&gt;
&lt;li&gt;ioctl 提供了一种执行设备特定命令（如格式化软盘）的方法。&lt;/li&gt;
&lt;li&gt;mmap 将设备内存映射到进程地址空间&lt;/li&gt;
&lt;li&gt;open 若为NULL，打开永远成功，但系统不会通知驱动&lt;/li&gt;
&lt;li&gt;flush 调用发生在进程关闭设备文件描述符副本的时候，它执行（并等待）设备上尚未完结的操作。&lt;/li&gt;
&lt;li&gt;release file结构被释放时调用，并不是每次调用close时都会被调用&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;file结构（在&lt;linux fs.h=&quot;&quot;&gt;中）代表一个打开的文件，在open时创建，通常将该指针称为filp&lt;/linux&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;inode结构在内部表示文件。对单个文件，可能有许多个表示打开的文件描述符的file结构，但是都指向单个inode结构。struct cdev是表示字符设备的内核的内部结构。用iminor和imajor来获取主从设备号，而不是直接操作i_rdev&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;字符设备的注册（P60）&quot;&gt;&lt;a href=&quot;#字符设备的注册（P60）&quot; class=&quot;headerlink&quot; title=&quot;字符设备的注册（P60）&quot;&gt;&lt;/a&gt;字符设备的注册（P60）&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;linux/cdev.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;运行时获取一个独立的cdev结构：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct cdev *my_cdev = cdev_alloc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;my_cdev-&amp;gt;ops = &amp;amp;my_fops;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;将cdev结构嵌入到自己的设备特定结构中：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cdev_init(&amp;amp;dev-&amp;gt;cdev, &amp;amp;scull_fops);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dev-&amp;gt;cdev.owner = THIS_MODULE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dev-&amp;gt;cdev.ops = &amp;amp;scull_fops;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;err = cdev_add (&amp;amp;dev-&amp;gt;cdev, devno, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cdev_del(&amp;amp;scull_devices[i].cdev);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;open和release&quot;&gt;&lt;a href=&quot;#open和release&quot; class=&quot;headerlink&quot; title=&quot;open和release&quot;&gt;&lt;/a&gt;open和release&lt;/h3&gt;&lt;h4 id=&quot;open&quot;&gt;&lt;a href=&quot;#open&quot; class=&quot;headerlink&quot; title=&quot;open&quot;&gt;&lt;/a&gt;open&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;检查设备错误（设备未就绪）&lt;/li&gt;
&lt;li&gt;更新f_op指针，填写filp-&amp;gt;private_data&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;release&quot;&gt;&lt;a href=&quot;#release&quot; class=&quot;headerlink&quot; title=&quot;release&quot;&gt;&lt;/a&gt;release&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;释放filp-&amp;gt;private_data中的内容&lt;/li&gt;
&lt;li&gt;最后一次close时被调用&lt;/li&gt;
&lt;li&gt;dup和fork系统调用都会在不掉用open的情况下创建已打开文件的副本。&lt;/li&gt;
&lt;li&gt;flush方法在应用程序每次调用close时都会被调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;read和write&quot;&gt;&lt;a href=&quot;#read和write&quot; class=&quot;headerlink&quot; title=&quot;read和write&quot;&gt;&lt;/a&gt;read和write&lt;/h3&gt;&lt;h2 id=&quot;积累&quot;&gt;&lt;a href=&quot;#积累&quot; class=&quot;headerlink&quot; title=&quot;积累&quot;&gt;&lt;/a&gt;积累&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Unix图形显示器的管理分为X服务器+窗口和会话管理器&lt;/li&gt;
&lt;li&gt;软驱的驱动程序不带策略，它的作用是将磁盘表示为一个连续的数据块阵列。系统高层提供策略&lt;/li&gt;
&lt;li&gt;许多驱动是同用户程序一起发行的：比如，用来调整并口打印机驱动程序工作方式的tunelp程序；作为PCMCIA驱动程序包一部分的图形化cardctl工具。还会有一个客户程序库，它提供不必在驱动本身实现的功能&lt;/li&gt;
&lt;li&gt;不同进程之间的通信方式：信号，管道，进程间通信原语&lt;/li&gt;
&lt;li&gt;磁盘可以格式化为符合Linux标准的ext3文件系统，也可以格式化为常用的FAT文件系统或者其他种类&lt;/li&gt;
&lt;li&gt;字符终端（/dev/console）和串口（/dev/ttys0以及类似设备）是字符设备。字符设备可以通过文件系统节点来访问，比如/dev/tty1和/dev/lp0。&lt;/li&gt;
&lt;li&gt;偶数编号的内核版本（如2.6.x）是正式发行的稳定版本，而奇数编号的版本（如2.7.x）则是开发过程中的一个快照，将很快被下一个开发版本不同。&lt;/li&gt;
&lt;li&gt;如何将内核内存映射到用户空间（即mmap系统调用），如何将用户内存映射到内核空间（即get_user_pages），如何将这两种内存映射到设备空间（执行DMA操作）&lt;/li&gt;
&lt;li&gt;竞态问题：不同的执行顺序导致不同的，非预期行为发生。&lt;/li&gt;
&lt;li&gt;current是一个执行struct task_struct的指针，current隐藏在内核栈中，便于current被频繁引用。&lt;/li&gt;
&lt;li&gt;内核具有很小的栈，可能只有一个4096字节大小的页那么小，我们自己的函数必须和整个内核空间调用链一同共享这个栈。&lt;/li&gt;
&lt;li&gt;insmod依赖于定义在kernel/module.c中的一个系统调用，函数sys_init_module给模块分配内核内存（vmalloc负责内存分配）&lt;/li&gt;
&lt;li&gt;系统调用的名字前都带有sys_前缀&lt;/li&gt;
&lt;li&gt;modprobe也用来将模块加载到内核，但若模块引用了内核中不存在的符号时，它会在当前模块搜索路径（标准的已安装模块目录）中查找定义了这些符号的其他模块，并将这些模块也装载到内核。而insmod则会失败，提示”unresolved symbols”。&lt;/li&gt;
&lt;li&gt;lsmod读取sysfs虚拟文件系统中/proc/modules虚拟文件&lt;/li&gt;
&lt;li&gt;查看系统日志文件（/var/log/messages或者系统配置使用的文件）&lt;/li&gt;
&lt;li&gt;IA-32（Intel Architecture 32 bit），常被称为i386,x86-32,x86。&lt;/li&gt;
&lt;li&gt;SCSI接口：系统级接口的独立处理器标准。SCSI使驱动器和计算机内部安装的SCSI适配器进行通信。&lt;/li&gt;
&lt;li&gt;通过sysfs访问设备信息，在/sys目录下反映了这个机器的系统状况。sysfs文件系统是一个类似于proc文件系统的特殊文件系统，用于将系统中的设备组织成层次结构，并向用户模式程序提供详细的内核数据结构信息。&lt;/li&gt;
&lt;li&gt;不应该将非kmalloc返回的指针传递个kfree，但是将NULL传递给kfree是合法的&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章–设备驱动程序简介（P9）&quot;&gt;&lt;a href=&quot;#第一章–设备驱动程序简介（P9）&quot; class=&quot;headerlink&quot; title=&quot;第一章–设备驱动程序简介（P9）&quot;&gt;&lt;/a&gt;第一章–设备驱动程序简介（P9）&lt;/h2&gt;&lt;h3 id=&quot;什么是Linux设备驱动程序（P9）&quot;&gt;&lt;a href=&quot;#什么是Linux设备驱动程序（P9）&quot; class=&quot;headerlink&quot; title=&quot;什么是Linux设备驱动程序（P9）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.csdn.net/yapingmcu/article/details/7400262&quot;&gt;什么是Linux设备驱动程序&lt;/a&gt;（P9）&lt;/h3&gt;&lt;p&gt;linux驱动处于OS和硬件之间。&lt;br&gt;驱动给OS提供一组设备驱动接口函数（包括open,close,read,ioctl等）&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://hujun1413.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>LLVM的函数</title>
    <link href="http://hujun1413.github.io/2016/11/14/LLVM/2.LLVM%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>http://hujun1413.github.io/2016/11/14/LLVM/2.LLVM的函数/</id>
    <published>2016-11-14T10:35:26.000Z</published>
    <updated>2018-08-27T08:54:25.295Z</updated>
    
    <content type="html">&lt;h3 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/opensource/os-createcompilerllvm1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用LLVM框架创建一个工作编译器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;通过在doxygen的Classes中的Class Index来查找Function等类和里面的函数，然后点击右上角的List of all members&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Module&quot;&gt;&lt;a href=&quot;#Module&quot; class=&quot;headerlink&quot; title=&quot;Module&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/doxygen/classllvm_1_1Module-members.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Module&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;LLVM 模块类是其他所有 LLVM IR 对象的顶级容器。LLVM 模块类能够包含全局变量、函数、该模块所依赖的其他模块和符号表等对象的列表。这里将提供了 LLVM 模块的构造函数：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;explicit Module(StringRef ModuleID, LLVMContext&amp;amp; C);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 创建Context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LLVMContext&amp;amp; context = getGlobalContext();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 创建Module&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Module* module = new Module(&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;, context);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Function&quot;&gt;&lt;a href=&quot;#Function&quot; class=&quot;headerlink&quot; title=&quot;Function&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/doxygen/classllvm_1_1Function-members.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Function&lt;/a&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//构造一个函数的类型：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FunctionType * FunctionType::get(Type* Result, ArrayRef&amp;lt; Type* &amp;gt; Params, bool isVarArg)	[static]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//声明一个函数(先判断是否存在，若不存在则create)：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static Function* llvm::Function::Create(FunctionType* Ty, LinkageTypes 	Linkage, const Twine&amp;amp; N = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Module* M = nullptr)	[inline, static]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void llvm::Function::&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;CallingConv(CallingConv::ID CC)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Attributes(const AttrListPtr &amp;amp;attrs) //与4.0的文档不一样&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//4.0文档中是：Function::&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Attributes(AttributeSet Attrs)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Instruction&quot;&gt;&lt;a href=&quot;#Instruction&quot; class=&quot;headerlink&quot; title=&quot;Instruction&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/doxygen/classllvm_1_1Instruction-members.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Instruction&lt;/a&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//返回Instruction所在的BasicBlock*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BasicBlock* llvm::Instruction::getParent()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Loop&quot;&gt;&lt;a href=&quot;#Loop&quot; class=&quot;headerlink&quot; title=&quot;Loop&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/doxygen/classllvm_1_1Loop-members.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Loop&lt;/a&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//Return &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; the specified basic block is &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; this loop.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bool llvm::LoopBase&amp;lt; BlockT, LoopT &amp;gt;::contains	(	const BlockT * 	BB	)	const&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/opensource/os-createcompilerllvm1/&quot;&gt;使用LLVM框架创建一个工作编译器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;通过在doxygen的Classes中的Class Index来查找Function等类和里面的函数，然后点击右上角的List of all members&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LLVM" scheme="http://hujun1413.github.io/categories/LLVM/"/>
    
    
  </entry>
  
  <entry>
    <title>虚拟机中编译Linux内核</title>
    <link href="http://hujun1413.github.io/2016/11/13/Linux/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%BC%96%E8%AF%91Linux%E5%86%85%E6%A0%B8/"/>
    <id>http://hujun1413.github.io/2016/11/13/Linux/虚拟机中编译Linux内核/</id>
    <published>2016-11-13T12:35:26.000Z</published>
    <updated>2019-03-24T12:52:47.776Z</updated>
    
    <content type="html">&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/zhangnn5/article/details/6766693&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/zhangnn5/article/details/6766693&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;下载Linux源码&quot;&gt;&lt;a href=&quot;#下载Linux源码&quot; class=&quot;headerlink&quot; title=&quot;下载Linux源码&quot;&gt;&lt;/a&gt;下载Linux源码&lt;/h3&gt;&lt;p&gt;安装编译内核所需软件包&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt-get install build-essential kernel-package libncurses5-dev fakeroot 选择Y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在官网下载源码包：&lt;br&gt;&lt;a href=&quot;http://www.kernel.org/pub/linux/kernel/v3.x/linux-1.1.1.tar.xz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.kernel.org/pub/linux/kernel/v3.x/linux-1.1.1.tar.xz&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置内核&quot;&gt;&lt;a href=&quot;#配置内核&quot; class=&quot;headerlink&quot; title=&quot;配置内核&quot;&gt;&lt;/a&gt;配置内核&lt;/h3&gt;&lt;h4 id=&quot;放到-usr-src文件夹下，解压：&quot;&gt;&lt;a href=&quot;#放到-usr-src文件夹下，解压：&quot; class=&quot;headerlink&quot; title=&quot;放到/usr/src文件夹下，解压：&quot;&gt;&lt;/a&gt;放到/usr/src文件夹下，解压：&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /usr/src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -Jxvf linux-3.19.3.tar.xz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;编译配置内核&quot;&gt;&lt;a href=&quot;#编译配置内核&quot; class=&quot;headerlink&quot; title=&quot;编译配置内核&quot;&gt;&lt;/a&gt;编译配置内核&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; linux-3.19.3  (&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;命令进入源码目录)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make mrproper （得到源代码后,将其净化）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp /boot/config-&lt;span class=&quot;string&quot;&gt;&#39;uname -r&#39;&lt;/span&gt;-generic ./.config （&lt;span class=&quot;string&quot;&gt;&#39;uname -r&#39;&lt;/span&gt;-generic指现版本内核）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make menuconfig（对内核选项进行配置，不需要配置，直接enter）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#若make menuconfig失败，执行apt-get install libncurses5-dev&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make clean （删除配置时留下的一些不用的文件）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;编译内核（需要很长时间，我用了有两小时，请耐心等待）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make bzImage -j4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make modules -j4 （编译模块）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;安装新内核&quot;&gt;&lt;a href=&quot;#安装新内核&quot; class=&quot;headerlink&quot; title=&quot;安装新内核&quot;&gt;&lt;/a&gt;安装新内核&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;make modules_install   （安装模块）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;启动新内核&quot;&gt;&lt;a href=&quot;#启动新内核&quot; class=&quot;headerlink&quot; title=&quot;启动新内核&quot;&gt;&lt;/a&gt;启动新内核&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/etc/default/grub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/boot/grub/grub.cfg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;制作启动盘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo mkinitramfs 3.19.3 -o /boot/initrd.img-3.19.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grep menuentry /boot/grub/grub.cfg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;根据内核的顺序选择第K个，赋值给/etc/default/grub中的GRUB_DEFAULT=K-1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;更新grub2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo update-grub2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;更改grub启动项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;‘GRUB_SAVEDEFAULT’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If this option is &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; to ‘&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;’, &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;, when an entry is selected, save it as a new default entry &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; use by future runs of GRUB. This is only useful &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ‘GRUB_DEFAULT=saved’; it is a separate option because ‘GRUB_DEFAULT=saved’ is useful without this option, &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; conjunction with grub2-set-default. Unset by default. This option relies on the environment block, &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; may not be available &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; all situations (see Environment block).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;‘GRUB_DEFAULT’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If you &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; this to ‘saved’, &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; the default menu entry will be that saved by ‘GRUB_SAVEDEFAULT’ or grub2-set-default. This relies on the environment block, &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; may not be available &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; all situations (see Environment block). &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者直接GRUB_DEFAULT=“Ubuntu, Linux 3.1.1”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;将自己写的驱动编译进内核&quot;&gt;&lt;a href=&quot;#将自己写的驱动编译进内核&quot; class=&quot;headerlink&quot; title=&quot;将自己写的驱动编译进内核&quot;&gt;&lt;/a&gt;将自己写的驱动编译进内核&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;将自己写的Monitor文件夹添加到/usr/src/linux-3.1.1/driver/net/&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改/driver/net/目录下的Kconfig文件，在E1000项的下面增加：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;config MONITOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tristate &amp;quot;OSLab(R) MyMonitor driver&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    default m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改/driver/net/Makefile为:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;obj-$(CONFIG_MONITOR) += Monitor/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改/driver/net/Monitor/Makefile为:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;obj-$(CONFIG_MONITOR) += MyMonitor.o&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;执行make menuconfig时找到MONITOR对应的描述“OSLab(R) MyMonitor driver”，选择y即可编译进内核，选m即可动态加载进内核&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make menuconfig读取Kconfig的内容然后让用户选择编译方式，用户选择完毕后生成linux-3.1.1/.config文件&lt;/li&gt;
&lt;li&gt;linux-3.1.1/.config文件里面定义了如“CONFIG_SKY2=m”这样的行。&lt;/li&gt;
&lt;li&gt;/driver/net/Makefile文件里面定义了如”obj-$(CONFIG_SKY2) += sky2.o”这样的行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;文件介绍&quot;&gt;&lt;a href=&quot;#文件介绍&quot; class=&quot;headerlink&quot; title=&quot;文件介绍&quot;&gt;&lt;/a&gt;文件介绍&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;vmlinuz是可引导的、压缩的内核&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;initrd.img的作用：initrd.img是Linux启 动过程中很重要的一个文件，如果你编译内核时将一部分功能编译为可加载模块。如果系统的一些设备的驱动编译为可加载模，那么启动时如果没有指定 INITRD=/path_to_initrd.img，那么系统启动或者会失败，或者启动后会有设备无法使用（像网卡或者其它设备）。如果没指定initrd.img或者指定的initrd.img中并没有包含正确的驱动模块，则系统启动时会挂起，并报告”kernel panic: VFS: Unable to mount root fs on 08:06”的错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;make modules_install将把编译之后的模块放到/lib/modules/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;系统启动自动加载模块&quot;&gt;&lt;a href=&quot;#系统启动自动加载模块&quot; class=&quot;headerlink&quot; title=&quot;系统启动自动加载模块&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.csdn.net/hunanchenxingyu/article/details/38867931&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;系统启动自动加载模块&lt;/a&gt;&lt;/h3&gt;vim /etc/modules，加入新的一行，写要自动加载的模块名&lt;br&gt;内核模块参考资料：&lt;br&gt;&lt;a href=&quot;http://blog.chinaunix.net/uid-20568790-id-1632313.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅谈linux中的模块加载&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Kernel_modules_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kernel modules (简体中文)&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/zhangnn5/article/details/6766693&quot;&gt;http://blog.csdn.net/zhangnn5/article/details/6766693&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://hujun1413.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>LLVM的IR语言</title>
    <link href="http://hujun1413.github.io/2016/11/10/LLVM/1.LLVM%E7%9A%84IR%E8%AF%AD%E8%A8%80/"/>
    <id>http://hujun1413.github.io/2016/11/10/LLVM/1.LLVM的IR语言/</id>
    <published>2016-11-10T10:35:26.000Z</published>
    <updated>2018-08-27T08:54:45.498Z</updated>
    
    <content type="html">&lt;h2 id=&quot;LLVM-IR&quot;&gt;&lt;a href=&quot;#LLVM-IR&quot; class=&quot;headerlink&quot; title=&quot;LLVM IR&quot;&gt;&lt;/a&gt;LLVM IR&lt;/h2&gt;&lt;p&gt;根据编译原理知识，编译器不是直接将源语言翻译为目标语言，而是翻译为一种“中间语言”，我们编译器从业人员称之为“IR”&lt;br&gt;传统的静态编译器分为三个阶段：前端、优化和后端。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;LLVM IR主要有三种格式：一种是在内存中的编译中间语言(我们无法通过文件的形式得到)；一种是硬盘上存储的二进制中间语言（以.bc结尾），最后一种是可读的中间格式（以.ll结尾）。这三种中间格式是完全相等的。&lt;br&gt;&lt;a href=&quot;http://llvm.org/docs/LangRef.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LLVM Language Reference Manual&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_49b6b6d001011gik.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LLVM的IR基本语法简介&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/qq_17722211/article/details/49080191&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;llvm之IR手册翻译&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/starspringcloud/article/details/50782579&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LLVM Language Reference Manual翻译&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Module-Structure&quot;&gt;&lt;a href=&quot;#Module-Structure&quot; class=&quot;headerlink&quot; title=&quot;Module Structure&quot;&gt;&lt;/a&gt;Module Structure&lt;/h2&gt;&lt;p&gt;在一般情况下，一个模块的组成：函数和全局变量类的全局值、一个指向一个存储器位置指针（在本例，一个指向字符数组，和一个指针的函数），和linker type（详见下文）。&lt;/p&gt;
&lt;h2 id=&quot;Named-Metadata&quot;&gt;&lt;a href=&quot;#Named-Metadata&quot; class=&quot;headerlink&quot; title=&quot;Named Metadata&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/docs/LangRef.html#namedmetadatastructure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Named Metadata&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;; Some unnamed metadata nodes, which are referenced by the named metadata.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!0 = !&amp;#123;!&amp;quot;zero&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!1 = !&amp;#123;!&amp;quot;one&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!2 = !&amp;#123;!&amp;quot;two&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;; A named metadata.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!name = !&amp;#123;!0, !1, !2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以通过!1 Metadata 获得 IR 指令对应的源代码的行数,文件名等信息。&lt;/p&gt;
&lt;h2 id=&quot;Linkage-Types&quot;&gt;&lt;a href=&quot;#Linkage-Types&quot; class=&quot;headerlink&quot; title=&quot;Linkage Types&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/docs/LangRef.html#linkage-types&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linkage Types&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;所有的全局变量和函数具有以下链接类型之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;private（私有）：全局值“私有”只能直接被当前模块中的对象访问。特别是，连接代码到一个存在私有全局值的模块可能导致私有全局值必须被重新命名，以避免冲突。因为该符号是该模块私有的，因此所有的引用可以被更新。这不会显示在对象文件的任何符号表中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;internal（内部）：类似于私有的，但该值在对象文件中作为本地符号（在ELF情况下是STB_LOCAL）。这对应于C的“static”关键字的概念。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;available_externally（外部可用）：。链接类型为“外部可用”的全局值不会被输出到对象文件，即对应于LLVM模块。它们的存在是为了当给定“全局定义”（它是被某个模块以外的地方所知道的）的知识时，允许内联和其他优化发生。全局值链接类型为外部可用时允许被随意丢弃，并且允许内联和其他优化。这种链接类型只允许定义，没有声明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;linkonce：链接类型为“linkonce”的全局值在链接时和其他同名的全局变量进行合并。这可以被用来实现某些形式的内联函数，模板，或其他必须在每个使用它的转换单元中生成的代码，这些代码可以被稍后更明确的定义覆盖（重写）。未引用的linkonce全局值允许被丢弃。Note that linkonce linkage does not actually allow the optimizer to inline the body of this function into callers。需要注意的是链接类型为linkonce的全局值实际上并不允许优化来使这个函数内联到调用者，因为它不知道函数的这个定义是在这个程序中最后的定义，还是将会被一个更强的定义所覆盖。为了enable（使能，启用）内联和其他优化，使用“linkonce odr”的链接类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;weak：“weak”链接类型和“linkonece”在合并的语义上是相同的，所不同的是未引用的”weak”全局变量可能不会被丢弃。这是用于C语言源代码中声明为“weak”的全局变量。&lt;/li&gt;
&lt;li&gt;common：“common”链接类型和“weak”最相似，但它在C中被用于在全局范围内试探性的定义，如“int X;”。“common”链接类型的符号和“weak”以同样的方式被合并，并且它们如果未被引用可能不被删除。”common”符号可能没有一个明确的值，必须有一个零初始化，并且可能不被标记为“常量”。函数和别名可能没有“common”链接类型。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;appending：“appending”链接类型仅可以被应用到指向数组类型的指针的全局变量。当两个“appending”链接类型的全局变量被链接在一起时，这两个全局数组附加在一起。这是LLVM，类型安全，相当于当.o文件链接时，其系统链接将具有完全相同的名称的“部分”附加在一起。&lt;br&gt;很不幸，这不对应.o文件中的任何特征，因此它只能用于像llvm.global_ctors这种被llvm专门解释的变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;extern_weak：这种链接类型的语义遵循ELF目标文件模型：符号在被链接前是”weak”类型，如果没有被链接，该符号变为null，而不是作为一个未被定义的引用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;linkonce_odr, weak_odr：某些语言允许不同的全局值被合并，比如两个具有不同语义的函数。其他语言，如C++，确保只有相同的全局值可以被合并（即“one definition rule” - “ODR”）。这些语言可以使用linkonce_odr和weak_odr链接类型用来指示该全局值将只与相同的全局值合并。否则这些链接类型是非ODR版本。&lt;/li&gt;
&lt;li&gt;external：如果上述标识符都没有被使用，那么这个全局变量就是外部可见的，这意味着它参与链接，并可以用于解决外部符号引用。&lt;br&gt;对于一个函数只能声明为external或者extern_weak链接类型。&lt;h2 id=&quot;Calling-Conventions&quot;&gt;&lt;a href=&quot;#Calling-Conventions&quot; class=&quot;headerlink&quot; title=&quot;Calling Conventions&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/docs/LangRef.html#calling-conventions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Calling Conventions&lt;/a&gt;&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;“ccc”&lt;/li&gt;
&lt;li&gt;“fastcc”&lt;/li&gt;
&lt;li&gt;“coldcc”&lt;/li&gt;
&lt;li&gt;“cc 10”&lt;/li&gt;
&lt;li&gt;“cc 11”&lt;/li&gt;
&lt;li&gt;“webkit_jscc”&lt;/li&gt;
&lt;li&gt;“anyregcc”&lt;/li&gt;
&lt;li&gt;“preserve_mostcc”&lt;/li&gt;
&lt;li&gt;“preserve_allcc”&lt;/li&gt;
&lt;li&gt;“cxx_fast_tlscc”&lt;/li&gt;
&lt;li&gt;“swiftcc”&lt;/li&gt;
&lt;li&gt;“cc &lt;n&gt;“&lt;h2 id=&quot;Visibility-Styles&quot;&gt;&lt;a href=&quot;#Visibility-Styles&quot; class=&quot;headerlink&quot; title=&quot;Visibility Styles&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/docs/LangRef.html#visibility-styles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visibility Styles&lt;/a&gt;&lt;/h2&gt;&lt;/n&gt;&lt;/li&gt;
&lt;li&gt;“default”&lt;/li&gt;
&lt;li&gt;“hidden”&lt;/li&gt;
&lt;li&gt;“protected”&lt;h2 id=&quot;DLL-Storage-Classes&quot;&gt;&lt;a href=&quot;#DLL-Storage-Classes&quot; class=&quot;headerlink&quot; title=&quot;DLL Storage Classes&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/docs/LangRef.html#dll-storage-classes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DLL Storage Classes&lt;/a&gt;&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;“dllimport”&lt;/li&gt;
&lt;li&gt;“dllexport”&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;简单举例：&quot;&gt;&lt;a href=&quot;#简单举例：&quot; class=&quot;headerlink&quot; title=&quot;简单举例：&quot;&gt;&lt;/a&gt;简单举例：&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//hello.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(count &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a &amp;gt; b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            c = a+b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;c1 = %d\n&quot;&lt;/span&gt;,c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            c = a-b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;c2 = %d\n&quot;&lt;/span&gt;,c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        --count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//hello.ll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;; ModuleID = &#39;hello.c&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target datalayout = &quot;e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target triple = &quot;x86_64-unknown-linux-gnu&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@.str = private unnamed_addr constant [9 x i8] c&quot;c1 = %d\0A\00&quot;, align 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@.str1 = private unnamed_addr constant [9 x i8] c&quot;c2 = %d\0A\00&quot;, align 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;define i32 @main() nounwind uwtable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;entry:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %retval = alloca i32, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %a = alloca i32, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %b = alloca i32, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %c = alloca i32, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %count = alloca i32, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  store i32 0, i32* %retval&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  store i32 1, i32* %a, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  store i32 2, i32* %b, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  store i32 3, i32* %count, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  br label %while.cond&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while.cond:                                       ; preds = %if.end, %entry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %0 = load i32* %count, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %cmp = icmp sgt i32 %0, 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  br i1 %cmp, label %while.body, label %while.end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while.body:                                       ; preds = %while.cond&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %1 = load i32* %a, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %2 = load i32* %b, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %cmp1 = icmp sgt i32 %1, %2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  br i1 %cmp1, label %if.then, label %if.else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if.then:                                          ; preds = %while.body&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %3 = load i32* %a, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %4 = load i32* %b, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %add = add nsw i32 %3, %4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  store i32 %add, i32* %c, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %5 = load i32* %c, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([9 x i8]* @.str, i32 0, i32 0), i32 %5)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  br label %if.end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if.else:                                          ; preds = %while.body&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %6 = load i32* %a, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %7 = load i32* %b, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %sub = sub nsw i32 %6, %7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  store i32 %sub, i32* %c, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %8 = load i32* %c, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %call2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([9 x i8]* @.str1, i32 0, i32 0), i32 %8)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  br label %if.end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if.end:                                           ; preds = %if.else, %if.then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %9 = load i32* %count, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %dec = add nsw i32 %9, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  store i32 %dec, i32* %count, align 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  br label %while.cond&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while.end:                                        ; preds = %while.cond&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ret i32 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;declare i32 @printf(i8*, ...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;代表全局变量，-代表局部变量&quot;&gt;&lt;a href=&quot;#代表全局变量，-代表局部变量&quot; class=&quot;headerlink&quot; title=&quot;@代表全局变量，%代表局部变量&quot;&gt;&lt;/a&gt;@代表全局变量，%代表局部变量&lt;/h3&gt;&lt;h3 id=&quot;alloca&quot;&gt;&lt;a href=&quot;#alloca&quot; class=&quot;headerlink&quot; title=&quot;alloca&quot;&gt;&lt;/a&gt;alloca&lt;/h3&gt;&lt;p&gt;&lt;code&gt;%a = alloca i32, align 4&lt;/code&gt;&lt;br&gt;alloca指令用于分配内存堆栈给当前执行的函数,当这个函数返回其调用者（我自己对于caller的翻译）时自动释放。&lt;br&gt;i32表示32位，4字节，LLVM将整数类型定义为iN，其中N是整数占用的位数，位数为1到223-1&lt;br&gt;align 4表示向4“对齐”：即便数据没有占用4个字节，也要为其分配4字节，这样使得llvm  IR在保证了数据格式一致性的前提条件下，定义数据型时非常灵活，不仅可以任意定义整形和浮点型的长度(iX,iXX,iXXX………)，甚至还允许使用不同的数制，比如你需要使用64进制数字，那就只要i48, align 6即可。&lt;/p&gt;
&lt;h3 id=&quot;getelementptr&quot;&gt;&lt;a href=&quot;#getelementptr&quot; class=&quot;headerlink&quot; title=&quot;getelementptr&quot;&gt;&lt;/a&gt;getelementptr&lt;/h3&gt;&lt;p&gt;getelementptr 的第一个参数是全局字符串变量的指针。要单步执行全局变量的指针，则需要使用第一个索引，即 i32 0。因为 getelementptr 指令的第一个参数必须始终是 pointer 类型的值，所以第一个索引会单步调试该指针。0 值表示从该指针起偏移 0 元素偏移量。我的开发计算机运行的是 32 位 Linux®，所以该指针是 4 字节。第二个索引 (i32 0) 用于选择字符串的第 0 个元素，该元素是作为 printf 的参数来提供的。i32 %8表示传入参数是%8这个整数&lt;/p&gt;
&lt;h3 id=&quot;load-store&quot;&gt;&lt;a href=&quot;#load-store&quot; class=&quot;headerlink&quot; title=&quot;load/store&quot;&gt;&lt;/a&gt;load/store&lt;/h3&gt;&lt;p&gt;&lt;code&gt;%0 = load i32* %a, align 4&lt;/code&gt;&lt;br&gt;load是“装载”，即读出内容&lt;/p&gt;
&lt;p&gt;&lt;code&gt;store i32 1, i32* %a, align 4&lt;/code&gt;&lt;br&gt;store是写入内容&lt;/p&gt;
&lt;h3 id=&quot;判断及跳转icmp-br&quot;&gt;&lt;a href=&quot;#判断及跳转icmp-br&quot; class=&quot;headerlink&quot; title=&quot;判断及跳转icmp/br&quot;&gt;&lt;/a&gt;判断及跳转icmp/br&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;%cmp1 = icmp sgt i32 %1, %2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;br i1 %cmp1, label %if.then, label %if.else&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;二元运算-f-add-f-sub-f-mul-usf-div-usf-rem&quot;&gt;&lt;a href=&quot;#二元运算-f-add-f-sub-f-mul-usf-div-usf-rem&quot; class=&quot;headerlink&quot; title=&quot;二元运算( f)add/( f)sub/( f)mul/(usf)div/(usf)rem&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/docs/LangRef.html#binary-operations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;二元运算( f)add/( f)sub/( f)mul/(usf)div/(usf)rem&lt;/a&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;result&amp;gt; = add nuw nsw &amp;lt;ty&amp;gt; &amp;lt;op1&amp;gt;, &amp;lt;op2&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%add = add nsw i32 %0, %1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;nsw:no signed wrap&lt;br&gt;nuw:no unsigned wrap&lt;br&gt;当溢出时，计算得到的值是&lt;a href=&quot;http://llvm.org/docs/LangRef.html#poison-values&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;poison value&lt;/a&gt;。&lt;br&gt;There is currently no way of representing a poison value in the IR; they only exist when produced by operations such as add with the nsw flag.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;result&amp;gt; = fadd [fast-math flags]* &amp;lt;ty&amp;gt; &amp;lt;op1&amp;gt;, &amp;lt;op2&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;result&amp;gt; = fadd float 4.0, %var&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前头加f的是&lt;a href=&quot;http://llvm.org/docs/LangRef.html#t-floating&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;floating point&lt;/a&gt; or &lt;a href=&quot;http://llvm.org/docs/LangRef.html#t-vector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vector&lt;/a&gt;&lt;br&gt;其中的参数&lt;a href=&quot;http://llvm.org/docs/LangRef.html#fastmath&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fast-math flags&lt;/a&gt;是最优化提示，用来enable otherwise unsafe floating point operations&lt;/p&gt;
&lt;p&gt;加u的返回结果是无符号的int型&lt;br&gt;加s的返回结果是有符号的int型&lt;/p&gt;
&lt;h3 id=&quot;Terminator-Instructions&quot;&gt;&lt;a href=&quot;#Terminator-Instructions&quot; class=&quot;headerlink&quot; title=&quot;Terminator Instructions&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/docs/LangRef.html#terminator-instructions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Terminator Instructions&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;每个basic block（基本块）以终结指令结束，表明下一个被执行的块&lt;/p&gt;
&lt;h4 id=&quot;ret&quot;&gt;&lt;a href=&quot;#ret&quot; class=&quot;headerlink&quot; title=&quot;ret&quot;&gt;&lt;/a&gt;ret&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ret i32 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ret void&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;br&quot;&gt;&lt;a href=&quot;#br&quot; class=&quot;headerlink&quot; title=&quot;br&quot;&gt;&lt;/a&gt;br&lt;/h4&gt;&lt;p&gt;分为跳转到条件分支和无条件分支&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;br i1 &amp;lt;cond&amp;gt;, label &amp;lt;iftrue&amp;gt;, label &amp;lt;iffalse&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;br label &amp;lt;dest&amp;gt;          ; Unconditional branch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;switch&quot;&gt;&lt;a href=&quot;#switch&quot; class=&quot;headerlink&quot; title=&quot;switch&quot;&gt;&lt;/a&gt;switch&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;switch &amp;lt;intty&amp;gt; &amp;lt;value&amp;gt;, label &amp;lt;defaultdest&amp;gt; [ &amp;lt;intty&amp;gt; &amp;lt;val&amp;gt;, label &amp;lt;dest&amp;gt; ... ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;; Emulate a conditional br instruction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%Val = zext i1 %value to i32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch i32 %Val, label %truedest [ i32 0, label %falsedest ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;; Emulate an unconditional br instruction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch i32 0, label %dest [ ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;; Implement a jump table:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch i32 %val, label %otherwise [ i32 0, label %onzero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    i32 1, label %onone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    i32 2, label %ontwo ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;indiretbr&quot;&gt;&lt;a href=&quot;#indiretbr&quot; class=&quot;headerlink&quot; title=&quot;indiretbr&quot;&gt;&lt;/a&gt;indiretbr&lt;/h4&gt;&lt;h4 id=&quot;invoke&quot;&gt;&lt;a href=&quot;#invoke&quot; class=&quot;headerlink&quot; title=&quot;invoke&quot;&gt;&lt;/a&gt;invoke&lt;/h4&gt;&lt;h4 id=&quot;resume&quot;&gt;&lt;a href=&quot;#resume&quot; class=&quot;headerlink&quot; title=&quot;resume&quot;&gt;&lt;/a&gt;resume&lt;/h4&gt;&lt;h4 id=&quot;catchswitch&quot;&gt;&lt;a href=&quot;#catchswitch&quot; class=&quot;headerlink&quot; title=&quot;catchswitch&quot;&gt;&lt;/a&gt;catchswitch&lt;/h4&gt;&lt;h4 id=&quot;catchret&quot;&gt;&lt;a href=&quot;#catchret&quot; class=&quot;headerlink&quot; title=&quot;catchret&quot;&gt;&lt;/a&gt;catchret&lt;/h4&gt;&lt;h4 id=&quot;cleanupret&quot;&gt;&lt;a href=&quot;#cleanupret&quot; class=&quot;headerlink&quot; title=&quot;cleanupret&quot;&gt;&lt;/a&gt;cleanupret&lt;/h4&gt;&lt;h4 id=&quot;unreachable&quot;&gt;&lt;a href=&quot;#unreachable&quot; class=&quot;headerlink&quot; title=&quot;unreachable&quot;&gt;&lt;/a&gt;unreachable&lt;/h4&gt;&lt;h4 id=&quot;‘getelementptr‘-Instruction&quot;&gt;&lt;a href=&quot;#‘getelementptr‘-Instruction&quot; class=&quot;headerlink&quot; title=&quot;‘getelementptr‘ Instruction&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/docs/LangRef.html#getelementptr-instruction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;‘getelementptr‘ Instruction&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://llvm.org/docs/GetElementPtr.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://llvm.org/docs/GetElementPtr.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Source-Level-Debugging-with-LLVM&quot;&gt;&lt;a href=&quot;#Source-Level-Debugging-with-LLVM&quot; class=&quot;headerlink&quot; title=&quot;Source Level Debugging with LLVM&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/docs/SourceLevelDebugging.html#source-level-debugging-with-llvm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Source Level Debugging with LLVM&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/wuhui_gdnt/article/details/68923937?locationNum=12&amp;amp;fps=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/wuhui_gdnt/article/details/68923937?locationNum=12&amp;amp;fps=1&lt;/a&gt;&lt;br&gt;clang -O0 -g可生成完整的调试信息&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LLVM-IR&quot;&gt;&lt;a href=&quot;#LLVM-IR&quot; class=&quot;headerlink&quot; title=&quot;LLVM IR&quot;&gt;&lt;/a&gt;LLVM IR&lt;/h2&gt;&lt;p&gt;根据编译原理知识，编译器不是直接将源语言翻译为目标语言，而是翻译为一种“中间语言”，我们编译器从业人员称之为“IR”&lt;br&gt;传统的静态编译器分为三个阶段：前端、优化和后端。&lt;br&gt;
    
    </summary>
    
      <category term="LLVM" scheme="http://hujun1413.github.io/categories/LLVM/"/>
    
    
  </entry>
  
  <entry>
    <title>LLVM安装及工具链</title>
    <link href="http://hujun1413.github.io/2016/11/09/LLVM/0.LLVM%E5%AE%89%E8%A3%85%E5%8F%8A%E5%B7%A5%E5%85%B7%E9%93%BE/"/>
    <id>http://hujun1413.github.io/2016/11/09/LLVM/0.LLVM安装及工具链/</id>
    <published>2016-11-09T10:35:26.000Z</published>
    <updated>2018-08-27T08:54:53.665Z</updated>
    
    <content type="html">&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在&lt;a href=&quot;http://llvm.org/releases/download.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网下载页&lt;/a&gt;下载LLVM3.2版本的llvm3.2和clang3.2的source code压缩包&lt;/li&gt;
&lt;li&gt;解压后安装：./configure,make,sudo make install&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;什么是LLVM&quot;&gt;&lt;a href=&quot;#什么是LLVM&quot; class=&quot;headerlink&quot; title=&quot;什么是LLVM&quot;&gt;&lt;/a&gt;什么是LLVM&lt;/h3&gt;llvm是low level virtual machine的简称，其实是一个编译器框架。llvm随着这个项目的不断的发展，已经无法完全的代表这个项目了，只是这种叫法一直延续下来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;llvm是一个开源的项目。它最早的时候是Illinois的一个研究项目，主要负责人是Chris Lattner，他现在就职于Apple. Apple 目前也是llvm项目的主要赞助者之一。&lt;/p&gt;
&lt;p&gt;llvm的主要作用是它可以作为多种语言的后端，它可以提供可编程语言无关的优化和针对很多种CPU的代码生成功能。此外llvm目前已经不仅仅是个编程框架，它目前还包含了很多的子项目，比如最具盛名的clang.&lt;/p&gt;
&lt;p&gt;llvm的优点是开源，有一个表达形式很好的IR语言，模块化作的特别好。&lt;/p&gt;
&lt;p&gt;llvm这个框架目前已经有基于这个框架的大量的工具可以使用。&lt;/p&gt;
&lt;h3 id=&quot;LLVM-Command-Guide&quot;&gt;&lt;a href=&quot;#LLVM-Command-Guide&quot; class=&quot;headerlink&quot; title=&quot;LLVM Command Guide&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://llvm.org/docs/CommandGuide/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LLVM Command Guide&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;llvm-as 将人类可读的 .ll 文件汇编成字节代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;llvm-dis 将字节代码文件反编成人类可读的 .ll 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;opt 在一个字节代码文件上运行一系列的 LLVM 到 LLVM 的优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;llc 为一个字节代码文件生成本机器代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;lli 直接运行使用 JIT 编译器或者解释器编译成字节代码的程序(运行.bc文件或.ll文件)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;llvm-link 将几个字节代码文件连接成一个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;llvm-ar 打包字节代码文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;llvm-lib LLVM lib.exe compatible library tool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;llvm-nm 在 打印出LLVM中间格式或者object文件的符号表（2014年5月14日更新）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;llvm-config 打印出配置时 LLVM 编译选项、库、等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;llvm-diff 比较两个模块的结构&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;llvm-ranlib 为 llvm-ar 打包的文件创建索引&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;llvm-prof 将 ‘llvmprof.out’ raw 数据格式化成人类可读的报告&lt;/p&gt;
&lt;p&gt;llvm-ld 带有可装载的运行时优化支持的通用目标连接器&lt;/p&gt;
&lt;p&gt;llvmc 一个通用的可定制的编译器驱动&lt;/p&gt;
&lt;p&gt;bugpoint 自动案例测试减速器&lt;/p&gt;
&lt;p&gt;llvm-extract 从 LLVM 字节代码文件中解压出一个函数&lt;/p&gt;
&lt;p&gt;llvm-bcanalyzer 字节代码分析器 （分析二进制编码本身，而不是它代表的程序）&lt;/p&gt;
&lt;p&gt;FileCheck 灵活的文件验证器，广泛的被测试工具利用&lt;/p&gt;
&lt;p&gt;tblgen 目标描述阅读器和生成器&lt;/p&gt;
&lt;p&gt;lit        LLVM 集成测试器，用于运行测试&lt;/p&gt;
&lt;p&gt;AddressSanitizer  一个快速内存错误探测器&lt;/p&gt;
&lt;h3 id=&quot;LLVM工具链使用&quot;&gt;&lt;a href=&quot;#LLVM工具链使用&quot; class=&quot;headerlink&quot; title=&quot;LLVM工具链使用&quot;&gt;&lt;/a&gt;LLVM工具链使用&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/ggjucheng/archive/2011/12/14/2287738.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linuc GCC常用命令&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc test.c -o &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;                        &lt;span class=&quot;comment&quot;&gt;#直接从源代码生成可执行文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;实际流程：.c--&amp;gt;.i--&amp;gt;.s--&amp;gt;.o--&amp;gt;.elf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc -E test.c -o test.i 或 gcc -E test.c(不生成test.i，只在终端显示)   &lt;span class=&quot;comment&quot;&gt;#预处理Preprocessing（加入包含的库,生成中间文件.i）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc -S test.i -o test.s 或 gcc -S test.i(默认生成test.s)   &lt;span class=&quot;comment&quot;&gt;#编译为汇编Compilation（编译器生成汇编代码.s）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc -c test.s -o test.o 或 gcc -c test.s(默认生成test.o)  &lt;span class=&quot;comment&quot;&gt;#汇编Assembly（汇编器将汇编代码翻译成机器语言指令，把这些指令打包成一种叫做可重定位目标程序格式，并保存在.o文件中）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc test.o -o &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; 或 gcc test.o(默认生成test.o)   &lt;span class=&quot;comment&quot;&gt;#链接Linking（将目标文件链接成可执行文件）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc test.i/test.s/test.o -o &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#均生成可执行文件test.elf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc -O1 test.c -o &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#使用编译优化级别1编译程序。级别为1~3，级别越大优化效果越好，但编译时间越长。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim hello.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clang hello.c -o hello      &lt;span class=&quot;comment&quot;&gt;#生成可执行文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#或者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clang -O3 -emit-llvm hello.c -c -o hello.bc    &lt;span class=&quot;comment&quot;&gt;#生成二进制中间表示语言.bc文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lli hello.bc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#或者：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clang -03 -emit-llvm test.c -S -o test.ll &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#生成人类可读的 .ll 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lli hello.ll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;llvm-dis hello.bc -o hello.ll   &lt;span class=&quot;comment&quot;&gt;#.bc文件反汇编成.ll文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或：llvm-dis &amp;lt; hello.bc (终端显示但不生成.ll文件)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    llvm-dis &amp;lt; hello.bc | less （less打开但不生成.ll文件）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    llvm-dis hello.bc (生成默认的hello.ll文件)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;llvm-as hello.ll -o hello.bc    &lt;span class=&quot;comment&quot;&gt;#.ll文件汇编成.bc文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;llc hello.bc -o hello.s  &lt;span class=&quot;comment&quot;&gt;#.bc或.ll文件生成汇编代码.s文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;llc hello.ll -o hello.s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc -c hello.s -o hello.o&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc hello.o -o hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;实际流程：.c--&amp;gt;.ll/.bc--&amp;gt;.s--&amp;gt;.o--&amp;gt;.elf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#.ll文件类似与汇编文件.s，而.bc文件类似于目标文件.o&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://llvm.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LLVM官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/column/details/llvm.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LLVM零基础学习&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/column/details/llvm-study.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LLVM每日谈&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在&lt;a href=&quot;http://llvm.org/releases/download.html&quot;&gt;官网下载页&lt;/a&gt;下载LLVM3.2版本的llvm3.2和clang3.2的source code压缩包&lt;/li&gt;
&lt;li&gt;解压后安装：./configure,make,sudo make install
    
    </summary>
    
      <category term="LLVM" scheme="http://hujun1413.github.io/categories/LLVM/"/>
    
    
  </entry>
  
  <entry>
    <title>CNCC讲座记录</title>
    <link href="http://hujun1413.github.io/2016/10/25/Informal_essay/CNCC%E8%AE%B2%E5%BA%A7%E8%AE%B0%E5%BD%95/"/>
    <id>http://hujun1413.github.io/2016/10/25/Informal_essay/CNCC讲座记录/</id>
    <published>2016-10-25T10:35:26.000Z</published>
    <updated>2017-06-09T02:37:48.574Z</updated>
    
    <content type="html">&lt;h3 id=&quot;张晓东教授&quot;&gt;&lt;a href=&quot;#张晓东教授&quot; class=&quot;headerlink&quot; title=&quot;张晓东教授&quot;&gt;&lt;/a&gt;张晓东教授&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ACM Felllow&lt;/li&gt;
&lt;li&gt;俄亥俄州立大学&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;《对社会和他人的贡献是检验成功的重要标准》&quot;&gt;&lt;a href=&quot;#《对社会和他人的贡献是检验成功的重要标准》&quot; class=&quot;headerlink&quot; title=&quot;《对社会和他人的贡献是检验成功的重要标准》&quot;&gt;&lt;/a&gt;《对社会和他人的贡献是检验成功的重要标准》&lt;/h3&gt;&lt;h4 id=&quot;“价值”比“成功”更重要&quot;&gt;&lt;a href=&quot;#“价值”比“成功”更重要&quot; class=&quot;headerlink&quot; title=&quot;“价值”比“成功”更重要&quot;&gt;&lt;/a&gt;“价值”比“成功”更重要&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;不成功但很有价值的人：孔子，贝多芬，叔本华，卡尔 马克思，梵高，怀特兄弟&lt;/li&gt;
&lt;li&gt;有价值又成功的中国科学家：袁隆平，屠呦呦，王选&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;原因：&quot;&gt;&lt;a href=&quot;#原因：&quot; class=&quot;headerlink&quot; title=&quot;原因：&quot;&gt;&lt;/a&gt;原因：&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;攻克在高需求领域的难题&lt;/li&gt;
&lt;li&gt;有独特的竞争优势&lt;/li&gt;
&lt;li&gt;长时间的努力&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;社会流动性是价值与成功的基础&quot;&gt;&lt;a href=&quot;#社会流动性是价值与成功的基础&quot; class=&quot;headerlink&quot; title=&quot;社会流动性是价值与成功的基础&quot;&gt;&lt;/a&gt;社会流动性是价值与成功的基础&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;社会流动性是公民平等和社会生机活力的基础&lt;/li&gt;
&lt;li&gt;巨大的社会贡献后所带来的个人成功和社会流动：Microsoft, Apple, Google, Facebook&lt;/li&gt;
&lt;li&gt;很多主要的计算机技术来源于大学的基础研究&lt;/li&gt;
&lt;li&gt;计算机科学的开发与研究改变了世界&lt;/li&gt;
&lt;li&gt;计算机系引以为自豪的科研成果&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;创造价值第一，成功第二&quot;&gt;&lt;a href=&quot;#创造价值第一，成功第二&quot; class=&quot;headerlink&quot; title=&quot;创造价值第一，成功第二&quot;&gt;&lt;/a&gt;创造价值第一，成功第二&lt;/h4&gt;&lt;h4 id=&quot;大学的教育太分离了，最具有创新的结果是三种教育的交集&quot;&gt;&lt;a href=&quot;#大学的教育太分离了，最具有创新的结果是三种教育的交集&quot; class=&quot;headerlink&quot; title=&quot;大学的教育太分离了，最具有创新的结果是三种教育的交集&quot;&gt;&lt;/a&gt;大学的教育太分离了，最具有创新的结果是三种教育的交集&lt;/h4&gt;&lt;h4 id=&quot;我在大学有哪些事让我难忘并影响了我一生：&quot;&gt;&lt;a href=&quot;#我在大学有哪些事让我难忘并影响了我一生：&quot; class=&quot;headerlink&quot; title=&quot;我在大学有哪些事让我难忘并影响了我一生：&quot;&gt;&lt;/a&gt;我在大学有哪些事让我难忘并影响了我一生：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;老师们的治学精神和对我们的关照&lt;br&gt;“Excellence is not an act but habit.”亚里士多德&lt;/li&gt;
&lt;li&gt;中央交响乐团指挥李德伦在北京各高校讲解古典音乐&lt;/li&gt;
&lt;li&gt;在激烈的争论中度过了4年&lt;/li&gt;
&lt;li&gt;每日的体育锻炼&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;教育的目的：多维智慧&quot;&gt;&lt;a href=&quot;#教育的目的：多维智慧&quot; class=&quot;headerlink&quot; title=&quot;教育的目的：多维智慧&quot;&gt;&lt;/a&gt;教育的目的：多维智慧&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Frame of Minds(Howard Gardner)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Peter Dannier&lt;br&gt;《Concurrency Control》&lt;/p&gt;
&lt;h3 id=&quot;吴甘沙&quot;&gt;&lt;a href=&quot;#吴甘沙&quot; class=&quot;headerlink&quot; title=&quot;吴甘沙&quot;&gt;&lt;/a&gt;吴甘沙&lt;/h3&gt;&lt;p&gt;驭势科技联合创始人，CEO&lt;br&gt;前英特尔中国研究院院长&lt;/p&gt;
&lt;h3 id=&quot;2016：时代的应许&quot;&gt;&lt;a href=&quot;#2016：时代的应许&quot; class=&quot;headerlink&quot; title=&quot;2016：时代的应许&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://t.qianzhan.com/daka/detail/161014-e0d91faf.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2016：时代的应许&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一台老“计算机”的升级之旅&lt;/p&gt;
&lt;h4 id=&quot;创造了连接&quot;&gt;&lt;a href=&quot;#创造了连接&quot; class=&quot;headerlink&quot; title=&quot;创造了连接&quot;&gt;&lt;/a&gt;创造了连接&lt;/h4&gt;&lt;p&gt;人与信息：搜索&lt;br&gt;人与人：社交&lt;br&gt;人与商品：电商&lt;br&gt;人与服务：O2O&lt;/p&gt;
&lt;h4 id=&quot;终日与对手缠斗，醒来发现营帐外&quot;&gt;&lt;a href=&quot;#终日与对手缠斗，醒来发现营帐外&quot; class=&quot;headerlink&quot; title=&quot;终日与对手缠斗，醒来发现营帐外&quot;&gt;&lt;/a&gt;终日与对手缠斗，醒来发现营帐外&lt;/h4&gt;&lt;p&gt;领悟一：&lt;br&gt;在时代的滚滚铁流面前，随时清空硬盘–永远保持空杯心态&lt;br&gt;非线性&lt;br&gt;颠覆性&lt;br&gt;不连续性（范式切换）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;渐进式思维（连续性思维）：我以前做过什么，现在会什么，未来由以前决定&lt;br&gt;案例：铱星计划&lt;/li&gt;
&lt;li&gt;变革性思维（非连续性思维）：遇见未来，以终为始&lt;br&gt;案例：美国登月计划&lt;br&gt;领悟二：&lt;br&gt;在数字时代要改变命运，必须改变思维方式。如果我是一台老计算机，我必须得重新刷机，必须得重装操作系统，必须得有变革性思维。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;你现在应该做什么，你现在会什么，你真正想做什么（现实，能力，理想）&quot;&gt;&lt;a href=&quot;#你现在应该做什么，你现在会什么，你真正想做什么（现实，能力，理想）&quot; class=&quot;headerlink&quot; title=&quot;你现在应该做什么，你现在会什么，你真正想做什么（现实，能力，理想）&quot;&gt;&lt;/a&gt;你现在应该做什么，你现在会什么，你真正想做什么（现实，能力，理想）&lt;/h4&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;张晓东教授&quot;&gt;&lt;a href=&quot;#张晓东教授&quot; class=&quot;headerlink&quot; title=&quot;张晓东教授&quot;&gt;&lt;/a&gt;张晓东教授&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ACM Felllow&lt;/li&gt;
&lt;li&gt;俄亥俄州立大学&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;《对社会和他人的贡献是检验成功的重要标准》&quot;&gt;&lt;a href=&quot;#《对社会和他人的贡献是检验成功的重要标准》&quot; class=&quot;headerlink&quot; title=&quot;《对社会和他人的贡献是检验成功的重要标准》&quot;&gt;&lt;/a&gt;《对社会和他人的贡献是检验成功的重要标准》&lt;/h3&gt;&lt;h4 id=&quot;“价值”比“成功”更重要&quot;&gt;&lt;a href=&quot;#“价值”比“成功”更重要&quot; class=&quot;headerlink&quot; title=&quot;“价值”比“成功”更重要&quot;&gt;&lt;/a&gt;“价值”比“成功”更重要&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;不成功但很有价值的人：孔子，贝多芬，叔本华，卡尔 马克思，梵高，怀特兄弟&lt;/li&gt;
&lt;li&gt;有价值又成功的中国科学家：袁隆平，屠呦呦，王选
    
    </summary>
    
      <category term="随笔" scheme="http://hujun1413.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Vim基础</title>
    <link href="http://hujun1413.github.io/2016/09/26/Linux/Vim%E5%9F%BA%E7%A1%80/"/>
    <id>http://hujun1413.github.io/2016/09/26/Linux/Vim基础/</id>
    <published>2016-09-26T11:25:26.000Z</published>
    <updated>2019-03-24T12:53:33.055Z</updated>
    
    <content type="html">&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ma6174/vim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ma6174/vim&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;插入&quot;&gt;&lt;a href=&quot;#插入&quot; class=&quot;headerlink&quot; title=&quot;插入&quot;&gt;&lt;/a&gt;插入&lt;/h2&gt;&lt;p&gt;i 在当前光标插入&lt;/p&gt;
&lt;p&gt;I 在当前行最前插入&lt;/p&gt;
&lt;p&gt;A 在当前行最后插入&lt;/p&gt;
&lt;p&gt;O 在光标上一行最前插入&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;复制-剪切-粘贴&quot;&gt;&lt;a href=&quot;#复制-剪切-粘贴&quot; class=&quot;headerlink&quot; title=&quot;复制/剪切/粘贴&quot;&gt;&lt;/a&gt;复制/剪切/粘贴&lt;/h2&gt;&lt;p&gt;v d 进入可视模式后剪切&lt;/p&gt;
&lt;p&gt;dd 剪切当前行&lt;/p&gt;
&lt;p&gt;dnd 剪切n行&lt;/p&gt;
&lt;p&gt;v y 进入可视模式后复制&lt;/p&gt;
&lt;p&gt;yy 复制当前行&lt;/p&gt;
&lt;p&gt;yny 复制n行&lt;/p&gt;
&lt;p&gt;p 粘贴&lt;/p&gt;
&lt;h2 id=&quot;光标移动&quot;&gt;&lt;a href=&quot;#光标移动&quot; class=&quot;headerlink&quot; title=&quot;光标移动&quot;&gt;&lt;/a&gt;光标移动&lt;/h2&gt;&lt;p&gt;ctrl+f 向下翻一页&lt;/p&gt;
&lt;p&gt;ctrl+b 向上翻一页&lt;/p&gt;
&lt;p&gt;ctrl+u 向上翻半页&lt;/p&gt;
&lt;p&gt;ctrl+d 向下翻半页&lt;/p&gt;
&lt;p&gt;j 向上移动一行&lt;/p&gt;
&lt;p&gt;k 向下移动一行&lt;/p&gt;
&lt;p&gt;h 向左移动一个字符&lt;/p&gt;
&lt;p&gt;l 向右移动一个字符&lt;/p&gt;
&lt;p&gt;数字0：移动到行首&lt;/p&gt;
&lt;p&gt;^:移动光标到非空格的行首&lt;/p&gt;
&lt;p&gt;$:移动光标到行尾&lt;/p&gt;
&lt;p&gt;gg 移动到第一行&lt;/p&gt;
&lt;p&gt;G 移动到最后一行&lt;/p&gt;
&lt;p&gt;nG 移动到第n行&lt;/p&gt;
&lt;h2 id=&quot;撤销-重做&quot;&gt;&lt;a href=&quot;#撤销-重做&quot; class=&quot;headerlink&quot; title=&quot;撤销/重做&quot;&gt;&lt;/a&gt;撤销/重做&lt;/h2&gt;&lt;p&gt;u 撤销，相当于word的ctrl+z&lt;/p&gt;
&lt;p&gt;ctrl+r 重做，相当于word的ctrl+y&lt;/p&gt;
&lt;h2 id=&quot;查找和替换&quot;&gt;&lt;a href=&quot;#查找和替换&quot; class=&quot;headerlink&quot; title=&quot;查找和替换&quot;&gt;&lt;/a&gt;查找和替换&lt;/h2&gt;&lt;p&gt;/word 在光标后查找word字符串&lt;/p&gt;
&lt;p&gt;回车后输入n代表同方向下一个,N代表反方向下一个&lt;/p&gt;
&lt;p&gt;?word 在光标前查找word字符串&lt;/p&gt;
&lt;p&gt;:n1,n2s/word1/word2/g 在第n1行和第n2行之间查找word1,并替换成word2&lt;/p&gt;
&lt;h2 id=&quot;保存-退出&quot;&gt;&lt;a href=&quot;#保存-退出&quot; class=&quot;headerlink&quot; title=&quot;保存/退出&quot;&gt;&lt;/a&gt;保存/退出&lt;/h2&gt;&lt;p&gt;:w 写入&lt;/p&gt;
&lt;p&gt;:wq 写入并退出&lt;/p&gt;
&lt;p&gt;:q 退出&lt;/p&gt;
&lt;p&gt;:q! 不保存退出&lt;/p&gt;
&lt;p&gt;:r [filename] 读入文件加入光标下一行&lt;/p&gt;
&lt;p&gt;:n1,n2 w [filename] 将n1到n2读内容保存到文件中&lt;/p&gt;
&lt;h2 id=&quot;多文件-窗口&quot;&gt;&lt;a href=&quot;#多文件-窗口&quot; class=&quot;headerlink&quot; title=&quot;多文件/窗口&quot;&gt;&lt;/a&gt;多文件/窗口&lt;/h2&gt;&lt;h3 id=&quot;未启动vim时&quot;&gt;&lt;a href=&quot;#未启动vim时&quot; class=&quot;headerlink&quot; title=&quot;未启动vim时&quot;&gt;&lt;/a&gt;未启动vim时&lt;/h3&gt;&lt;p&gt;vim file1 file2 … 只显示一个窗口&lt;/p&gt;
&lt;p&gt;vim -o file1 file2 上下分布&lt;/p&gt;
&lt;p&gt;vim -O file1 file2 左右分布&lt;/p&gt;
&lt;h3 id=&quot;已启动vim时&quot;&gt;&lt;a href=&quot;#已启动vim时&quot; class=&quot;headerlink&quot; title=&quot;已启动vim时&quot;&gt;&lt;/a&gt;已启动vim时&lt;/h3&gt;&lt;h4 id=&quot;打开&quot;&gt;&lt;a href=&quot;#打开&quot; class=&quot;headerlink&quot; title=&quot;打开&quot;&gt;&lt;/a&gt;打开&lt;/h4&gt;&lt;p&gt;:open file 只显示一个文件&lt;/p&gt;
&lt;p&gt;:sp file 上下分布&lt;/p&gt;
&lt;p&gt;:vs file 左右分布&lt;/p&gt;
&lt;h4 id=&quot;切换&quot;&gt;&lt;a href=&quot;#切换&quot; class=&quot;headerlink&quot; title=&quot;切换&quot;&gt;&lt;/a&gt;切换&lt;/h4&gt;&lt;p&gt;文件间（在当前窗格间切换不同文件）：&lt;br&gt;ctrl+6  下一个文件&lt;br&gt;:bn 下一个文件&lt;br&gt;:bp 上一个文件&lt;br&gt;窗格间：&lt;br&gt;ctrl+ww 依次向后切换下一个窗格&lt;br&gt;ctrl+w+h/j/k/l 切换到上下左右（k上j下h左l右）的窗格&lt;/p&gt;
&lt;h2 id=&quot;Vim配置&quot;&gt;&lt;a href=&quot;#Vim配置&quot; class=&quot;headerlink&quot; title=&quot;Vim配置&quot;&gt;&lt;/a&gt;Vim配置&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/younger_china/article/details/13613461&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;个人VIM配置实例&lt;/a&gt;&lt;br&gt;修改 /etc/vim/vimrc，进行个性化配置&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if filereadable(&quot;/etc/vim/vimrc.local&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  source /etc/vim/vimrc.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;显示行号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set nu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;缩进为4空格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set tabstop=4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;继承前一行的缩进方式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set autoindent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### &quot;允许退格键删除&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set backspace=2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;启用鼠标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set mouse=a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set selection=exclusive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set selectmode=mouse,key&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;一般模式：删除、复制与粘贴类命令&quot;&gt;&lt;a href=&quot;#一般模式：删除、复制与粘贴类命令&quot; class=&quot;headerlink&quot; title=&quot;一般模式：删除、复制与粘贴类命令&quot;&gt;&lt;/a&gt;一般模式：删除、复制与粘贴类命令&lt;/h2&gt;&lt;p&gt;x,X                      x为向后删除一个字符，X为先前删除一个字符&lt;br&gt;nx(n代表数字)             向后删除n个字符&lt;br&gt;dd                       删除当前行&lt;br&gt;D                        删除当前行所有字符，试成为空行&lt;br&gt;ndd(n代表数字)            删除光标所在行的向下n列&lt;br&gt;d1G                      删除光标所在行到第一行的所有数据&lt;br&gt;dG                       删除光标所在行到最后一行的所有数据&lt;br&gt;yy                       复制光标所在行&lt;br&gt;y1G                      复制光标所在行到第一行的所有数据&lt;br&gt;yG                       复制光标所在行到最后一行的所有数据&lt;br&gt;ynj(n代表数字)            复制光标所在行向下n+1行&lt;br&gt;dnj(n代表数字)            删除光标所在行向下n+1行&lt;br&gt;p,P                      p为复制的数据粘贴在光标的下一行，P为复制的数据粘贴在光标的上一行&lt;br&gt;J                        将光标所在行与下一行的数据结合成一行&lt;br&gt;u                        恢复前一个动作(undo)&lt;/p&gt;
&lt;h2 id=&quot;编辑模式命令&quot;&gt;&lt;a href=&quot;#编辑模式命令&quot; class=&quot;headerlink&quot; title=&quot;编辑模式命令&quot;&gt;&lt;/a&gt;编辑模式命令&lt;/h2&gt;&lt;p&gt;i,I                      i为在当前光标所在处插入输入的文字，I为在光标所在行第一个非空字符插入输入的文字&lt;br&gt;a,A                      a为在当前光标所在处下一个字符插入输入的文字，A为在光标所在行最后一个字符的下一个字符处插入输入的文字&lt;br&gt;o,O                      o为在光标所在行的下一行行首开始插入字符，O为在光标所在行的上一行行首开始插入字符&lt;br&gt;r,R                      r为替换光标所在那一个字符，R为一直替换光标所指的文字，直到退出&lt;br&gt;Esc                      退出，回到一般模式&lt;/p&gt;
&lt;h2 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命令模式&lt;/h2&gt;&lt;p&gt;h                        光标向左移一个字符&lt;br&gt;j                        光标向下移一个字符&lt;br&gt;k                        光标向上移一个字符&lt;br&gt;l                        光标向右移一个字符&lt;br&gt;Ctrl+f                   屏幕向下翻一页&lt;br&gt;Ctrl+b                   屏幕向上翻一页&lt;br&gt;Ctrl+d                   屏幕向下翻半页&lt;br&gt;Ctrl+u                   屏幕向上翻半页&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;光标移动到下一行的第一个非空字符&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;光标移动到当前行的第一个非空字符&lt;br&gt;n空格(n代表数字)           光标向当前行向右移动n个字符&lt;br&gt;0(数字0)                  光标移动到当前行的第一个字符(可以为空字符,注意与-区分）&lt;br&gt;$                        光标移动到当前行的最后一个字符(可以为空字符,注意与-区分）&lt;br&gt;H                        光标移动到当前屏幕最上方的那一行的第一个非空字符&lt;br&gt;M                        光标移动到当前屏幕最中间那一行的第一个非空字符&lt;br&gt;L                        光标移动到当前屏幕最下方的那一行的第一个非空字符&lt;br&gt;G                        光标移动到该文章最后一行的第一个非空字符&lt;br&gt;nG(n代表数字)             光标移动到该文章第n行的第一个非空字符&lt;br&gt;n                        光标从当前行向下移动n行的第一个非空字符&lt;br&gt;/word                    在光标之后查找word字符串&lt;br&gt;?word                    在光标之前查找word字符串&lt;br&gt;:s/word1/word2/g         在光标当前行查找word1，并替换成word2&lt;br&gt;:n1,n2s/word1/word2/g    在第n1行与第n2行之间查找word1，并替换成word2&lt;br&gt;:%s/word1/word2/g        整个文章查找word1，并替换成word2&lt;br&gt;:w                       将编辑的数据保存到硬盘文件中&lt;br&gt;:w [filename]            将编辑后的数据保存到硬盘的另一个文件中&lt;br&gt;:r [filename]            在编辑数据时，读入另一个文件中的数据，即将filename文件中的内容加到光标所在行下一行&lt;br&gt;:wq或:x                  保存并退出&lt;br&gt;:q                       退出，适用于未修改的文件&lt;br&gt;:q!                      强制退出，适用于修改文件后不保存退出&lt;br&gt;:set nu                  显示行号&lt;br&gt;:set nonu                取消行号&lt;br&gt;:n1,n2 w [filename]      将n1到n2行的内容保存到名为filename的文件中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;linux下vim命令总结&quot;&gt;&lt;a href=&quot;#linux下vim命令总结&quot; class=&quot;headerlink&quot; title=&quot;linux下vim命令总结&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_4ce89f200100vkb5.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;linux下vim命令总结&lt;/a&gt;&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ma6174/vim&quot;&gt;ma6174/vim&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;插入&quot;&gt;&lt;a href=&quot;#插入&quot; class=&quot;headerlink&quot; title=&quot;插入&quot;&gt;&lt;/a&gt;插入&lt;/h2&gt;&lt;p&gt;i 在当前光标插入&lt;/p&gt;
&lt;p&gt;I 在当前行最前插入&lt;/p&gt;
&lt;p&gt;A 在当前行最后插入&lt;/p&gt;
&lt;p&gt;O 在光标上一行最前插入&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://hujun1413.github.io/categories/Linux/"/>
    
    
      <category term="Vim" scheme="http://hujun1413.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hujun1413.github.io/2016/04/07/Informal_essay/hello-world/"/>
    <id>http://hujun1413.github.io/2016/04/07/Informal_essay/hello-world/</id>
    <published>2016-04-07T08:25:26.000Z</published>
    <updated>2017-03-05T03:59:14.836Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考：&quot;&gt;&lt;a href=&quot;#参考：&quot; class=&quot;headerlink&quot; title=&quot;参考：&quot;&gt;&lt;/a&gt;参考：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.linuxdiyf.com/linux/18320.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ubuntu15.04安装hexo&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://lovenight.github.io/2015/11/10/Hexo-3-1-1-静态博客搭建指南/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo 3.1.1 静态博客搭建指南&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000007385345&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo不同电脑之间同步写博客&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Requirements&quot;&gt;&lt;a href=&quot;#Requirements&quot; class=&quot;headerlink&quot; title=&quot;Requirements&quot;&gt;&lt;/a&gt;Requirements&lt;/h2&gt;&lt;h3 id=&quot;nodejs&quot;&gt;&lt;a href=&quot;#nodejs&quot; class=&quot;headerlink&quot; title=&quot;nodejs&quot;&gt;&lt;/a&gt;nodejs&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget -qO- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nvm install stable&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;git&quot;&gt;&lt;a href=&quot;#git&quot; class=&quot;headerlink&quot; title=&quot;git&quot;&gt;&lt;/a&gt;git&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;install-hexo&quot;&gt;&lt;a href=&quot;#install-hexo&quot; class=&quot;headerlink&quot; title=&quot;install hexo&quot;&gt;&lt;/a&gt;install hexo&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;init&quot;&gt;&lt;a href=&quot;#init&quot; class=&quot;headerlink&quot; title=&quot;init&quot;&gt;&lt;/a&gt;init&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install  &lt;span class=&quot;comment&quot;&gt;#安装依赖包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-git --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://hujun1413.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://hujun1413.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基本用法</title>
    <link href="http://hujun1413.github.io/2016/04/07/Informal_essay/Markdown%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://hujun1413.github.io/2016/04/07/Informal_essay/Markdown基本用法/</id>
    <published>2016-04-07T03:25:26.000Z</published>
    <updated>2017-06-09T02:37:01.764Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Markdown语法学习&quot;&gt;&lt;a href=&quot;#Markdown语法学习&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法学习&quot;&gt;&lt;/a&gt;Markdown语法学习&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.appinn.com/markdown/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown中文版语法说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/1e402922ee32/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown——入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/0b257de21eb5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown进阶语法整理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cmd Markdown 简明语法手册&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;插入目录&quot;&gt;&lt;a href=&quot;#插入目录&quot; class=&quot;headerlink&quot; title=&quot;插入目录&quot;&gt;&lt;/a&gt;插入目录&lt;/h2&gt;使用[TOC]引用目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;[TOC]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;插入图片&quot;&gt;&lt;a href=&quot;#插入图片&quot; class=&quot;headerlink&quot; title=&quot;插入图片&quot;&gt;&lt;/a&gt;插入图片&lt;/h2&gt;&lt;p&gt;&lt;code&gt;![](link &amp;quot;图片名1&amp;quot;)&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;link&quot; alt=&quot;&quot; title=&quot;图片名1&quot;&gt;&lt;br&gt;hexo在图片下方显示图片描述：&lt;br&gt;&lt;code&gt;&lt;img src=&quot;link&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;图片描述&quot;&gt;&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;link&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;图片描述&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;gt; 这是引用&lt;/code&gt;&lt;br&gt;注意&amp;gt;与文字之间的空格&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是引用&lt;/p&gt;
&lt;p&gt;这是一级引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是二级引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是三级引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一级引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 这是一级引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt; 这是二级引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; 这是三级引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 这是一级引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 这是一级引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt; 这是二级引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; 这是三级引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 这是一级引用&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一级引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是二级引用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是三级引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一级引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意&amp;gt;与文字之间的空格&lt;/p&gt;
&lt;h2 id=&quot;粗体与斜体&quot;&gt;&lt;a href=&quot;#粗体与斜体&quot; class=&quot;headerlink&quot; title=&quot;粗体与斜体&quot;&gt;&lt;/a&gt;粗体与斜体&lt;/h2&gt;&lt;p&gt;&lt;code&gt;**这是粗体** or __这是粗体__&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这是粗体&lt;/strong&gt; or &lt;strong&gt;这是粗体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*这是斜体* or _这是斜体_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这是斜体&lt;/em&gt; or &lt;em&gt;这是斜体&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;反斜杠\表示不想显示Markdown标记：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\*这里不会显示斜体\*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;*这里不会显示斜体*&lt;/p&gt;
&lt;h2 id=&quot;标题一&quot;&gt;&lt;a href=&quot;#标题一&quot; class=&quot;headerlink&quot; title=&quot;标题一&quot;&gt;&lt;/a&gt;标题一&lt;/h2&gt;&lt;h3 id=&quot;标题二&quot;&gt;&lt;a href=&quot;#标题二&quot; class=&quot;headerlink&quot; title=&quot;标题二&quot;&gt;&lt;/a&gt;标题二&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;## 标题一&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 标题二&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;这是一级标题&quot;&gt;&lt;a href=&quot;#这是一级标题&quot; class=&quot;headerlink&quot; title=&quot;这是一级标题&quot;&gt;&lt;/a&gt;这是一级标题&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这是一级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;===&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;这是二级标题&quot;&gt;&lt;a href=&quot;#这是二级标题&quot; class=&quot;headerlink&quot; title=&quot;这是二级标题&quot;&gt;&lt;/a&gt;这是二级标题&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;这是二级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-------------&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;分割线&quot;&gt;&lt;a href=&quot;#分割线&quot; class=&quot;headerlink&quot; title=&quot;分割线&quot;&gt;&lt;/a&gt;分割线&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-----&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h2&gt;&lt;h3 id=&quot;无序列表&quot;&gt;&lt;a href=&quot;#无序列表&quot; class=&quot;headerlink&quot; title=&quot;无序列表&quot;&gt;&lt;/a&gt;无序列表&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* 列表一&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 列表二&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 1. 有序列表一&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2. 有序列表二&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;列表一&lt;/li&gt;
&lt;li&gt;列表二&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;有序列表一&lt;/li&gt;
&lt;li&gt;有序列表二&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ 呵呵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 嘉嘉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - 嘻嘻&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - 吼吼&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - 嘎嘎&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        + 桀桀&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;呵呵&lt;ul&gt;
&lt;li&gt;嘉嘉&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;嘻嘻&lt;/li&gt;
&lt;li&gt;吼吼&lt;ul&gt;
&lt;li&gt;嘎嘎&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;桀桀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;有序列表&quot;&gt;&lt;a href=&quot;#有序列表&quot; class=&quot;headerlink&quot; title=&quot;有序列表&quot;&gt;&lt;/a&gt;有序列表&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. * 有序一&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * 呵呵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * 和哈&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 有序二&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 有序三&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;有序一&lt;/li&gt;
&lt;li&gt;呵呵&lt;/li&gt;
&lt;li&gt;和哈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有序二&lt;/li&gt;
&lt;li&gt;有序三&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;表格&quot;&gt;&lt;a href=&quot;#表格&quot; class=&quot;headerlink&quot; title=&quot;表格&quot;&gt;&lt;/a&gt;表格&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;| Tables        | Are           | Cool  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| ------------- |:-------------:| -----:|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| col 3 is      | right-aligned | $1600 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| col 2 is      | centered      |   $12 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| zebra stripes | are neat      |    $1 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;------: 为右对齐。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:------ 为左对齐。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:------: 为居中对齐。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;------- 为使用默认居中对齐。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tables&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Are&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;Cool&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;col 3 is&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;right-aligned&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$1600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;col 2 is&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;centered&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zebra stripes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;are neat&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dog | bird | cat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----|------|----&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo | foo  | foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar | bar  | bar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baz | baz  | baz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;dog&lt;/th&gt;
&lt;th&gt;bird&lt;/th&gt;
&lt;th&gt;cat&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bar&lt;/td&gt;
&lt;td&gt;bar&lt;/td&gt;
&lt;td&gt;bar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;baz&lt;/td&gt;
&lt;td&gt;baz&lt;/td&gt;
&lt;td&gt;baz&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;h3 id=&quot;行内代码-inline-code&quot;&gt;&lt;a href=&quot;#行内代码-inline-code&quot; class=&quot;headerlink&quot; title=&quot;行内代码(inline code)&quot;&gt;&lt;/a&gt;行内代码(inline code)&lt;/h3&gt;&lt;p&gt;&lt;code&gt;cd ~/kobuki/src&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;块代码&quot;&gt;&lt;a href=&quot;#块代码&quot; class=&quot;headerlink&quot; title=&quot;块代码&quot;&gt;&lt;/a&gt;块代码&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/kobuki/src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wstool &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; ecl_core --git https://github.com/stonier/ecl_core --version=release/0.61-indigo-kinetic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wstool &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; ecl_navigation --git https://github.com/stonier/ecl_navigation --version=release/0.60-indigo-kinetic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wstool update ecl_core&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wstool update ecl_navigation&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[胡君的个人博客](http://hujun1413.github.io/ &amp;quot;胡君博客&amp;quot;)[](link &amp;quot;Optional title&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Optional title&amp;quot;为显示标题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在你将鼠标放到链接上后，会显示一个小框提示Optional title 里的内容。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;~~胡君的个人博客&amp;lt;http://hujun1413.github.io/&amp;gt;~~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;胡君的邮箱&amp;lt;359328242@qq.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[之后定义链接][id]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;cool one like this.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[id]: http://hujun1413.github.io/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://hujun1413.github.io/&quot; title=&quot;胡君博客&quot;&gt;胡君的个人博客&lt;/a&gt;&lt;a href=&quot;link&quot; title=&quot;Optional title&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“Optional title”为显示标题。&lt;br&gt;在你将鼠标放到链接上后，会显示一个小框提示Optional title 里的内容。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;胡君的个人博客&lt;a href=&quot;http://hujun1413.github.io/&quot;&gt;http://hujun1413.github.io/&lt;/a&gt;&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;胡君的邮箱&lt;a href=&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#111;&amp;#x3a;&amp;#x33;&amp;#53;&amp;#57;&amp;#51;&amp;#x32;&amp;#x38;&amp;#50;&amp;#52;&amp;#x32;&amp;#64;&amp;#113;&amp;#x71;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#x6d;&quot;&gt;&amp;#x33;&amp;#53;&amp;#57;&amp;#51;&amp;#x32;&amp;#x38;&amp;#50;&amp;#52;&amp;#x32;&amp;#64;&amp;#113;&amp;#x71;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#x6d;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://hujun1413.github.io/&quot;&gt;之后定义链接&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cool one like this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;脚注&quot;&gt;&lt;a href=&quot;#脚注&quot; class=&quot;headerlink&quot; title=&quot;脚注&quot;&gt;&lt;/a&gt;脚注&lt;/h2&gt;&lt;p&gt;使用 [^num] 表示注脚&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;正文[^1]文字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[^1]: 脚注内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;正文[^2]文字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[^2]: 脚注内容&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正文&lt;a href=&quot;脚注内容&quot;&gt;^1&lt;/a&gt;文字&lt;/p&gt;
&lt;p&gt;正文&lt;a href=&quot;脚注内容&quot;&gt;^2&lt;/a&gt;文字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;备注：关于注脚每个编辑器表示方式会有所不用，hexo的Markdown中不支持这种&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;待办事宜-Todo&quot;&gt;&lt;a href=&quot;#待办事宜-Todo&quot; class=&quot;headerlink&quot; title=&quot;待办事宜 Todo&quot;&gt;&lt;/a&gt;待办事宜 Todo&lt;/h2&gt;&lt;p&gt;使用带有- [ ] 或- [x]（未完成或已完成）项的列表语法撰写一个待办事宜列表&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- [ ] works as a framework (all components running in one process, no threads)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- [ ] redis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;[ ] works as a framework (all components running in one process, no threads)&lt;/li&gt;
&lt;li&gt;[ ] redis&lt;/li&gt;
&lt;li&gt;[ ]&lt;br&gt;hexo的Markdown中不支持，采用以下方法替代&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input type=&amp;apos;checkbox&amp;apos; onclick=&amp;apos;return false;&amp;apos; checked&amp;gt; works as a framework &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input type=&amp;apos;checkbox&amp;apos; onclick=&amp;apos;return false;&amp;apos; unchecked&amp;gt; redis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; onclick=&quot;return false;&quot; checked&gt; works as a framework&lt;/p&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; onclick=&quot;return false;&quot; unchecked=&quot;&quot;&gt; redis&lt;/p&gt;
&lt;h2 id=&quot;空格和空行&quot;&gt;&lt;a href=&quot;#空格和空行&quot; class=&quot;headerlink&quot; title=&quot;空格和空行&quot;&gt;&lt;/a&gt;空格和空行&lt;/h2&gt;&lt;h3 id=&quot;空格&quot;&gt;&lt;a href=&quot;#空格&quot; class=&quot;headerlink&quot; title=&quot;空格&quot;&gt;&lt;/a&gt;空格&lt;/h3&gt;&lt;p&gt;Markdown语法会忽略首行开头的空格，如果要体现出首行开头空两个的效果，可以使用 全角符号下的空格 ，windows下使用 shift+空格 切换。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;胡君的个人博客&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 胡君的个人博客１(半角空格)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　胡君的个人博客２（全角空格）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;空格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　空格&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;胡君的个人博客&lt;br&gt; 胡君的个人博客１(半角空格)&lt;br&gt;　胡君的个人博客２（全角空格）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;空格&lt;br&gt;　空格&lt;/p&gt;
&lt;h3 id=&quot;空行&quot;&gt;&lt;a href=&quot;#空行&quot; class=&quot;headerlink&quot; title=&quot;空行&quot;&gt;&lt;/a&gt;空行&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;内容一&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;br/&amp;gt;内容二&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;br&amp;gt;内容二&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;br /&amp;gt;内容二&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;内容一&lt;br&gt;&lt;br&gt;内容二&lt;br&gt;&lt;br&gt;内容二&lt;br&gt;&lt;br&gt;内容二&lt;/p&gt;
&lt;h2 id=&quot;页内跳转&quot;&gt;&lt;a href=&quot;#页内跳转&quot; class=&quot;headerlink&quot; title=&quot;页内跳转&quot;&gt;&lt;/a&gt;页内跳转&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[你好](#jump)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;span id = &amp;quot;jump&amp;quot;&amp;gt;hehe&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;#jump&quot;&gt;你好&lt;/a&gt;&lt;br&gt;&lt;span id=&quot;jump&quot;&gt;hehe&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;LaTeX公式&quot;&gt;&lt;a href=&quot;#LaTeX公式&quot; class=&quot;headerlink&quot; title=&quot;LaTeX公式&quot;&gt;&lt;/a&gt;LaTeX公式&lt;/h2&gt;&lt;h3 id=&quot;表示行内公式&quot;&gt;&lt;a href=&quot;#表示行内公式&quot; class=&quot;headerlink&quot; title=&quot;$ 表示行内公式&quot;&gt;&lt;/a&gt;$ 表示行内公式&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。&lt;/p&gt;
&lt;h3 id=&quot;表示整行公式&quot;&gt;&lt;a href=&quot;#表示整行公式&quot; class=&quot;headerlink&quot; title=&quot;$$ 表示整行公式&quot;&gt;&lt;/a&gt;$$ 表示整行公式&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$$\sum_&amp;#123;i=1&amp;#125;^n a_i=0$$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$\sum^&amp;#123;j-1&amp;#125;_&amp;#123;k=0&amp;#125;&amp;#123;\widehat&amp;#123;\gamma&amp;#125;_&amp;#123;kj&amp;#125; z_k&amp;#125;$$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;$$\sum_{i=1}^n a_i=0$$&lt;br&gt;$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x&lt;em&gt;n^2 $$&lt;br&gt;$$\sum^{j-1}&lt;/em&gt;{k=0}{\widehat{\gamma}_{kj} z_k}$$&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Markdown语法学习&quot;&gt;&lt;a href=&quot;#Markdown语法学习&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法学习&quot;&gt;&lt;/a&gt;Markdown语法学习&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.appinn.com/markdown/&quot;&gt;Markdown中文版语法说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/1e402922ee32/&quot;&gt;Markdown——入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/0b257de21eb5&quot;&gt;Markdown进阶语法整理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown&quot;&gt;Cmd Markdown 简明语法手册&lt;/a&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://hujun1413.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
